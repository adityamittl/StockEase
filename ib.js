function S3Store(e, t) {
  var n = window.ENV_VARS,
    o = BUCKET_MAP[n.application.env_id][n.mode];
  (this.bucket = t || o.bucket),
    (this.bucketRegion = e || o.region),
    (this.upload_params = null),
    (this.attachment = null);
}
function deleteDiagram(e) {
  0 !== Object.keys(deleteDiagramMap).length &&
    (null == e && (e = ""),
    $.ajax({
      url: e + "delete-diagram",
      method: "POST",
      data: {
        delete_diagram: deleteDiagramMap,
      },
      success: function (e) {
        e.success && (deleteDiagramMap = {});
      },
      error: function () {
        recordErrors("Diagram deletion failed!");
      },
    }));
}
function MergeRequest(e, t) {
  (this.stage = e),
    (this.title = this.getTitle()),
    (this.description = this.getDescription(e, t)),
    (this.details = {});
}
function DiagramEditor(e, t, n) {
  (this.config = null != e ? e : this.config),
    (this.done = null != n ? n : this.done),
    (this.ui = null != t ? t : this.ui);
  var o = this;
  this.handleMessageEvent = function (e) {
    if (
      null != o.frame &&
      e.source == o.frame.contentWindow &&
      e.data.length > 0
    )
      try {
        var t = JSON.parse(e.data);
        null != t && o.handleMessage(t);
      } catch (e) {
        console.error(e);
      }
  };
}
function TabCreator(e, t, n) {
  (this.name = e),
    (this.time = null == n ? Number(new Date()) : n),
    (this.data = t);
}
function updateEvaluationDetails(e, t, n) {
  return (
    "design" === n
      ? e.map((e) => {
          t[e.id].map((e) => {
            (e.content = e.image_url), (e.title = e.filename.slice(0, -11));
          }),
            (e.extraDiagram = t[e.id].length - 5);
        })
      : "maxwell" === n &&
        e.map((e) => {
          t[e.id].map((e) => {
            (e.content = e.url), (e.title = e.title);
          }),
            (e.extraDiagram = t[e.id].length - 5);
        }),
    {
      evaluation_list: e,
      details: t,
    }
  );
}
function attachObserverByClass(e, t) {
  const n = document.getElementsByClassName(e),
    o = new IntersectionObserver((e, n) => {
      e.forEach((e) => {
        e.isIntersecting && t(e), n.unobserve(e.target);
      });
    });
  for (item of n) o.observe(item);
}
function firebaseCustomTokenAuth(e) {
  return new Promise(function (t, n) {
    firebase || n("Firebase not initialised"),
      e || n("Firebase auth token not provided");
    const o = "FIREBASE_CUSTOM_SESSION_TOKEN",
      i = window.localStorage.getItem(o),
      r = e;
    i !== r
      ? firebase
          .auth()
          .signOut()
          .then(function () {
            return (
              window.localStorage.setItem(o, r),
              firebase.auth().signInWithCustomToken(r)
            );
          })
          .then(function () {
            t();
          })
          .catch(function (e) {
            console.error(e), n("Firebase authentication failed");
          })
      : t();
  });
}
function humanize(e) {
  var t,
    n = e.split("_");
  for (t = 0; t < n.length; t += 1)
    n[t] = n[t].charAt(0).toUpperCase() + n[t].slice(1);
  return n.join(" ");
}
function endTestCB(e, t) {
  window[ANDROID_WEBVIEW_INTERFACE_NAME] &&
    window[ANDROID_WEBVIEW_INTERFACE_NAME][e] &&
    "function" == typeof window[ANDROID_WEBVIEW_INTERFACE_NAME][e] &&
    window[ANDROID_WEBVIEW_INTERFACE_NAME][e](t);
}
function setGlobalConfig(e) {
  globalConfig = e;
}
function endTest() {
  $.ajax({
    url: rootUrl + "finish",
    type: "POST",
    success: function (e) {
      endTestCB("closeWebview", "end"),
        "" != e.redirect_url
          ? (window.location.href = e.redirect_url)
          : (window.location = "feedback");
    },
    error: function (e) {
      console.log(e);
    },
  });
}
function endSection(e) {
  e = e;
  $.ajax({
    url: rootUrl + "end-section",
    data: {
      section_key: e,
    },
    type: "POST",
    success: function () {
      toastr.info("One of the sections has ended. Refreshing...", "INFO"),
        setTimeout(function () {
          $("#index_page").click();
        }, 2e3);
    },
    error: function (e) {
      console.log(e);
    },
  });
}
function endIdeathonPhase(e) {
  toastr.info(e + " Phase has ended! Refreshing...", "INFO"),
    setTimeout(function () {
      window.location.reload();
    }, 5e3);
}
function recordRestrictedEvent(e, t, n, o) {
  if (([void 0, null].includes(n) && (n = !0), window.ignore_event))
    window.ignore_event = !1;
  else if (
    ("" !== e &&
      recordedEvents.push({
        event_type: e,
        event_value: t,
        timestamp: new Date().toJSON().slice(0, 19).replace("T", " ") + " UTC",
      }),
    window.logoutOnCrime && window.logoutOnCrime(),
    window.disqualifyOnCrime && window.disqualifyOnCrime(),
    window.SHOW_RESTRICTED_EVENT_NOTIFICATION &&
      alertCount <= MAX_ALERTS &&
      n &&
      toastr.warning(
        "You have performed " +
          alertCount +
          " restricted event(s). You might be DISQUALIFIED after " +
          MAX_ALERTS +
          " events.",
        "WARNING!",
        {
          timeOut: 1e4,
        }
      ),
    o || recordedEvents.length >= window.maxEventsBeforeSend)
  ) {
    var i = JSON.stringify(recordedEvents);
    recordedEvents = [];
    try {
      $.ajax({
        url: rootUrl + "record-batch-events",
        type: "POST",
        data: {
          events: i,
        },
        success: function (e) {
          e.success && (recordedEvents = []);
        },
        error: function (e) {
          console.log(e);
        },
      });
    } catch (e) {
      console.log("Event record failed.");
    }
  }
}
function recordErrors(e) {
  window.location.pathname.match(/^\/test\//g) &&
    $.ajax({
      url: rootUrl + "error",
      type: "POST",
      data: {
        error: e,
      },
      success: function () {},
      error: function (e) {
        console.log(e);
      },
    });
}
function handleVisibilityChange() {
  (0 != document.webkitIsFullScreen &&
    0 != document.mozFullScreen &&
    0 != document.msFullscreenElement) ||
    (document.hidden &&
      !window.ignore_event &&
      (alertCount++, recordRestrictedEvent("tab_switch")));
}
function openConnectivityCheck() {
  $("#ib_loader").hide(),
    toastr.error(
      "Not able to establish connection to InterviewBit Servers. Please check internet connectivity",
      "Error",
      {
        timeOut: 3e4,
      }
    ),
    (shownConnectivityToast = !0);
}
function closeConnectivityCheck() {
  1 == shownConnectivityToast &&
    (toastr.success("Connection Established!", "SUCCESS", {
      timeOut: 3e4,
    }),
    (shownConnectivityToast = !1));
}
function cloneObject(e) {
  return JSON.parse(JSON.stringify(e));
}
function sortObjectByKey(e) {
  var t = [],
    n = {};
  for (var o in e) e.hasOwnProperty(o) && t.push(o);
  return (
    t.sort(),
    jQuery.each(t, function (t, o) {
      n[o] = e[o];
    }),
    n
  );
}
function serverErrorHandling(e) {
  if (($("#ib_loader").hide(), "abort" != e.statusText)) {
    EXIT_WARNINGS = 1;
    var t = window.location.href.split("/")[4].toString(),
      n = JSON.parse(localStorage.getItem("serverError"));
    if ((null == n && (n = {}), n[t])) {
      if (
        ((n[t] = n[t] + 1),
        (localStorage.serverError = JSON.stringify(n)),
        n[t] % 3 == 0)
      ) {
        var o =
          e.config && e.config.url
            ? e.config.url
            : "url not catched in response";
        recordErrors(
          "Server Error occured for this test slug " +
            t +
            " for " +
            n[t] +
            " times. Details: Request Status is " +
            e.status +
            " with statusText as " +
            e.statusText +
            " and request failed at " +
            o
        );
      }
    } else (n[t] = 1), localStorage.setItem("serverError", JSON.stringify(n));
    n[t] > 3
      ? toastr.error(
          "Something went wrong! Please contact IB team..",
          "Error",
          {
            timeOut: 5e3,
          }
        )
      : (toastr.error("Something went wrong! Refreshing the page..", "Error", {
          timeOut: 5e3,
        }),
        location.reload());
  }
}
function cancelAllRequestsAndIntervals() {
  currentSaveRequest && currentSaveRequest.abort(),
    currentCodeRequest && currentCodeRequest.abort(),
    null !== autoSaveDiagram && clearInterval(autoSaveDiagram),
    currentSaveDiagramRequest && currentSaveDiagramRequest.abort(),
    clearTimeout(getStatusTimer),
    clearTimeout(autoSave);
}
function initializeCarousel() {
  [...document.querySelectorAll("[data-carousel]")].map((e) => {
    const t = document.getElementById(e.getAttribute("data-carousel"));
    t.addEventListener("scroll", function () {
      t.scrollLeft >= t.scrollWidth - t.offsetWidth
        ? (e.querySelector('[data-carousel-chevron="right"]').style.display =
            "none")
        : t.scrollLeft <= 0
        ? (e.querySelector('[data-carousel-chevron="left"]').style.display =
            "none")
        : ((e.querySelector('[data-carousel-chevron="right"]').style.display =
            "block"),
          (e.querySelector('[data-carousel-chevron="left"]').style.display =
            "block"));
    });
  });
}
Array.prototype.includes ||
  Object.defineProperty(Array.prototype, "includes", {
    value: function (e, t) {
      function n(e, t) {
        return (
          e === t ||
          ("number" == typeof e && "number" == typeof t && isNaN(e) && isNaN(t))
        );
      }
      if (null == this) throw new TypeError('"this" is null or not defined');
      var o = Object(this),
        i = o.length >>> 0;
      if (0 === i) return !1;
      for (
        var r = 0 | t, a = Math.max(r >= 0 ? r : i - Math.abs(r), 0);
        a < i;

      ) {
        if (n(o[a], e)) return !0;
        a++;
      }
      return !1;
    },
  }),
  Object.values ||
    (Object.values = function (e) {
      return Object.keys(e).map(function (t) {
        return e[t];
      });
    }),
  (myinterviewtrainer = {}),
  (myinterviewtrainer.createNS = function (e) {
    var t = e.split("."),
      n = myinterviewtrainer;
    "myinterviewtrainer" === t[0] && (t = t.slice(1));
    for (var o = 0; o < t.length; o++) {
      var i = t[o];
      void 0 === n[i] && (n[i] = {}), (n = n[i]);
    }
    return n;
  });
var get_browser = function () {
    var e,
      t = navigator.userAgent,
      n =
        t.match(
          /(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i
        ) || [];
    if (/trident/i.test(n[1]))
      return {
        name: "IE",
        version: (e = /\brv[ :]+(\d+)/g.exec(t) || [])[1] || "",
      };
    if ("Chrome" === n[1] && null != (e = t.match(/\bOPR|Edge\/(\d+)/)))
      return {
        name: "Opera",
        version: e[1],
      };
    (n = n[2] ? [n[1], n[2]] : [navigator.appName, navigator.appVersion, "-?"]),
      null != (e = t.match(/version\/(\d+)/i)) && n.splice(1, 1, e[1]);
    var o =
        (!!window.opr && !!opr.addons) ||
        !!window.opera ||
        navigator.userAgent.indexOf(" OPR/") >= 0,
      i = "undefined" != typeof InstallTrigger,
      r =
        /constructor/i.test(window.HTMLElement) ||
        "[object SafariRemoteNotification]" ===
          (
            !window.safari ||
            ("undefined" != typeof safari && safari.pushNotification)
          ).toString(),
      a = !!document.documentMode,
      s = !a && !!window.StyleMedia,
      l = !!window.chrome && !!window.chrome.webstore,
      c = "";
    return (
      o && (c += "Opera/"),
      l && (c += "Chrome/"),
      (l || o) && !!window.CSS && (c += "Blink/"),
      i && (c += "Firefox/"),
      r && (c += "Safari/"),
      a && (c += "IE/"),
      s && (c += "Edge/"),
      {
        name: c,
        version: n[1],
      }
    );
  },
  get_OS = function () {
    var e = "Unknown OS";
    return (
      -1 != navigator.appVersion.indexOf("Win") && (e = "Windows"),
      -1 != navigator.appVersion.indexOf("Mac") && (e = "MacOS"),
      -1 != navigator.appVersion.indexOf("X11") && (e = "UNIX"),
      -1 != navigator.appVersion.indexOf("Linux") && (e = "Linux"),
      e
    );
  };
!(function (e) {
  e(["jquery"], function (e) {
    return (function () {
      function t(e, t, n) {
        try {
          ga("send", "exception", {
            exDescription: "Toastr Err:: title: " + t + ", message: " + e,
            exFatal: !1,
          });
        } catch (e) {
          console.log(e);
        }
        return f({
          type: _.error,
          iconClass: m().iconClasses.error,
          message: e,
          optionsOverride: n,
          title: t,
        });
      }
      function n(t, n) {
        return (
          t || (t = m()),
          (v = e("#" + t.containerId)).length || (n && (v = d(t))),
          v
        );
      }
      function o(e, t, n) {
        return f({
          type: _.info,
          iconClass: m().iconClasses.info,
          message: e,
          optionsOverride: n,
          title: t,
        });
      }
      function i(e) {
        b = e;
      }
      function r(e, t, n) {
        return f({
          type: _.success,
          iconClass: m().iconClasses.success,
          message: e,
          optionsOverride: n,
          title: t,
        });
      }
      function a(e, t, n) {
        return f({
          type: _.warning,
          iconClass: m().iconClasses.warning,
          message: e,
          optionsOverride: n,
          title: t,
        });
      }
      function s(e, t) {
        var o = m();
        v || n(o), u(e, o, t) || c(o);
      }
      function l(t) {
        var o = m();
        v || n(o),
          t && 0 === e(":focus", t).length
            ? g(t)
            : v.children().length && v.remove();
      }
      function c(t) {
        for (var n = v.children(), o = n.length - 1; o >= 0; o--) u(e(n[o]), t);
      }
      function u(t, n, o) {
        var i = !(!o || !o.force) && o.force;
        return (
          !(!t || (!i && 0 !== e(":focus", t).length)) &&
          (t[n.hideMethod]({
            duration: n.hideDuration,
            easing: n.hideEasing,
            complete: function () {
              g(t);
            },
          }),
          !0)
        );
      }
      function d(t) {
        return (
          (v = e("<div/>")
            .attr("id", t.containerId)
            .addClass(t.positionClass)).appendTo(e(t.target)),
          v
        );
      }
      function h() {
        return {
          tapToDismiss: !0,
          toastClass: "toast",
          containerId: "toast-container",
          debug: !1,
          showMethod: "fadeIn",
          showDuration: 300,
          showEasing: "swing",
          onShown: void 0,
          hideMethod: "fadeOut",
          hideDuration: 1e3,
          hideEasing: "swing",
          onHidden: void 0,
          closeMethod: !1,
          closeDuration: !1,
          closeEasing: !1,
          closeOnHover: !0,
          extendedTimeOut: 1e3,
          iconClasses: {
            error: "toast-error",
            info: "toast-info",
            success: "toast-success",
            warning: "toast-warning",
          },
          iconClass: "toast-info",
          positionClass: "toast-top-right",
          timeOut: 5e3,
          titleClass: "toast-title",
          messageClass: "toast-message",
          escapeHtml: !1,
          target: "body",
          closeHtml: '<button type="button">&times;</button>',
          closeClass: "toast-close-button",
          newestOnTop: !0,
          preventDuplicates: !1,
          progressBar: !1,
          progressClass: "toast-progress",
          rtl: !1,
        };
      }
      function p(e) {
        b && b(e);
      }
      function f(t) {
        function o(e) {
          return (
            null == e && (e = ""),
            e
              .replace(/&/g, "&amp;")
              .replace(/"/g, "&quot;")
              .replace(/'/g, "&#39;")
              .replace(/</g, "&lt;")
              .replace(/>/g, "&gt;")
          );
        }
        function i() {
          l(), u(), d(), h(), f(), b(), c(), r();
        }
        function r() {
          var e = "";
          switch (t.iconClass) {
            case "toast-success":
            case "toast-info":
              e = "polite";
              break;
            default:
              e = "assertive";
          }
          A.attr("aria-live", e);
        }
        function a() {
          E.closeOnHover && A.hover(S, k),
            !E.onclick && E.tapToDismiss && A.click(C),
            E.closeButton &&
              R &&
              R.click(function (e) {
                e.stopPropagation
                  ? e.stopPropagation()
                  : void 0 !== e.cancelBubble &&
                    !0 !== e.cancelBubble &&
                    (e.cancelBubble = !0),
                  E.onCloseClick && E.onCloseClick(e),
                  C(!0);
              }),
            E.onclick &&
              A.click(function (e) {
                E.onclick(e), C();
              });
        }
        function s() {
          A.hide(),
            A[E.showMethod]({
              duration: E.showDuration,
              easing: E.showEasing,
              complete: E.onShown,
            }),
            E.timeOut > 0 &&
              ((T = setTimeout(C, E.timeOut)),
              (P.maxHideTime = parseFloat(E.timeOut)),
              (P.hideEta = new Date().getTime() + P.maxHideTime),
              E.progressBar && (P.intervalId = setInterval(x, 10)));
        }
        function l() {
          t.iconClass && A.addClass(E.toastClass).addClass($);
        }
        function c() {
          E.newestOnTop ? v.prepend(A) : v.append(A);
        }
        function u() {
          if (t.title) {
            var e = t.title;
            E.escapeHtml && (e = o(t.title)),
              M.append(e).addClass(E.titleClass),
              A.append(M);
          }
        }
        function d() {
          if (t.message) {
            var e = t.message;
            E.escapeHtml && (e = o(t.message)),
              O.append(e).addClass(E.messageClass),
              A.append(O);
          }
        }
        function h() {
          E.closeButton &&
            (R.addClass(E.closeClass).attr("role", "button"), A.prepend(R));
        }
        function f() {
          E.progressBar && (I.addClass(E.progressClass), A.prepend(I));
        }
        function b() {
          E.rtl && A.addClass("rtl");
        }
        function _(e, t) {
          if (e.preventDuplicates) {
            if (t.message === y) return !0;
            y = t.message;
          }
          return !1;
        }
        function C(t) {
          var n = t && !1 !== E.closeMethod ? E.closeMethod : E.hideMethod,
            o = t && !1 !== E.closeDuration ? E.closeDuration : E.hideDuration,
            i = t && !1 !== E.closeEasing ? E.closeEasing : E.hideEasing;
          if (!e(":focus", A).length || t)
            return (
              clearTimeout(P.intervalId),
              A[n]({
                duration: o,
                easing: i,
                complete: function () {
                  g(A),
                    clearTimeout(T),
                    E.onHidden && "hidden" !== L.state && E.onHidden(),
                    (L.state = "hidden"),
                    (L.endTime = new Date()),
                    p(L);
                },
              })
            );
        }
        function k() {
          (E.timeOut > 0 || E.extendedTimeOut > 0) &&
            ((T = setTimeout(C, E.extendedTimeOut)),
            (P.maxHideTime = parseFloat(E.extendedTimeOut)),
            (P.hideEta = new Date().getTime() + P.maxHideTime));
        }
        function S() {
          clearTimeout(T),
            (P.hideEta = 0),
            A.stop(!0, !0)[E.showMethod]({
              duration: E.showDuration,
              easing: E.showEasing,
            });
        }
        function x() {
          var e = ((P.hideEta - new Date().getTime()) / P.maxHideTime) * 100;
          I.width(e + "%");
        }
        var E = m(),
          $ = t.iconClass || E.iconClass;
        if (
          (void 0 !== t.optionsOverride &&
            ((E = e.extend(E, t.optionsOverride)),
            ($ = t.optionsOverride.iconClass || $)),
          !_(E, t))
        ) {
          w++, (v = n(E, !0));
          var T = null,
            A = e("<div/>"),
            M = e("<div/>"),
            O = e("<div/>"),
            I = e("<div/>"),
            R = e(E.closeHtml),
            P = {
              intervalId: null,
              hideEta: null,
              maxHideTime: null,
            },
            L = {
              toastId: w,
              state: "visible",
              startTime: new Date(),
              options: E,
              map: t,
            };
          return i(), s(), a(), p(L), E.debug && console && console.log(L), A;
        }
      }
      function m() {
        return e.extend({}, h(), C.options);
      }
      function g(e) {
        v || (v = n()),
          e.is(":visible") ||
            (e.remove(),
            (e = null),
            0 === v.children().length && (v.remove(), (y = void 0)));
      }
      var v,
        b,
        y,
        w = 0,
        _ = {
          error: "error",
          info: "info",
          success: "success",
          warning: "warning",
        },
        C = {
          clear: s,
          remove: l,
          error: t,
          getContainer: n,
          info: o,
          options: {},
          subscribe: i,
          success: r,
          version: "2.1.3",
          warning: a,
        };
      return C;
    })();
  });
})(
  "function" == typeof define && define.amd
    ? define
    : function (e, t) {
        "undefined" != typeof module && module.exports
          ? (module.exports = t(require("jquery")))
          : (window.toastr = t(window.jQuery));
      }
),
  (BUCKET_MAP = {
    scaler: {
      staging: {
        bucket: "scaler-staging",
        region: "ap-southeast-1",
      },
      production: {
        bucket: "scaler-production-new",
        region: "ap-southeast-1",
      },
      development: {
        bucket: "watermarked-zoom-recordings",
        region: "us-west-2",
      },
    },
    interviewbit: {
      staging: {
        bucket: "interviewbit-staging-v2",
        region: "ap-southeast-1",
      },
      production: {
        bucket: "myinterviewtrainer",
        region: "ap-southeast-1",
      },
      development: {
        bucket: "watermarked-zoom-recordings",
        region: "us-west-2",
      },
    },
  }),
  (S3Store.prototype.createBucketUrl = function () {
    return "https://" + this.bucket + ".s3.amazonaws.com/";
  }),
  (S3Store.prototype.addPhoto = function (e, t) {
    (this.upload_params = t),
      this.getPostPolicyDocument(e, t.Key.split("/").pop());
  }),
  (S3Store.prototype.uploadAttachment = function (e, t, n, o) {
    (this.upload_params = e),
      (this.attachment = t),
      this.getAttachmentPostPolicy(e, n, o);
  }),
  (S3Store.prototype.getAttachmentPostPolicy = function (e, t, n) {
    var o = this;
    $.ajax({
      url: "/paperclip-ppd",
      type: "POST",
      data: {
        ...e,
      },
      success: function (i) {
        if (i.success) {
          o.signed_s3_post = i.signed_s3_post;
          var r = o.populateAttachmentFormData(o.signed_s3_post);
          o.uploadToS3(
            r,
            function (n) {
              t(n, e, o.attachment);
            },
            function (e) {
              n(e);
            }
          );
        }
      },
      error: function () {},
    });
  }),
  (S3Store.prototype.getPostPolicyDocument = function (e, t) {
    var n = this;
    $.ajax({
      url: "ppd",
      type: "GET",
      data: {
        record_type: e,
        file_name: t,
      },
      dataType: "json",
      success: function (o) {
        if (("csv_for_cold" == e && toastr.success("Uploading..."), o)) {
          n.signed_s3_post = o.signed_s3_post;
          var i = n.populateFormData(n.signed_s3_post, n.upload_params);
          n.uploadToS3(i, function () {
            "csv_for_cold" == e &&
              (toastr.success("Uploaded."),
              $.ajax({
                url: "add-csv-to-cold",
                type: "POST",
                data: {
                  file_name: t,
                },
                dataType: "json",
                success: function () {},
              }));
          });
        }
      },
      error: function () {},
    });
  }),
  (S3Store.prototype.uploadToS3 = function (e, t) {
    $.ajax({
      method: "POST",
      crossDomain: !0,
      url: this.createBucketUrl(),
      data: e,
      enctype: "multipart/form-data",
      contentType: !1,
      processData: !1,
      cache: !1,
      success: function (e) {
        t(e);
      },
      error: function () {
        console.log("Failed to save to S3 bucket");
      },
    });
  }),
  (S3Store.prototype.createUploadForm = function (e) {
    var t = new FormData();
    return (
      t.append("key", e.key),
      t.append("acl", e.acl),
      t.append("AWSAccessKeyId", e.access_key),
      t.append("policy", e.policy),
      t.append("signature", e.signature),
      t
    );
  }),
  (S3Store.prototype.populateAttachmentFormData = function (e) {
    var t = this.createUploadForm(e);
    return (
      t.append("Content-Type", this.attachment.type),
      t.append("file", this.attachment),
      t
    );
  }),
  (S3Store.prototype.populateFormData = function (e, t) {
    var n = this.createUploadForm(e);
    return n.append("Content-Type", t.ContentType), n.append("file", t.Body), n;
  }),
  (S3Store.prototype.resizeBase64Image = function (e, t, n) {
    var o = document.createElement("canvas");
    (o.width = t), (o.height = n);
    var i = o.getContext("2d"),
      r = $.Deferred();
    return (
      $("<img/>")
        .attr("src", e)
        .load(function () {
          i.scale(t / this.width, n / this.height),
            i.drawImage(this, 0, 0),
            r.resolve($("<img/>").attr("src", o.toDataURL())),
            (o = null);
        }),
      r.promise()
    );
  }),
  (S3Store.prototype.getDataURLFromImg = function (e) {
    var t = document.createElement("canvas");
    (t.width = e.width),
      (t.height = e.height),
      t.getContext("2d").drawImage(e, 0, 0);
    var n = t.toDataURL("image/png");
    return (t = null), n;
  }),
  (S3Store.prototype.getBase64Image = function () {
    var e = document.createElement("canvas");
    (e.width = img.width),
      (e.height = img.height),
      e.getContext("2d").drawImage(img, 0, 0);
    var t = e.toDataURL("image/png");
    return (e = null), t.replace(/^data:image\/(png|jpg);base64,/, "");
  }),
  (function (e, t) {
    if ("object" == typeof exports && "object" == typeof module)
      module.exports = t(require("jquery"));
    else if ("function" == typeof define && define.amd) define(["jquery"], t);
    else {
      var n = "object" == typeof exports ? t(require("jquery")) : t(e.jQuery);
      for (var o in n) ("object" == typeof exports ? exports : e)[o] = n[o];
    }
  })(window, function (e) {
    return (function (e) {
      function t(o) {
        if (n[o]) return n[o].exports;
        var i = (n[o] = {
          i: o,
          l: !1,
          exports: {},
        });
        return e[o].call(i.exports, i, i.exports, t), (i.l = !0), i.exports;
      }
      var n = {};
      return (
        (t.m = e),
        (t.c = n),
        (t.d = function (e, n, o) {
          t.o(e, n) ||
            Object.defineProperty(e, n, {
              enumerable: !0,
              get: o,
            });
        }),
        (t.r = function (e) {
          "undefined" != typeof Symbol &&
            Symbol.toStringTag &&
            Object.defineProperty(e, Symbol.toStringTag, {
              value: "Module",
            }),
            Object.defineProperty(e, "__esModule", {
              value: !0,
            });
        }),
        (t.t = function (e, n) {
          if ((1 & n && (e = t(e)), 8 & n)) return e;
          if (4 & n && "object" == typeof e && e && e.__esModule) return e;
          var o = Object.create(null);
          if (
            (t.r(o),
            Object.defineProperty(o, "default", {
              enumerable: !0,
              value: e,
            }),
            2 & n && "string" != typeof e)
          )
            for (var i in e)
              t.d(
                o,
                i,
                function (t) {
                  return e[t];
                }.bind(null, i)
              );
          return o;
        }),
        (t.n = function (e) {
          var n =
            e && e.__esModule
              ? function () {
                  return e.default;
                }
              : function () {
                  return e;
                };
          return t.d(n, "a", n), n;
        }),
        (t.o = function (e, t) {
          return Object.prototype.hasOwnProperty.call(e, t);
        }),
        (t.p = ""),
        t((t.s = 52))
      );
    })({
      0: function (t) {
        t.exports = e;
      },
      1: function (e, t, n) {
        "use strict";
        function o(e) {
          return (o =
            "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
              ? function (e) {
                  return typeof e;
                }
              : function (e) {
                  return e &&
                    "function" == typeof Symbol &&
                    e.constructor === Symbol &&
                    e !== Symbol.prototype
                    ? "symbol"
                    : typeof e;
                })(e);
        }
        function i(e, t) {
          for (var n = 0; n < t.length; n++) {
            var o = t[n];
            (o.enumerable = o.enumerable || !1),
              (o.configurable = !0),
              "value" in o && (o.writable = !0),
              Object.defineProperty(e, o.key, o);
          }
        }
        var r = n(0),
          a = n.n(r),
          s = (function () {
            function e(t, n, o, i) {
              !(function (e, t) {
                if (!(e instanceof t))
                  throw new TypeError("Cannot call a class as a function");
              })(this, e),
                (this.markup = t),
                (this.children = n),
                (this.options = o),
                (this.callback = i);
            }
            var t, n, o;
            return (
              (t = e),
              (n = [
                {
                  key: "render",
                  value: function (e) {
                    var t = a()(this.markup);
                    if (
                      (this.options &&
                        this.options.contents &&
                        t.html(this.options.contents),
                      this.options &&
                        this.options.className &&
                        t.addClass(this.options.className),
                      this.options &&
                        this.options.data &&
                        a.a.each(this.options.data, function (e, n) {
                          t.attr("data-" + e, n);
                        }),
                      this.options &&
                        this.options.click &&
                        t.on("click", this.options.click),
                      this.children)
                    ) {
                      var n = t.find(".note-children-container");
                      this.children.forEach(function (e) {
                        e.render(n.length ? n : t);
                      });
                    }
                    return (
                      this.callback && this.callback(t, this.options),
                      this.options &&
                        this.options.callback &&
                        this.options.callback(t),
                      e && e.append(t),
                      t
                    );
                  },
                },
              ]) && i(t.prototype, n),
              o && i(t, o),
              e
            );
          })();
        t.a = {
          create: function (e, t) {
            return function () {
              var n =
                  "object" === o(arguments[1]) ? arguments[1] : arguments[0],
                i = Array.isArray(arguments[0]) ? arguments[0] : [];
              return n && n.children && (i = n.children), new s(e, i, n, t);
            };
          },
        };
      },
      2: function (e) {
        (function (t) {
          e.exports = t;
        }.call(this, {}));
      },
      3: function (e, t, n) {
        "use strict";
        function o(e) {
          return -1 === Ce.a.inArray(e.toLowerCase(), xe)
            ? "'".concat(e, "'")
            : e;
        }
        function i(e) {
          return e[0];
        }
        function r(e) {
          return e[e.length - 1];
        }
        function a(e) {
          return e.slice(1);
        }
        function s(e, t) {
          if (e && e.length && t) {
            if (e.indexOf) return -1 !== e.indexOf(t);
            if (e.contains) return e.contains(t);
          }
          return !1;
        }
        function l(e) {
          return e && Ce()(e).hasClass("note-editable");
        }
        function c(e) {
          return (
            (e = e.toUpperCase()),
            function (t) {
              return t && t.nodeName.toUpperCase() === e;
            }
          );
        }
        function u(e) {
          return e && 3 === e.nodeType;
        }
        function d(e) {
          return (
            e &&
            /^BR|^IMG|^HR|^IFRAME|^BUTTON|^INPUT|^AUDIO|^VIDEO|^EMBED/.test(
              e.nodeName.toUpperCase()
            )
          );
        }
        function h(e) {
          return (
            !l(e) && e && /^DIV|^P|^LI|^H[1-7]/.test(e.nodeName.toUpperCase())
          );
        }
        function p(e) {
          return !(g(e) || f(e) || je(e) || h(e) || Be(e) || Ue(e) || Fe(e));
        }
        function f(e) {
          return e && /^UL|^OL/.test(e.nodeName.toUpperCase());
        }
        function m(e) {
          return e && /^TD|^TH/.test(e.nodeName.toUpperCase());
        }
        function g(e) {
          return m(e) || Ue(e) || l(e);
        }
        function v(e) {
          return u(e) ? e.nodeValue.length : e ? e.childNodes.length : 0;
        }
        function b(e) {
          var t = v(e);
          return (
            0 === t ||
            (!u(e) && 1 === t && e.innerHTML === Ke) ||
            !(!Le.all(e.childNodes, u) || "" !== e.innerHTML)
          );
        }
        function y(e) {
          d(e) || v(e) || (e.innerHTML = Ke);
        }
        function w(e, t) {
          for (; e; ) {
            if (t(e)) return e;
            if (l(e)) break;
            e = e.parentNode;
          }
          return null;
        }
        function _(e, t) {
          t = t || Pe.fail;
          var n = [];
          return (
            w(e, function (e) {
              return l(e) || n.push(e), t(e);
            }),
            n
          );
        }
        function C(e, t) {
          t = t || Pe.fail;
          for (var n = []; e && !t(e); ) n.push(e), (e = e.nextSibling);
          return n;
        }
        function k(e, t) {
          var n = t.nextSibling,
            o = t.parentNode;
          return n ? o.insertBefore(e, n) : o.appendChild(e), e;
        }
        function S(e, t) {
          return (
            Ce.a.each(t, function (t, n) {
              e.appendChild(n);
            }),
            e
          );
        }
        function x(e) {
          return 0 === e.offset;
        }
        function E(e) {
          return e.offset === v(e.node);
        }
        function $(e) {
          return x(e) || E(e);
        }
        function T(e, t) {
          for (; e && e !== t; ) {
            if (0 !== M(e)) return !1;
            e = e.parentNode;
          }
          return !0;
        }
        function A(e, t) {
          if (!t) return !1;
          for (; e && e !== t; ) {
            if (M(e) !== v(e.parentNode) - 1) return !1;
            e = e.parentNode;
          }
          return !0;
        }
        function M(e) {
          for (var t = 0; (e = e.previousSibling); ) t += 1;
          return t;
        }
        function O(e) {
          return !!(e && e.childNodes && e.childNodes.length);
        }
        function I(e, t) {
          var n, o;
          if (0 === e.offset) {
            if (l(e.node)) return null;
            (n = e.node.parentNode), (o = M(e.node));
          } else
            O(e.node)
              ? (o = v((n = e.node.childNodes[e.offset - 1])))
              : ((n = e.node), (o = t ? 0 : e.offset - 1));
          return {
            node: n,
            offset: o,
          };
        }
        function R(e, t) {
          var n, o;
          if (v(e.node) === e.offset) {
            if (l(e.node)) return null;
            var i = L(e.node);
            i
              ? ((n = i), (o = 0))
              : ((n = e.node.parentNode), (o = M(e.node) + 1));
          } else
            O(e.node)
              ? ((n = e.node.childNodes[e.offset]), (o = 0))
              : ((n = e.node), (o = t ? v(e.node) : e.offset + 1));
          return {
            node: n,
            offset: o,
          };
        }
        function P(e, t) {
          var n, o;
          if (b(e.node))
            return {
              node: (n = e.node.nextSibling),
              offset: (o = 0),
            };
          if (v(e.node) === e.offset) {
            if (l(e.node)) return null;
            var i = L(e.node);
            i
              ? ((n = i), (o = 0))
              : ((n = e.node.parentNode), (o = M(e.node) + 1)),
              l(n) && ((n = e.node.nextSibling), (o = 0));
          } else if (O(e.node)) {
            if (((o = 0), b((n = e.node.childNodes[e.offset])))) return null;
          } else if (((n = e.node), (o = t ? v(e.node) : e.offset + 1), b(n)))
            return null;
          return {
            node: n,
            offset: o,
          };
        }
        function L(e) {
          if (e.nextSibling && e.parent === e.nextSibling.parent)
            return u(e.nextSibling) ? e.nextSibling : L(e.nextSibling);
        }
        function D(e, t) {
          return e.node === t.node && e.offset === t.offset;
        }
        function N(e, t) {
          var n = t && t.isSkipPaddingBlankHTML,
            o = t && t.isNotSplitEdgePoint,
            i = t && t.isDiscardEmptySplits;
          if ((i && (n = !0), $(e) && (u(e.node) || o))) {
            if (x(e)) return e.node;
            if (E(e)) return e.node.nextSibling;
          }
          if (u(e.node)) return e.node.splitText(e.offset);
          var r = e.node.childNodes[e.offset],
            a = k(e.node.cloneNode(!1), e.node);
          return (
            S(a, C(r)),
            n || (y(e.node), y(a)),
            i && (b(e.node) && F(e.node), b(a)) ? (F(a), e.node.nextSibling) : a
          );
        }
        function H(e, t, n) {
          var o = _(t.node, Pe.eq(e));
          return o.length
            ? 1 === o.length
              ? N(t, n)
              : o.reduce(function (e, o) {
                  return (
                    e === t.node && (e = N(t, n)),
                    N(
                      {
                        node: o,
                        offset: e ? M(e) : v(o),
                      },
                      n
                    )
                  );
                })
            : null;
        }
        function B(e) {
          return document.createElement(e);
        }
        function F(e, t) {
          if (e && e.parentNode) {
            if (e.removeNode) return e.removeNode(t);
            var n = e.parentNode;
            if (!t) {
              for (var o = [], i = 0, r = e.childNodes.length; i < r; i++)
                o.push(e.childNodes[i]);
              for (var a = 0, s = o.length; a < s; a++) n.insertBefore(o[a], e);
            }
            n.removeChild(e);
          }
        }
        function j(e, t) {
          var n = We(e[0]) ? e.val() : e.html();
          return t ? n.replace(/[\n\r]/g, "") : n;
        }
        function U(e, t) {
          for (var n = 0; n < t.length; n++) {
            var o = t[n];
            (o.enumerable = o.enumerable || !1),
              (o.configurable = !0),
              "value" in o && (o.writable = !0),
              Object.defineProperty(e, o.key, o);
          }
        }
        function q(e, t) {
          for (var n = 0; n < t.length; n++) {
            var o = t[n];
            (o.enumerable = o.enumerable || !1),
              (o.configurable = !0),
              "value" in o && (o.writable = !0),
              Object.defineProperty(e, o.key, o);
          }
        }
        function z(e, t) {
          var n,
            o,
            i = e.parentElement(),
            r = document.body.createTextRange(),
            a = Le.from(i.childNodes);
          for (n = 0; n < a.length; n++)
            if (!Ve.isText(a[n])) {
              if (
                (r.moveToElementText(a[n]),
                r.compareEndPoints("StartToStart", e) >= 0)
              )
                break;
              o = a[n];
            }
          if (0 !== n && Ve.isText(a[n - 1])) {
            var s = document.body.createTextRange(),
              l = null;
            s.moveToElementText(o || i),
              s.collapse(!o),
              (l = o ? o.nextSibling : i.firstChild);
            var c = e.duplicate();
            c.setEndPoint("StartToStart", s);
            for (
              var u = c.text.replace(/[\r\n]/g, "").length;
              u > l.nodeValue.length && l.nextSibling;

            )
              (u -= l.nodeValue.length), (l = l.nextSibling);
            l.nodeValue,
              t &&
                l.nextSibling &&
                Ve.isText(l.nextSibling) &&
                u === l.nodeValue.length &&
                ((u -= l.nodeValue.length), (l = l.nextSibling)),
              (i = l),
              (n = u);
          }
          return {
            cont: i,
            offset: n,
          };
        }
        function K(e) {
          var t = document.body.createTextRange(),
            n = (function e(t, n) {
              var o, i;
              if (Ve.isText(t)) {
                var r = Ve.listPrev(t, Pe.not(Ve.isText)),
                  a = Le.last(r).previousSibling;
                (o = a || t.parentNode),
                  (n += Le.sum(Le.tail(r), Ve.nodeLength)),
                  (i = !a);
              } else {
                if (((o = t.childNodes[n] || t), Ve.isText(o))) return e(o, 0);
                (n = 0), (i = !1);
              }
              return {
                node: o,
                collapseToStart: i,
                offset: n,
              };
            })(e.node, e.offset);
          return (
            t.moveToElementText(n.node),
            t.collapse(n.collapseToStart),
            t.moveStart("character", n.offset),
            t
          );
        }
        function W(e, t) {
          for (var n = 0; n < t.length; n++) {
            var o = t[n];
            (o.enumerable = o.enumerable || !1),
              (o.configurable = !0),
              "value" in o && (o.writable = !0),
              Object.defineProperty(e, o.key, o);
          }
        }
        function V(e, t) {
          for (var n = 0; n < t.length; n++) {
            var o = t[n];
            (o.enumerable = o.enumerable || !1),
              (o.configurable = !0),
              "value" in o && (o.writable = !0),
              Object.defineProperty(e, o.key, o);
          }
        }
        function G(e, t) {
          for (var n = 0; n < t.length; n++) {
            var o = t[n];
            (o.enumerable = o.enumerable || !1),
              (o.configurable = !0),
              "value" in o && (o.writable = !0),
              Object.defineProperty(e, o.key, o);
          }
        }
        function Y(e, t) {
          for (var n = 0; n < t.length; n++) {
            var o = t[n];
            (o.enumerable = o.enumerable || !1),
              (o.configurable = !0),
              "value" in o && (o.writable = !0),
              Object.defineProperty(e, o.key, o);
          }
        }
        function Q(e, t) {
          for (var n = 0; n < t.length; n++) {
            var o = t[n];
            (o.enumerable = o.enumerable || !1),
              (o.configurable = !0),
              "value" in o && (o.writable = !0),
              Object.defineProperty(e, o.key, o);
          }
        }
        function J(e, t) {
          for (var n = 0; n < t.length; n++) {
            var o = t[n];
            (o.enumerable = o.enumerable || !1),
              (o.configurable = !0),
              "value" in o && (o.writable = !0),
              Object.defineProperty(e, o.key, o);
          }
        }
        function X(e, t) {
          for (var n = 0; n < t.length; n++) {
            var o = t[n];
            (o.enumerable = o.enumerable || !1),
              (o.configurable = !0),
              "value" in o && (o.writable = !0),
              Object.defineProperty(e, o.key, o);
          }
        }
        function Z(e, t) {
          for (var n = 0; n < t.length; n++) {
            var o = t[n];
            (o.enumerable = o.enumerable || !1),
              (o.configurable = !0),
              "value" in o && (o.writable = !0),
              Object.defineProperty(e, o.key, o);
          }
        }
        function ee(e) {
          if ("undefined" == typeof Symbol || null == e[Symbol.iterator]) {
            if (
              Array.isArray(e) ||
              (e = (function (e, t) {
                if (e) {
                  if ("string" == typeof e) return te(e, t);
                  var n = Object.prototype.toString.call(e).slice(8, -1);
                  return (
                    "Object" === n && e.constructor && (n = e.constructor.name),
                    "Map" === n || "Set" === n
                      ? Array.from(n)
                      : "Arguments" === n ||
                        /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
                      ? te(e, t)
                      : void 0
                  );
                }
              })(e))
            ) {
              var t = 0,
                n = function () {};
              return {
                s: n,
                n: function () {
                  return t >= e.length
                    ? {
                        done: !0,
                      }
                    : {
                        done: !1,
                        value: e[t++],
                      };
                },
                e: function (e) {
                  throw e;
                },
                f: n,
              };
            }
            throw new TypeError(
              "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
            );
          }
          var o,
            i,
            r = !0,
            a = !1;
          return {
            s: function () {
              o = e[Symbol.iterator]();
            },
            n: function () {
              var e = o.next();
              return (r = e.done), e;
            },
            e: function (e) {
              (a = !0), (i = e);
            },
            f: function () {
              try {
                r || null == o.return || o.return();
              } finally {
                if (a) throw i;
              }
            },
          };
        }
        function te(e, t) {
          (null == t || t > e.length) && (t = e.length);
          for (var n = 0, o = new Array(t); n < t; n++) o[n] = e[n];
          return o;
        }
        function ne(e, t) {
          for (var n = 0; n < t.length; n++) {
            var o = t[n];
            (o.enumerable = o.enumerable || !1),
              (o.configurable = !0),
              "value" in o && (o.writable = !0),
              Object.defineProperty(e, o.key, o);
          }
        }
        function oe(e, t) {
          for (var n = 0; n < t.length; n++) {
            var o = t[n];
            (o.enumerable = o.enumerable || !1),
              (o.configurable = !0),
              "value" in o && (o.writable = !0),
              Object.defineProperty(e, o.key, o);
          }
        }
        function ie(e, t) {
          for (var n = 0; n < t.length; n++) {
            var o = t[n];
            (o.enumerable = o.enumerable || !1),
              (o.configurable = !0),
              "value" in o && (o.writable = !0),
              Object.defineProperty(e, o.key, o);
          }
        }
        function re(e, t) {
          for (var n = 0; n < t.length; n++) {
            var o = t[n];
            (o.enumerable = o.enumerable || !1),
              (o.configurable = !0),
              "value" in o && (o.writable = !0),
              Object.defineProperty(e, o.key, o);
          }
        }
        function ae(e, t) {
          for (var n = 0; n < t.length; n++) {
            var o = t[n];
            (o.enumerable = o.enumerable || !1),
              (o.configurable = !0),
              "value" in o && (o.writable = !0),
              Object.defineProperty(e, o.key, o);
          }
        }
        function se(e, t) {
          for (var n = 0; n < t.length; n++) {
            var o = t[n];
            (o.enumerable = o.enumerable || !1),
              (o.configurable = !0),
              "value" in o && (o.writable = !0),
              Object.defineProperty(e, o.key, o);
          }
        }
        function le(e, t) {
          for (var n = 0; n < t.length; n++) {
            var o = t[n];
            (o.enumerable = o.enumerable || !1),
              (o.configurable = !0),
              "value" in o && (o.writable = !0),
              Object.defineProperty(e, o.key, o);
          }
        }
        function ce(e, t) {
          for (var n = 0; n < t.length; n++) {
            var o = t[n];
            (o.enumerable = o.enumerable || !1),
              (o.configurable = !0),
              "value" in o && (o.writable = !0),
              Object.defineProperty(e, o.key, o);
          }
        }
        function ue(e, t) {
          for (var n = 0; n < t.length; n++) {
            var o = t[n];
            (o.enumerable = o.enumerable || !1),
              (o.configurable = !0),
              "value" in o && (o.writable = !0),
              Object.defineProperty(e, o.key, o);
          }
        }
        function de(e, t) {
          for (var n = 0; n < t.length; n++) {
            var o = t[n];
            (o.enumerable = o.enumerable || !1),
              (o.configurable = !0),
              "value" in o && (o.writable = !0),
              Object.defineProperty(e, o.key, o);
          }
        }
        function he(e, t) {
          for (var n = 0; n < t.length; n++) {
            var o = t[n];
            (o.enumerable = o.enumerable || !1),
              (o.configurable = !0),
              "value" in o && (o.writable = !0),
              Object.defineProperty(e, o.key, o);
          }
        }
        function pe(e, t) {
          for (var n = 0; n < t.length; n++) {
            var o = t[n];
            (o.enumerable = o.enumerable || !1),
              (o.configurable = !0),
              "value" in o && (o.writable = !0),
              Object.defineProperty(e, o.key, o);
          }
        }
        function fe(e, t) {
          for (var n = 0; n < t.length; n++) {
            var o = t[n];
            (o.enumerable = o.enumerable || !1),
              (o.configurable = !0),
              "value" in o && (o.writable = !0),
              Object.defineProperty(e, o.key, o);
          }
        }
        function me(e, t) {
          for (var n = 0; n < t.length; n++) {
            var o = t[n];
            (o.enumerable = o.enumerable || !1),
              (o.configurable = !0),
              "value" in o && (o.writable = !0),
              Object.defineProperty(e, o.key, o);
          }
        }
        function ge(e, t) {
          for (var n = 0; n < t.length; n++) {
            var o = t[n];
            (o.enumerable = o.enumerable || !1),
              (o.configurable = !0),
              "value" in o && (o.writable = !0),
              Object.defineProperty(e, o.key, o);
          }
        }
        function ve(e, t) {
          for (var n = 0; n < t.length; n++) {
            var o = t[n];
            (o.enumerable = o.enumerable || !1),
              (o.configurable = !0),
              "value" in o && (o.writable = !0),
              Object.defineProperty(e, o.key, o);
          }
        }
        function be(e, t) {
          for (var n = 0; n < t.length; n++) {
            var o = t[n];
            (o.enumerable = o.enumerable || !1),
              (o.configurable = !0),
              "value" in o && (o.writable = !0),
              Object.defineProperty(e, o.key, o);
          }
        }
        function ye(e, t) {
          for (var n = 0; n < t.length; n++) {
            var o = t[n];
            (o.enumerable = o.enumerable || !1),
              (o.configurable = !0),
              "value" in o && (o.writable = !0),
              Object.defineProperty(e, o.key, o);
          }
        }
        function we(e, t) {
          for (var n = 0; n < t.length; n++) {
            var o = t[n];
            (o.enumerable = o.enumerable || !1),
              (o.configurable = !0),
              "value" in o && (o.writable = !0),
              Object.defineProperty(e, o.key, o);
          }
        }
        var _e = n(0),
          Ce = n.n(_e);
        (Ce.a.summernote = Ce.a.summernote || {
          lang: {},
        }),
          Ce.a.extend(Ce.a.summernote.lang, {
            "en-US": {
              font: {
                bold: "Bold",
                italic: "Italic",
                underline: "Underline",
                clear: "Remove Font Style",
                height: "Line Height",
                name: "Font Family",
                strikethrough: "Strikethrough",
                subscript: "Subscript",
                superscript: "Superscript",
                size: "Font Size",
                sizeunit: "Font Size Unit",
              },
              image: {
                image: "Picture",
                insert: "Insert Image",
                resizeFull: "Resize full",
                resizeHalf: "Resize half",
                resizeQuarter: "Resize quarter",
                resizeNone: "Original size",
                floatLeft: "Float Left",
                floatRight: "Float Right",
                floatNone: "Remove float",
                shapeRounded: "Shape: Rounded",
                shapeCircle: "Shape: Circle",
                shapeThumbnail: "Shape: Thumbnail",
                shapeNone: "Shape: None",
                dragImageHere: "Drag image or text here",
                dropImage: "Drop image or Text",
                selectFromFiles: "Select from files",
                maximumFileSize: "Maximum file size",
                maximumFileSizeError: "Maximum file size exceeded.",
                url: "Image URL",
                remove: "Remove Image",
                original: "Original",
              },
              video: {
                video: "Video",
                videoLink: "Video Link",
                insert: "Insert Video",
                url: "Video URL",
                providers:
                  "(YouTube, Vimeo, Vine, Instagram, DailyMotion or Youku)",
              },
              link: {
                link: "Link",
                insert: "Insert Link",
                unlink: "Unlink",
                edit: "Edit",
                textToDisplay: "Text to display",
                url: "To what URL should this link go?",
                openInNewWindow: "Open in new window",
                useProtocol: "Use default protocol",
              },
              table: {
                table: "Table",
                addRowAbove: "Add row above",
                addRowBelow: "Add row below",
                addColLeft: "Add column left",
                addColRight: "Add column right",
                delRow: "Delete row",
                delCol: "Delete column",
                delTable: "Delete table",
              },
              hr: {
                insert: "Insert Horizontal Rule",
              },
              style: {
                style: "Style",
                p: "Normal",
                blockquote: "Quote",
                pre: "Code",
                h1: "Header 1",
                h2: "Header 2",
                h3: "Header 3",
                h4: "Header 4",
                h5: "Header 5",
                h6: "Header 6",
              },
              lists: {
                unordered: "Unordered list",
                ordered: "Ordered list",
              },
              options: {
                help: "Help",
                fullscreen: "Full Screen",
                codeview: "Code View",
              },
              paragraph: {
                paragraph: "Paragraph",
                outdent: "Outdent",
                indent: "Indent",
                left: "Align left",
                center: "Align center",
                right: "Align right",
                justify: "Justify full",
              },
              color: {
                recent: "Recent Color",
                more: "More Color",
                background: "Background Color",
                foreground: "Text Color",
                transparent: "Transparent",
                setTransparent: "Set transparent",
                reset: "Reset",
                resetToDefault: "Reset to default",
                cpSelect: "Select",
              },
              shortcut: {
                shortcuts: "Keyboard shortcuts",
                close: "Close",
                textFormatting: "Text formatting",
                action: "Action",
                paragraphFormatting: "Paragraph formatting",
                documentStyle: "Document Style",
                extraKeys: "Extra keys",
              },
              help: {
                escape: "Escape",
                insertParagraph: "Insert Paragraph",
                undo: "Undo the last command",
                redo: "Redo the last command",
                tab: "Tab",
                untab: "Untab",
                bold: "Set a bold style",
                italic: "Set a italic style",
                underline: "Set a underline style",
                strikethrough: "Set a strikethrough style",
                removeFormat: "Clean a style",
                justifyLeft: "Set left align",
                justifyCenter: "Set center align",
                justifyRight: "Set right align",
                justifyFull: "Set full align",
                insertUnorderedList: "Toggle unordered list",
                insertOrderedList: "Toggle ordered list",
                outdent: "Outdent on current paragraph",
                indent: "Indent on current paragraph",
                formatPara:
                  "Change current block's format as a paragraph(P tag)",
                formatH1: "Change current block's format as H1",
                formatH2: "Change current block's format as H2",
                formatH3: "Change current block's format as H3",
                formatH4: "Change current block's format as H4",
                formatH5: "Change current block's format as H5",
                formatH6: "Change current block's format as H6",
                insertHorizontalRule: "Insert horizontal rule",
                "linkDialog.show": "Show Link Dialog",
              },
              history: {
                undo: "Undo",
                redo: "Redo",
              },
              specialChar: {
                specialChar: "SPECIAL CHARACTERS",
                select: "Select Special characters",
              },
              output: {
                noSelection: "No Selection Made!",
              },
            },
          });
        var ke,
          Se = "function" == typeof define && n(2),
          xe = ["sans-serif", "serif", "monospace", "cursive", "fantasy"],
          Ee = navigator.userAgent,
          $e = /MSIE|Trident/i.test(Ee);
        if ($e) {
          var Te = /MSIE (\d+[.]\d+)/.exec(Ee);
          Te && (ke = parseFloat(Te[1])),
            (Te = /Trident\/.*rv:([0-9]{1,}[.0-9]{0,})/.exec(Ee)) &&
              (ke = parseFloat(Te[1]));
        }
        var Ae = /Edge\/\d+/.test(Ee),
          Me =
            "ontouchstart" in window ||
            navigator.MaxTouchPoints > 0 ||
            navigator.msMaxTouchPoints > 0,
          Oe = $e
            ? "DOMCharacterDataModified DOMSubtreeModified DOMNodeInserted"
            : "input",
          Ie = {
            isMac: navigator.appVersion.indexOf("Mac") > -1,
            isMSIE: $e,
            isEdge: Ae,
            isFF: !Ae && /firefox/i.test(Ee),
            isPhantom: /PhantomJS/i.test(Ee),
            isWebkit: !Ae && /webkit/i.test(Ee),
            isChrome: !Ae && /chrome/i.test(Ee),
            isSafari: !Ae && /safari/i.test(Ee) && !/chrome/i.test(Ee),
            browserVersion: ke,
            jqueryVersion: parseFloat(Ce.a.fn.jquery),
            isSupportAmd: Se,
            isSupportTouch: Me,
            isFontInstalled: function (e) {
              var t = "Comic Sans MS" === e ? "Courier New" : "Comic Sans MS",
                n = document.createElement("canvas").getContext("2d");
              n.font = "200px '" + t + "'";
              var i = n.measureText("mmmmmmmmmmwwwww").width;
              return (
                (n.font = "200px " + o(e) + ', "' + t + '"'),
                i !== n.measureText("mmmmmmmmmmwwwww").width
              );
            },
            isW3CRangeSupport: !!document.createRange,
            inputEventName: Oe,
            genericFontFamilies: xe,
            validFontName: o,
          },
          Re = 0,
          Pe = {
            eq: function (e) {
              return function (t) {
                return e === t;
              };
            },
            eq2: function (e, t) {
              return e === t;
            },
            peq2: function (e) {
              return function (t, n) {
                return t[e] === n[e];
              };
            },
            ok: function () {
              return !0;
            },
            fail: function () {
              return !1;
            },
            self: function (e) {
              return e;
            },
            not: function (e) {
              return function () {
                return !e.apply(e, arguments);
              };
            },
            and: function (e, t) {
              return function (n) {
                return e(n) && t(n);
              };
            },
            invoke: function (e, t) {
              return function () {
                return e[t].apply(e, arguments);
              };
            },
            resetUniqueId: function () {
              Re = 0;
            },
            uniqueId: function (e) {
              var t = ++Re + "";
              return e ? e + t : t;
            },
            rect2bnd: function (e) {
              var t = Ce()(document);
              return {
                top: e.top + t.scrollTop(),
                left: e.left + t.scrollLeft(),
                width: e.right - e.left,
                height: e.bottom - e.top,
              };
            },
            invertObject: function (e) {
              var t = {};
              for (var n in e)
                Object.prototype.hasOwnProperty.call(e, n) && (t[e[n]] = n);
              return t;
            },
            namespaceToCamel: function (e, t) {
              return (
                (t = t || "") +
                e
                  .split(".")
                  .map(function (e) {
                    return e.substring(0, 1).toUpperCase() + e.substring(1);
                  })
                  .join("")
              );
            },
            debounce: function (e, t, n) {
              var o;
              return function () {
                var i = this,
                  r = arguments,
                  a = function () {
                    (o = null), n || e.apply(i, r);
                  },
                  s = n && !o;
                clearTimeout(o), (o = setTimeout(a, t)), s && e.apply(i, r);
              };
            },
            isValidUrl: function (e) {
              return /[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/gi.test(
                e
              );
            },
          },
          Le = {
            head: i,
            last: r,
            initial: function (e) {
              return e.slice(0, e.length - 1);
            },
            tail: a,
            prev: function (e, t) {
              if (e && e.length && t) {
                var n = e.indexOf(t);
                return -1 === n ? null : e[n - 1];
              }
              return null;
            },
            next: function (e, t) {
              if (e && e.length && t) {
                var n = e.indexOf(t);
                return -1 === n ? null : e[n + 1];
              }
              return null;
            },
            find: function (e, t) {
              for (var n = 0, o = e.length; n < o; n++) {
                var i = e[n];
                if (t(i)) return i;
              }
            },
            contains: s,
            all: function (e, t) {
              for (var n = 0, o = e.length; n < o; n++) if (!t(e[n])) return !1;
              return !0;
            },
            sum: function (e, t) {
              return (
                (t = t || Pe.self),
                e.reduce(function (e, n) {
                  return e + t(n);
                }, 0)
              );
            },
            from: function (e) {
              for (var t = [], n = e.length, o = -1; ++o < n; ) t[o] = e[o];
              return t;
            },
            isEmpty: function (e) {
              return !e || !e.length;
            },
            clusterBy: function (e, t) {
              return e.length
                ? a(e).reduce(
                    function (e, n) {
                      var o = r(e);
                      return (
                        t(r(o), n) ? (o[o.length] = n) : (e[e.length] = [n]), e
                      );
                    },
                    [[i(e)]]
                  )
                : [];
            },
            compact: function (e) {
              for (var t = [], n = 0, o = e.length; n < o; n++)
                e[n] && t.push(e[n]);
              return t;
            },
            unique: function (e) {
              for (var t = [], n = 0, o = e.length; n < o; n++)
                s(t, e[n]) || t.push(e[n]);
              return t;
            },
          },
          De = String.fromCharCode(160),
          Ne = c("PRE"),
          He = c("LI"),
          Be = c("TABLE"),
          Fe = c("DATA"),
          je = c("HR"),
          Ue = c("BLOCKQUOTE"),
          qe = c("A"),
          ze = c("BODY"),
          Ke = Ie.isMSIE && Ie.browserVersion < 11 ? "&nbsp;" : "<br>",
          We = c("TEXTAREA"),
          Ve = {
            NBSP_CHAR: De,
            ZERO_WIDTH_NBSP_CHAR: "\ufeff",
            blank: Ke,
            emptyPara: "<p>".concat(Ke, "</p>"),
            makePredByNodeName: c,
            isEditable: l,
            isControlSizing: function (e) {
              return e && Ce()(e).hasClass("note-control-sizing");
            },
            isText: u,
            isElement: function (e) {
              return e && 1 === e.nodeType;
            },
            isVoid: d,
            isPara: h,
            isPurePara: function (e) {
              return h(e) && !He(e);
            },
            isHeading: function (e) {
              return e && /^H[1-7]/.test(e.nodeName.toUpperCase());
            },
            isInline: p,
            isBlock: Pe.not(p),
            isBodyInline: function (e) {
              return p(e) && !w(e, h);
            },
            isBody: ze,
            isParaInline: function (e) {
              return p(e) && !!w(e, h);
            },
            isPre: Ne,
            isList: f,
            isTable: Be,
            isData: Fe,
            isCell: m,
            isBlockquote: Ue,
            isBodyContainer: g,
            isAnchor: qe,
            isDiv: c("DIV"),
            isLi: He,
            isBR: c("BR"),
            isSpan: c("SPAN"),
            isB: c("B"),
            isU: c("U"),
            isS: c("S"),
            isI: c("I"),
            isImg: c("IMG"),
            isTextarea: We,
            deepestChildIsEmpty: function (e) {
              do {
                if (
                  null === e.firstElementChild ||
                  "" === e.firstElementChild.innerHTML
                )
                  break;
              } while ((e = e.firstElementChild));
              return b(e);
            },
            isEmpty: b,
            isEmptyAnchor: Pe.and(qe, b),
            isClosestSibling: function (e, t) {
              return e.nextSibling === t || e.previousSibling === t;
            },
            withClosestSiblings: function (e, t) {
              t = t || Pe.ok;
              var n = [];
              return (
                e.previousSibling &&
                  t(e.previousSibling) &&
                  n.push(e.previousSibling),
                n.push(e),
                e.nextSibling && t(e.nextSibling) && n.push(e.nextSibling),
                n
              );
            },
            nodeLength: v,
            isLeftEdgePoint: x,
            isRightEdgePoint: E,
            isEdgePoint: $,
            isLeftEdgeOf: T,
            isRightEdgeOf: A,
            isLeftEdgePointOf: function (e, t) {
              return x(e) && T(e.node, t);
            },
            isRightEdgePointOf: function (e, t) {
              return E(e) && A(e.node, t);
            },
            prevPoint: I,
            nextPoint: R,
            nextPointWithEmptyNode: P,
            isSamePoint: D,
            isVisiblePoint: function (e) {
              if (u(e.node) || !O(e.node) || b(e.node)) return !0;
              var t = e.node.childNodes[e.offset - 1],
                n = e.node.childNodes[e.offset];
              return !((t && !d(t)) || (n && !d(n)));
            },
            prevPointUntil: function (e, t) {
              for (; e; ) {
                if (t(e)) return e;
                e = I(e);
              }
              return null;
            },
            nextPointUntil: function (e, t) {
              for (; e; ) {
                if (t(e)) return e;
                e = R(e);
              }
              return null;
            },
            isCharPoint: function (e) {
              if (!u(e.node)) return !1;
              var t = e.node.nodeValue.charAt(e.offset - 1);
              return t && " " !== t && t !== De;
            },
            isSpacePoint: function (e) {
              if (!u(e.node)) return !1;
              var t = e.node.nodeValue.charAt(e.offset - 1);
              return " " === t || t === De;
            },
            walkPoint: function (e, t, n, o) {
              for (var i = e; i && (n(i), !D(i, t)); )
                i = P(i, o && e.node !== i.node && t.node !== i.node);
            },
            ancestor: w,
            singleChildAncestor: function (e, t) {
              for (e = e.parentNode; e && 1 === v(e); ) {
                if (t(e)) return e;
                if (l(e)) break;
                e = e.parentNode;
              }
              return null;
            },
            listAncestor: _,
            lastAncestor: function (e, t) {
              var n = _(e);
              return Le.last(n.filter(t));
            },
            listNext: C,
            listPrev: function (e, t) {
              t = t || Pe.fail;
              for (var n = []; e && !t(e); ) n.push(e), (e = e.previousSibling);
              return n;
            },
            listDescendant: function (e, t) {
              var n = [];
              return (
                (t = t || Pe.ok),
                (function o(i) {
                  e !== i && t(i) && n.push(i);
                  for (var r = 0, a = i.childNodes.length; r < a; r++)
                    o(i.childNodes[r]);
                })(e),
                n
              );
            },
            commonAncestor: function (e, t) {
              for (var n = _(e), o = t; o; o = o.parentNode)
                if (n.indexOf(o) > -1) return o;
              return null;
            },
            wrap: function (e, t) {
              var n = e.parentNode,
                o = Ce()("<" + t + ">")[0];
              return n.insertBefore(o, e), o.appendChild(e), o;
            },
            insertAfter: k,
            appendChildNodes: S,
            position: M,
            hasChildren: O,
            makeOffsetPath: function (e, t) {
              return _(t, Pe.eq(e)).map(M).reverse();
            },
            fromOffsetPath: function (e, t) {
              for (var n = e, o = 0, i = t.length; o < i; o++)
                n =
                  n.childNodes.length <= t[o]
                    ? n.childNodes[n.childNodes.length - 1]
                    : n.childNodes[t[o]];
              return n;
            },
            splitTree: H,
            splitPoint: function (e, t) {
              var n,
                o,
                i = t ? h : g,
                r = _(e.node, i),
                a = Le.last(r) || e.node;
              i(a)
                ? ((n = r[r.length - 2]), (o = a))
                : (o = (n = a).parentNode);
              var s =
                n &&
                H(n, e, {
                  isSkipPaddingBlankHTML: t,
                  isNotSplitEdgePoint: t,
                });
              return (
                s || o !== e.node || (s = e.node.childNodes[e.offset]),
                {
                  rightNode: s,
                  container: o,
                }
              );
            },
            create: B,
            createText: function (e) {
              return document.createTextNode(e);
            },
            remove: F,
            removeWhile: function (e, t) {
              for (; e && !l(e) && t(e); ) {
                var n = e.parentNode;
                F(e), (e = n);
              }
            },
            replace: function (e, t) {
              if (e.nodeName.toUpperCase() === t.toUpperCase()) return e;
              var n = B(t);
              return (
                e.style.cssText && (n.style.cssText = e.style.cssText),
                S(n, Le.from(e.childNodes)),
                k(n, e),
                F(e),
                n
              );
            },
            html: function (e, t) {
              var n = j(e);
              return (
                t &&
                  (n = (n = n.replace(
                    /<(\/?)(\b(?!!)[^>\s]*)(.*?)(\s*\/?>)/g,
                    function (e, t, n) {
                      n = n.toUpperCase();
                      var o = /^DIV|^TD|^TH|^P|^LI|^H[1-7]/.test(n) && !!t,
                        i = /^BLOCKQUOTE|^TABLE|^TBODY|^TR|^HR|^UL|^OL/.test(n);
                      return e + (o || i ? "\n" : "");
                    }
                  )).trim()),
                n
              );
            },
            value: j,
            posFromPlaceholder: function (e) {
              var t = Ce()(e),
                n = t.offset(),
                o = t.outerHeight(!0);
              return {
                left: n.left,
                top: n.top + o,
              };
            },
            attachEvents: function (e, t) {
              Object.keys(t).forEach(function (n) {
                e.on(n, t[n]);
              });
            },
            detachEvents: function (e, t) {
              Object.keys(t).forEach(function (n) {
                e.off(n, t[n]);
              });
            },
            isCustomStyleTag: function (e) {
              return e && !u(e) && Le.contains(e.classList, "note-styletag");
            },
          },
          Ge = (function () {
            function e(t, n) {
              !(function (e, t) {
                if (!(e instanceof t))
                  throw new TypeError("Cannot call a class as a function");
              })(this, e),
                (this.$note = t),
                (this.memos = {}),
                (this.modules = {}),
                (this.layoutInfo = {}),
                (this.options = Ce.a.extend(!0, {}, n)),
                (Ce.a.summernote.ui = Ce.a.summernote.ui_template(
                  this.options
                )),
                (this.ui = Ce.a.summernote.ui),
                this.initialize();
            }
            var t, n, o;
            return (
              (t = e),
              (n = [
                {
                  key: "initialize",
                  value: function () {
                    return (
                      (this.layoutInfo = this.ui.createLayout(this.$note)),
                      this._initialize(),
                      this.$note.hide(),
                      this
                    );
                  },
                },
                {
                  key: "destroy",
                  value: function () {
                    this._destroy(),
                      this.$note.removeData("summernote"),
                      this.ui.removeLayout(this.$note, this.layoutInfo);
                  },
                },
                {
                  key: "reset",
                  value: function () {
                    var e = this.isDisabled();
                    this.code(Ve.emptyPara),
                      this._destroy(),
                      this._initialize(),
                      e && this.disable();
                  },
                },
                {
                  key: "_initialize",
                  value: function () {
                    var e = this;
                    (this.options.id = Pe.uniqueId(Ce.a.now())),
                      (this.options.container =
                        this.options.container || this.layoutInfo.editor);
                    var t = Ce.a.extend({}, this.options.buttons);
                    Object.keys(t).forEach(function (n) {
                      e.memo("button." + n, t[n]);
                    });
                    var n = Ce.a.extend(
                      {},
                      this.options.modules,
                      Ce.a.summernote.plugins || {}
                    );
                    Object.keys(n).forEach(function (t) {
                      e.module(t, n[t], !0);
                    }),
                      Object.keys(this.modules).forEach(function (t) {
                        e.initializeModule(t);
                      });
                  },
                },
                {
                  key: "_destroy",
                  value: function () {
                    var e = this;
                    Object.keys(this.modules)
                      .reverse()
                      .forEach(function (t) {
                        e.removeModule(t);
                      }),
                      Object.keys(this.memos).forEach(function (t) {
                        e.removeMemo(t);
                      }),
                      this.triggerEvent("destroy", this);
                  },
                },
                {
                  key: "code",
                  value: function (e) {
                    var t = this.invoke("codeview.isActivated");
                    if (void 0 === e)
                      return (
                        this.invoke("codeview.sync"),
                        t
                          ? this.layoutInfo.codable.val()
                          : this.layoutInfo.editable.html()
                      );
                    t
                      ? this.invoke("codeview.sync", e)
                      : this.layoutInfo.editable.html(e),
                      this.$note.val(e),
                      this.triggerEvent("change", e, this.layoutInfo.editable);
                  },
                },
                {
                  key: "isDisabled",
                  value: function () {
                    return (
                      "false" ===
                      this.layoutInfo.editable.attr("contenteditable")
                    );
                  },
                },
                {
                  key: "enable",
                  value: function () {
                    this.layoutInfo.editable.attr("contenteditable", !0),
                      this.invoke("toolbar.activate", !0),
                      this.triggerEvent("disable", !1),
                      (this.options.editing = !0);
                  },
                },
                {
                  key: "disable",
                  value: function () {
                    this.invoke("codeview.isActivated") &&
                      this.invoke("codeview.deactivate"),
                      this.layoutInfo.editable.attr("contenteditable", !1),
                      (this.options.editing = !1),
                      this.invoke("toolbar.deactivate", !0),
                      this.triggerEvent("disable", !0);
                  },
                },
                {
                  key: "triggerEvent",
                  value: function () {
                    var e = Le.head(arguments),
                      t = Le.tail(Le.from(arguments)),
                      n = this.options.callbacks[Pe.namespaceToCamel(e, "on")];
                    n && n.apply(this.$note[0], t),
                      this.$note.trigger("summernote." + e, t);
                  },
                },
                {
                  key: "initializeModule",
                  value: function (e) {
                    var t = this.modules[e];
                    (t.shouldInitialize = t.shouldInitialize || Pe.ok),
                      t.shouldInitialize() &&
                        (t.initialize && t.initialize(),
                        t.events && Ve.attachEvents(this.$note, t.events));
                  },
                },
                {
                  key: "module",
                  value: function (e, t, n) {
                    if (1 === arguments.length) return this.modules[e];
                    (this.modules[e] = new t(this)),
                      n || this.initializeModule(e);
                  },
                },
                {
                  key: "removeModule",
                  value: function (e) {
                    var t = this.modules[e];
                    t.shouldInitialize() &&
                      (t.events && Ve.detachEvents(this.$note, t.events),
                      t.destroy && t.destroy()),
                      delete this.modules[e];
                  },
                },
                {
                  key: "memo",
                  value: function (e, t) {
                    if (1 === arguments.length) return this.memos[e];
                    this.memos[e] = t;
                  },
                },
                {
                  key: "removeMemo",
                  value: function (e) {
                    this.memos[e] &&
                      this.memos[e].destroy &&
                      this.memos[e].destroy(),
                      delete this.memos[e];
                  },
                },
                {
                  key: "createInvokeHandlerAndUpdateState",
                  value: function (e, t) {
                    var n = this;
                    return function (o) {
                      n.createInvokeHandler(e, t)(o),
                        n.invoke("buttons.updateCurrentStyle");
                    };
                  },
                },
                {
                  key: "createInvokeHandler",
                  value: function (e, t) {
                    var n = this;
                    return function (o) {
                      o.preventDefault();
                      var i = Ce()(o.target);
                      n.invoke(
                        e,
                        t || i.closest("[data-value]").data("value"),
                        i
                      );
                    };
                  },
                },
                {
                  key: "invoke",
                  value: function () {
                    var e = Le.head(arguments),
                      t = Le.tail(Le.from(arguments)),
                      n = e.split("."),
                      o = n.length > 1,
                      i = o && Le.head(n),
                      r = o ? Le.last(n) : Le.head(n),
                      a = this.modules[i || "editor"];
                    return !i && this[r]
                      ? this[r].apply(this, t)
                      : a && a[r] && a.shouldInitialize()
                      ? a[r].apply(a, t)
                      : void 0;
                  },
                },
              ]) && U(t.prototype, n),
              o && U(t, o),
              e
            );
          })();
        Ce.a.fn.extend({
          summernote: function () {
            var e = Ce.a.type(Le.head(arguments)),
              t = "string" === e,
              n = "object" === e,
              o = Ce.a.extend(
                {},
                Ce.a.summernote.options,
                n ? Le.head(arguments) : {}
              );
            (o.langInfo = Ce.a.extend(
              !0,
              {},
              Ce.a.summernote.lang["en-US"],
              Ce.a.summernote.lang[o.lang]
            )),
              (o.icons = Ce.a.extend(
                !0,
                {},
                Ce.a.summernote.options.icons,
                o.icons
              )),
              (o.tooltip =
                "auto" === o.tooltip ? !Ie.isSupportTouch : o.tooltip),
              this.each(function (e, t) {
                var n = Ce()(t);
                if (!n.data("summernote")) {
                  var i = new Ge(n, o);
                  n.data("summernote", i),
                    n.data("summernote").triggerEvent("init", i.layoutInfo);
                }
              });
            var i = this.first();
            if (i.length) {
              var r = i.data("summernote");
              if (t) return r.invoke.apply(r, Le.from(arguments));
              o.focus && r.invoke("editor.focus");
            }
            return this;
          },
        });
        var Ye = (function () {
            function e(t, n, o, i) {
              !(function (e, t) {
                if (!(e instanceof t))
                  throw new TypeError("Cannot call a class as a function");
              })(this, e),
                (this.sc = t),
                (this.so = n),
                (this.ec = o),
                (this.eo = i),
                (this.isOnEditable = this.makeIsOn(Ve.isEditable)),
                (this.isOnList = this.makeIsOn(Ve.isList)),
                (this.isOnAnchor = this.makeIsOn(Ve.isAnchor)),
                (this.isOnCell = this.makeIsOn(Ve.isCell)),
                (this.isOnData = this.makeIsOn(Ve.isData));
            }
            var t, n, o;
            return (
              (t = e),
              (n = [
                {
                  key: "nativeRange",
                  value: function () {
                    if (Ie.isW3CRangeSupport) {
                      var e = document.createRange();
                      return (
                        e.setStart(this.sc, this.so),
                        e.setEnd(this.ec, this.eo),
                        e
                      );
                    }
                    var t = K({
                      node: this.sc,
                      offset: this.so,
                    });
                    return (
                      t.setEndPoint(
                        "EndToEnd",
                        K({
                          node: this.ec,
                          offset: this.eo,
                        })
                      ),
                      t
                    );
                  },
                },
                {
                  key: "getPoints",
                  value: function () {
                    return {
                      sc: this.sc,
                      so: this.so,
                      ec: this.ec,
                      eo: this.eo,
                    };
                  },
                },
                {
                  key: "getStartPoint",
                  value: function () {
                    return {
                      node: this.sc,
                      offset: this.so,
                    };
                  },
                },
                {
                  key: "getEndPoint",
                  value: function () {
                    return {
                      node: this.ec,
                      offset: this.eo,
                    };
                  },
                },
                {
                  key: "select",
                  value: function () {
                    var e = this.nativeRange();
                    if (Ie.isW3CRangeSupport) {
                      var t = document.getSelection();
                      t.rangeCount > 0 && t.removeAllRanges(), t.addRange(e);
                    } else e.select();
                    return this;
                  },
                },
                {
                  key: "scrollIntoView",
                  value: function (e) {
                    var t = Ce()(e).height();
                    return (
                      e.scrollTop + t < this.sc.offsetTop &&
                        (e.scrollTop += Math.abs(
                          e.scrollTop + t - this.sc.offsetTop
                        )),
                      this
                    );
                  },
                },
                {
                  key: "normalize",
                  value: function () {
                    var t = function (e, t) {
                        if (!e) return e;
                        if (
                          Ve.isVisiblePoint(e) &&
                          (!Ve.isEdgePoint(e) ||
                            (Ve.isRightEdgePoint(e) && !t) ||
                            (Ve.isLeftEdgePoint(e) && t) ||
                            (Ve.isRightEdgePoint(e) &&
                              t &&
                              Ve.isVoid(e.node.nextSibling)) ||
                            (Ve.isLeftEdgePoint(e) &&
                              !t &&
                              Ve.isVoid(e.node.previousSibling)) ||
                            (Ve.isBlock(e.node) && Ve.isEmpty(e.node)))
                        )
                          return e;
                        var n = Ve.ancestor(e.node, Ve.isBlock),
                          o = !1;
                        if (!o) {
                          var i = Ve.prevPoint(e) || {
                            node: null,
                          };
                          o =
                            (Ve.isLeftEdgePointOf(e, n) || Ve.isVoid(i.node)) &&
                            !t;
                        }
                        var r = !1;
                        if (!r) {
                          var a = Ve.nextPoint(e) || {
                            node: null,
                          };
                          r =
                            (Ve.isRightEdgePointOf(e, n) ||
                              Ve.isVoid(a.node)) &&
                            t;
                        }
                        if (o || r) {
                          if (Ve.isVisiblePoint(e)) return e;
                          t = !t;
                        }
                        return (
                          (t
                            ? Ve.nextPointUntil(
                                Ve.nextPoint(e),
                                Ve.isVisiblePoint
                              )
                            : Ve.prevPointUntil(
                                Ve.prevPoint(e),
                                Ve.isVisiblePoint
                              )) || e
                        );
                      },
                      n = t(this.getEndPoint(), !1),
                      o = this.isCollapsed() ? n : t(this.getStartPoint(), !0);
                    return new e(o.node, o.offset, n.node, n.offset);
                  },
                },
                {
                  key: "nodes",
                  value: function (e, t) {
                    e = e || Pe.ok;
                    var n = t && t.includeAncestor,
                      o = t && t.fullyContains,
                      i = this.getStartPoint(),
                      r = this.getEndPoint(),
                      a = [],
                      s = [];
                    return (
                      Ve.walkPoint(
                        i,
                        r,
                        function (t) {
                          var i;
                          Ve.isEditable(t.node) ||
                            (o
                              ? (Ve.isLeftEdgePoint(t) && s.push(t.node),
                                Ve.isRightEdgePoint(t) &&
                                  Le.contains(s, t.node) &&
                                  (i = t.node))
                              : (i = n ? Ve.ancestor(t.node, e) : t.node),
                            i && e(i) && a.push(i));
                        },
                        !0
                      ),
                      Le.unique(a)
                    );
                  },
                },
                {
                  key: "commonAncestor",
                  value: function () {
                    return Ve.commonAncestor(this.sc, this.ec);
                  },
                },
                {
                  key: "expand",
                  value: function (t) {
                    var n = Ve.ancestor(this.sc, t),
                      o = Ve.ancestor(this.ec, t);
                    if (!n && !o)
                      return new e(this.sc, this.so, this.ec, this.eo);
                    var i = this.getPoints();
                    return (
                      n && ((i.sc = n), (i.so = 0)),
                      o && ((i.ec = o), (i.eo = Ve.nodeLength(o))),
                      new e(i.sc, i.so, i.ec, i.eo)
                    );
                  },
                },
                {
                  key: "collapse",
                  value: function (t) {
                    return t
                      ? new e(this.sc, this.so, this.sc, this.so)
                      : new e(this.ec, this.eo, this.ec, this.eo);
                  },
                },
                {
                  key: "splitText",
                  value: function () {
                    var t = this.sc === this.ec,
                      n = this.getPoints();
                    return (
                      Ve.isText(this.ec) &&
                        !Ve.isEdgePoint(this.getEndPoint()) &&
                        this.ec.splitText(this.eo),
                      Ve.isText(this.sc) &&
                        !Ve.isEdgePoint(this.getStartPoint()) &&
                        ((n.sc = this.sc.splitText(this.so)),
                        (n.so = 0),
                        t && ((n.ec = n.sc), (n.eo = this.eo - this.so))),
                      new e(n.sc, n.so, n.ec, n.eo)
                    );
                  },
                },
                {
                  key: "deleteContents",
                  value: function () {
                    if (this.isCollapsed()) return this;
                    var t = this.splitText(),
                      n = t.nodes(null, {
                        fullyContains: !0,
                      }),
                      o = Ve.prevPointUntil(t.getStartPoint(), function (e) {
                        return !Le.contains(n, e.node);
                      }),
                      i = [];
                    return (
                      Ce.a.each(n, function (e, t) {
                        var n = t.parentNode;
                        o.node !== n && 1 === Ve.nodeLength(n) && i.push(n),
                          Ve.remove(t, !1);
                      }),
                      Ce.a.each(i, function (e, t) {
                        Ve.remove(t, !1);
                      }),
                      new e(o.node, o.offset, o.node, o.offset).normalize()
                    );
                  },
                },
                {
                  key: "makeIsOn",
                  value: function (e) {
                    return function () {
                      var t = Ve.ancestor(this.sc, e);
                      return !!t && t === Ve.ancestor(this.ec, e);
                    };
                  },
                },
                {
                  key: "isLeftEdgeOf",
                  value: function (e) {
                    if (!Ve.isLeftEdgePoint(this.getStartPoint())) return !1;
                    var t = Ve.ancestor(this.sc, e);
                    return t && Ve.isLeftEdgeOf(this.sc, t);
                  },
                },
                {
                  key: "isCollapsed",
                  value: function () {
                    return this.sc === this.ec && this.so === this.eo;
                  },
                },
                {
                  key: "wrapBodyInlineWithPara",
                  value: function () {
                    if (Ve.isBodyContainer(this.sc) && Ve.isEmpty(this.sc))
                      return (
                        (this.sc.innerHTML = Ve.emptyPara),
                        new e(this.sc.firstChild, 0, this.sc.firstChild, 0)
                      );
                    var t,
                      n = this.normalize();
                    if (Ve.isParaInline(this.sc) || Ve.isPara(this.sc))
                      return n;
                    if (Ve.isInline(n.sc)) {
                      var o = Ve.listAncestor(n.sc, Pe.not(Ve.isInline));
                      (t = Le.last(o)),
                        Ve.isInline(t) ||
                          (t = o[o.length - 2] || n.sc.childNodes[n.so]);
                    } else t = n.sc.childNodes[n.so > 0 ? n.so - 1 : 0];
                    if (t) {
                      var i = Ve.listPrev(t, Ve.isParaInline).reverse();
                      if (
                        (i = i.concat(
                          Ve.listNext(t.nextSibling, Ve.isParaInline)
                        )).length
                      ) {
                        var r = Ve.wrap(Le.head(i), "p");
                        Ve.appendChildNodes(r, Le.tail(i));
                      }
                    }
                    return this.normalize();
                  },
                },
                {
                  key: "insertNode",
                  value: function (e) {
                    var t = this;
                    (Ve.isText(e) || Ve.isInline(e)) &&
                      (t = this.wrapBodyInlineWithPara().deleteContents());
                    var n = Ve.splitPoint(t.getStartPoint(), Ve.isInline(e));
                    return (
                      n.rightNode
                        ? (n.rightNode.parentNode.insertBefore(e, n.rightNode),
                          Ve.isEmpty(n.rightNode) &&
                            Ve.isPara(e) &&
                            n.rightNode.parentNode.removeChild(n.rightNode))
                        : n.container.appendChild(e),
                      e
                    );
                  },
                },
                {
                  key: "pasteHTML",
                  value: function (e) {
                    e = Ce.a.trim(e);
                    var t = Ce()("<div></div>").html(e)[0],
                      n = Le.from(t.childNodes),
                      o = this,
                      i = !1;
                    return (
                      o.so >= 0 && ((n = n.reverse()), (i = !0)),
                      (n = n.map(function (e) {
                        return o.insertNode(e);
                      })),
                      i && (n = n.reverse()),
                      n
                    );
                  },
                },
                {
                  key: "toString",
                  value: function () {
                    var e = this.nativeRange();
                    return Ie.isW3CRangeSupport ? e.toString() : e.text;
                  },
                },
                {
                  key: "getWordRange",
                  value: function (t) {
                    var n = this.getEndPoint();
                    if (!Ve.isCharPoint(n)) return this;
                    var o = Ve.prevPointUntil(n, function (e) {
                      return !Ve.isCharPoint(e);
                    });
                    return (
                      t &&
                        (n = Ve.nextPointUntil(n, function (e) {
                          return !Ve.isCharPoint(e);
                        })),
                      new e(o.node, o.offset, n.node, n.offset)
                    );
                  },
                },
                {
                  key: "getWordsRange",
                  value: function (t) {
                    var n = this.getEndPoint(),
                      o = function (e) {
                        return !Ve.isCharPoint(e) && !Ve.isSpacePoint(e);
                      };
                    if (o(n)) return this;
                    var i = Ve.prevPointUntil(n, o);
                    return (
                      t && (n = Ve.nextPointUntil(n, o)),
                      new e(i.node, i.offset, n.node, n.offset)
                    );
                  },
                },
                {
                  key: "getWordsMatchRange",
                  value: function (t) {
                    var n = this.getEndPoint(),
                      o = Ve.prevPointUntil(n, function (o) {
                        if (!Ve.isCharPoint(o) && !Ve.isSpacePoint(o))
                          return !0;
                        var i = new e(o.node, o.offset, n.node, n.offset),
                          r = t.exec(i.toString());
                        return r && 0 === r.index;
                      }),
                      i = new e(o.node, o.offset, n.node, n.offset),
                      r = i.toString(),
                      a = t.exec(r);
                    return a && a[0].length === r.length ? i : null;
                  },
                },
                {
                  key: "bookmark",
                  value: function (e) {
                    return {
                      s: {
                        path: Ve.makeOffsetPath(e, this.sc),
                        offset: this.so,
                      },
                      e: {
                        path: Ve.makeOffsetPath(e, this.ec),
                        offset: this.eo,
                      },
                    };
                  },
                },
                {
                  key: "paraBookmark",
                  value: function (e) {
                    return {
                      s: {
                        path: Le.tail(Ve.makeOffsetPath(Le.head(e), this.sc)),
                        offset: this.so,
                      },
                      e: {
                        path: Le.tail(Ve.makeOffsetPath(Le.last(e), this.ec)),
                        offset: this.eo,
                      },
                    };
                  },
                },
                {
                  key: "getClientRects",
                  value: function () {
                    return this.nativeRange().getClientRects();
                  },
                },
              ]) && q(t.prototype, n),
              o && q(t, o),
              e
            );
          })(),
          Qe = {
            create: function (e, t, n, o) {
              if (4 === arguments.length) return new Ye(e, t, n, o);
              if (2 === arguments.length) return new Ye(e, t, (n = e), (o = t));
              var i = this.createFromSelection();
              if (!i && 1 === arguments.length) {
                var r = arguments[0];
                return (
                  Ve.isEditable(r) && (r = r.lastChild),
                  this.createFromBodyElement(
                    r,
                    Ve.emptyPara === arguments[0].innerHTML
                  )
                );
              }
              return i;
            },
            createFromBodyElement: function (e) {
              var t =
                arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
              return this.createFromNode(e).collapse(t);
            },
            createFromSelection: function () {
              var e, t, n, o;
              if (Ie.isW3CRangeSupport) {
                var i = document.getSelection();
                if (!i || 0 === i.rangeCount) return null;
                if (Ve.isBody(i.anchorNode)) return null;
                var r = i.getRangeAt(0);
                (e = r.startContainer),
                  (t = r.startOffset),
                  (n = r.endContainer),
                  (o = r.endOffset);
              } else {
                var a = document.selection.createRange(),
                  s = a.duplicate();
                s.collapse(!1);
                var l = a;
                l.collapse(!0);
                var c = z(l, !0),
                  u = z(s, !1);
                Ve.isText(c.node) &&
                  Ve.isLeftEdgePoint(c) &&
                  Ve.isTextNode(u.node) &&
                  Ve.isRightEdgePoint(u) &&
                  u.node.nextSibling === c.node &&
                  (c = u),
                  (e = c.cont),
                  (t = c.offset),
                  (n = u.cont),
                  (o = u.offset);
              }
              return new Ye(e, t, n, o);
            },
            createFromNode: function (e) {
              var t = e,
                n = 0,
                o = e,
                i = Ve.nodeLength(o);
              return (
                Ve.isVoid(t) &&
                  ((n = Ve.listPrev(t).length - 1), (t = t.parentNode)),
                Ve.isBR(o)
                  ? ((i = Ve.listPrev(o).length - 1), (o = o.parentNode))
                  : Ve.isVoid(o) &&
                    ((i = Ve.listPrev(o).length), (o = o.parentNode)),
                this.create(t, n, o, i)
              );
            },
            createFromNodeBefore: function (e) {
              return this.createFromNode(e).collapse(!0);
            },
            createFromNodeAfter: function (e) {
              return this.createFromNode(e).collapse();
            },
            createFromBookmark: function (e, t) {
              var n = Ve.fromOffsetPath(e, t.s.path),
                o = t.s.offset,
                i = Ve.fromOffsetPath(e, t.e.path),
                r = t.e.offset;
              return new Ye(n, o, i, r);
            },
            createFromParaBookmark: function (e, t) {
              var n = e.s.offset,
                o = e.e.offset,
                i = Ve.fromOffsetPath(Le.head(t), e.s.path),
                r = Ve.fromOffsetPath(Le.last(t), e.e.path);
              return new Ye(i, n, r, o);
            },
          },
          Je = {
            BACKSPACE: 8,
            TAB: 9,
            ENTER: 13,
            ESCAPE: 27,
            SPACE: 32,
            DELETE: 46,
            LEFT: 37,
            UP: 38,
            RIGHT: 39,
            DOWN: 40,
            NUM0: 48,
            NUM1: 49,
            NUM2: 50,
            NUM3: 51,
            NUM4: 52,
            NUM5: 53,
            NUM6: 54,
            NUM7: 55,
            NUM8: 56,
            B: 66,
            E: 69,
            I: 73,
            J: 74,
            K: 75,
            L: 76,
            R: 82,
            S: 83,
            U: 85,
            V: 86,
            Y: 89,
            Z: 90,
            SLASH: 191,
            LEFTBRACKET: 219,
            BACKSLASH: 220,
            RIGHTBRACKET: 221,
            HOME: 36,
            END: 35,
            PAGEUP: 33,
            PAGEDOWN: 34,
          },
          Xe = {
            isEdit: function (e) {
              return Le.contains(
                [Je.BACKSPACE, Je.TAB, Je.ENTER, Je.SPACE, Je.DELETE],
                e
              );
            },
            isMove: function (e) {
              return Le.contains([Je.LEFT, Je.UP, Je.RIGHT, Je.DOWN], e);
            },
            isNavigation: function (e) {
              return Le.contains([Je.HOME, Je.END, Je.PAGEUP, Je.PAGEDOWN], e);
            },
            nameFromCode: Pe.invertObject(Je),
            code: Je,
          },
          Ze = (function () {
            function e(t) {
              !(function (e, t) {
                if (!(e instanceof t))
                  throw new TypeError("Cannot call a class as a function");
              })(this, e),
                (this.stack = []),
                (this.stackOffset = -1),
                (this.context = t),
                (this.$editable = t.layoutInfo.editable),
                (this.editable = this.$editable[0]);
            }
            var t, n, o;
            return (
              (t = e),
              (n = [
                {
                  key: "makeSnapshot",
                  value: function () {
                    var e = Qe.create(this.editable);
                    return {
                      contents: this.$editable.html(),
                      bookmark:
                        e && e.isOnEditable()
                          ? e.bookmark(this.editable)
                          : {
                              s: {
                                path: [],
                                offset: 0,
                              },
                              e: {
                                path: [],
                                offset: 0,
                              },
                            },
                    };
                  },
                },
                {
                  key: "applySnapshot",
                  value: function (e) {
                    null !== e.contents && this.$editable.html(e.contents),
                      null !== e.bookmark &&
                        Qe.createFromBookmark(
                          this.editable,
                          e.bookmark
                        ).select();
                  },
                },
                {
                  key: "rewind",
                  value: function () {
                    this.$editable.html() !==
                      this.stack[this.stackOffset].contents &&
                      this.recordUndo(),
                      (this.stackOffset = 0),
                      this.applySnapshot(this.stack[this.stackOffset]);
                  },
                },
                {
                  key: "commit",
                  value: function () {
                    (this.stack = []),
                      (this.stackOffset = -1),
                      this.recordUndo();
                  },
                },
                {
                  key: "reset",
                  value: function () {
                    (this.stack = []),
                      (this.stackOffset = -1),
                      this.$editable.html(""),
                      this.recordUndo();
                  },
                },
                {
                  key: "undo",
                  value: function () {
                    this.$editable.html() !==
                      this.stack[this.stackOffset].contents &&
                      this.recordUndo(),
                      this.stackOffset > 0 &&
                        (this.stackOffset--,
                        this.applySnapshot(this.stack[this.stackOffset]));
                  },
                },
                {
                  key: "redo",
                  value: function () {
                    this.stack.length - 1 > this.stackOffset &&
                      (this.stackOffset++,
                      this.applySnapshot(this.stack[this.stackOffset]));
                  },
                },
                {
                  key: "recordUndo",
                  value: function () {
                    this.stackOffset++,
                      this.stack.length > this.stackOffset &&
                        (this.stack = this.stack.slice(0, this.stackOffset)),
                      this.stack.push(this.makeSnapshot()),
                      this.stack.length > this.context.options.historyLimit &&
                        (this.stack.shift(), (this.stackOffset -= 1));
                  },
                },
              ]) && W(t.prototype, n),
              o && W(t, o),
              e
            );
          })(),
          et = (function () {
            function e() {
              !(function (e, t) {
                if (!(e instanceof t))
                  throw new TypeError("Cannot call a class as a function");
              })(this, e);
            }
            var t, n, o;
            return (
              (t = e),
              (n = [
                {
                  key: "jQueryCSS",
                  value: function (e, t) {
                    if (Ie.jqueryVersion < 1.9) {
                      var n = {};
                      return (
                        Ce.a.each(t, function (t, o) {
                          n[o] = e.css(o);
                        }),
                        n
                      );
                    }
                    return e.css(t);
                  },
                },
                {
                  key: "fromNode",
                  value: function (e) {
                    var t =
                        this.jQueryCSS(e, [
                          "font-family",
                          "font-size",
                          "text-align",
                          "list-style-type",
                          "line-height",
                        ]) || {},
                      n = e[0].style.fontSize || t["font-size"];
                    return (
                      (t["font-size"] = parseInt(n, 10)),
                      (t["font-size-unit"] = n.match(/[a-z%]+$/)),
                      t
                    );
                  },
                },
                {
                  key: "stylePara",
                  value: function (e, t) {
                    Ce.a.each(
                      e.nodes(Ve.isPara, {
                        includeAncestor: !0,
                      }),
                      function (e, n) {
                        Ce()(n).css(t);
                      }
                    );
                  },
                },
                {
                  key: "styleNodes",
                  value: function (e, t) {
                    e = e.splitText();
                    var n = (t && t.nodeName) || "SPAN",
                      o = !(!t || !t.expandClosestSibling),
                      i = !(!t || !t.onlyPartialContains);
                    if (e.isCollapsed()) return [e.insertNode(Ve.create(n))];
                    var r = Ve.makePredByNodeName(n),
                      a = e
                        .nodes(Ve.isText, {
                          fullyContains: !0,
                        })
                        .map(function (e) {
                          return Ve.singleChildAncestor(e, r) || Ve.wrap(e, n);
                        });
                    if (o) {
                      if (i) {
                        var s = e.nodes();
                        r = Pe.and(r, function (e) {
                          return Le.contains(s, e);
                        });
                      }
                      return a.map(function (e) {
                        var t = Ve.withClosestSiblings(e, r),
                          n = Le.head(t),
                          o = Le.tail(t);
                        return (
                          Ce.a.each(o, function (e, t) {
                            Ve.appendChildNodes(n, t.childNodes), Ve.remove(t);
                          }),
                          Le.head(t)
                        );
                      });
                    }
                    return a;
                  },
                },
                {
                  key: "current",
                  value: function (e) {
                    var t = Ce()(Ve.isElement(e.sc) ? e.sc : e.sc.parentNode),
                      n = this.fromNode(t);
                    try {
                      n = Ce.a.extend(n, {
                        "font-bold": document.queryCommandState("bold")
                          ? "bold"
                          : "normal",
                        "font-italic": document.queryCommandState("italic")
                          ? "italic"
                          : "normal",
                        "font-underline": document.queryCommandState(
                          "underline"
                        )
                          ? "underline"
                          : "normal",
                        "font-subscript": document.queryCommandState(
                          "subscript"
                        )
                          ? "subscript"
                          : "normal",
                        "font-superscript": document.queryCommandState(
                          "superscript"
                        )
                          ? "superscript"
                          : "normal",
                        "font-strikethrough": document.queryCommandState(
                          "strikethrough"
                        )
                          ? "strikethrough"
                          : "normal",
                        "font-family":
                          document.queryCommandValue("fontname") ||
                          n["font-family"],
                      });
                    } catch (e) {}
                    if (e.isOnList()) {
                      var o =
                        [
                          "circle",
                          "disc",
                          "disc-leading-zero",
                          "square",
                        ].indexOf(n["list-style-type"]) > -1;
                      n["list-style"] = o ? "unordered" : "ordered";
                    } else n["list-style"] = "none";
                    var i = Ve.ancestor(e.sc, Ve.isPara);
                    if (i && i.style["line-height"])
                      n["line-height"] = i.style.lineHeight;
                    else {
                      var r =
                        parseInt(n["line-height"], 10) /
                        parseInt(n["font-size"], 10);
                      n["line-height"] = r.toFixed(1);
                    }
                    return (
                      (n.anchor =
                        e.isOnAnchor() && Ve.ancestor(e.sc, Ve.isAnchor)),
                      (n.ancestors = Ve.listAncestor(e.sc, Ve.isEditable)),
                      (n.range = e),
                      n
                    );
                  },
                },
              ]) && V(t.prototype, n),
              o && V(t, o),
              e
            );
          })(),
          tt = (function () {
            function e() {
              !(function (e, t) {
                if (!(e instanceof t))
                  throw new TypeError("Cannot call a class as a function");
              })(this, e);
            }
            var t, n, o;
            return (
              (t = e),
              (n = [
                {
                  key: "insertOrderedList",
                  value: function (e) {
                    this.toggleList("OL", e);
                  },
                },
                {
                  key: "insertUnorderedList",
                  value: function (e) {
                    this.toggleList("UL", e);
                  },
                },
                {
                  key: "indent",
                  value: function (e) {
                    var t = this,
                      n = Qe.create(e).wrapBodyInlineWithPara(),
                      o = n.nodes(Ve.isPara, {
                        includeAncestor: !0,
                      }),
                      i = Le.clusterBy(o, Pe.peq2("parentNode"));
                    Ce.a.each(i, function (e, n) {
                      var o = Le.head(n);
                      if (Ve.isLi(o)) {
                        var i = t.findList(o.previousSibling);
                        i
                          ? n.map(function (e) {
                              return i.appendChild(e);
                            })
                          : (t.wrapList(n, o.parentNode.nodeName),
                            n
                              .map(function (e) {
                                return e.parentNode;
                              })
                              .map(function (e) {
                                return t.appendToPrevious(e);
                              }));
                      } else
                        Ce.a.each(n, function (e, t) {
                          Ce()(t).css("marginLeft", function (e, t) {
                            return (parseInt(t, 10) || 0) + 25;
                          });
                        });
                    }),
                      n.select();
                  },
                },
                {
                  key: "outdent",
                  value: function (e) {
                    var t = this,
                      n = Qe.create(e).wrapBodyInlineWithPara(),
                      o = n.nodes(Ve.isPara, {
                        includeAncestor: !0,
                      }),
                      i = Le.clusterBy(o, Pe.peq2("parentNode"));
                    Ce.a.each(i, function (e, n) {
                      var o = Le.head(n);
                      Ve.isLi(o)
                        ? t.releaseList([n])
                        : Ce.a.each(n, function (e, t) {
                            Ce()(t).css("marginLeft", function (e, t) {
                              return (t = parseInt(t, 10) || 0) > 25
                                ? t - 25
                                : "";
                            });
                          });
                    }),
                      n.select();
                  },
                },
                {
                  key: "toggleList",
                  value: function (e, t) {
                    var n = this,
                      o = Qe.create(t).wrapBodyInlineWithPara(),
                      i = o.nodes(Ve.isPara, {
                        includeAncestor: !0,
                      }),
                      r = o.paraBookmark(i),
                      a = Le.clusterBy(i, Pe.peq2("parentNode"));
                    if (Le.find(i, Ve.isPurePara)) {
                      var s = [];
                      Ce.a.each(a, function (t, o) {
                        s = s.concat(n.wrapList(o, e));
                      }),
                        (i = s);
                    } else {
                      var l = o
                        .nodes(Ve.isList, {
                          includeAncestor: !0,
                        })
                        .filter(function (t) {
                          return !Ce.a.nodeName(t, e);
                        });
                      l.length
                        ? Ce.a.each(l, function (t, n) {
                            Ve.replace(n, e);
                          })
                        : (i = this.releaseList(a, !0));
                    }
                    Qe.createFromParaBookmark(r, i).select();
                  },
                },
                {
                  key: "wrapList",
                  value: function (e, t) {
                    var n = Le.head(e),
                      o = Le.last(e),
                      i = Ve.isList(n.previousSibling) && n.previousSibling,
                      r = Ve.isList(o.nextSibling) && o.nextSibling,
                      a = i || Ve.insertAfter(Ve.create(t || "UL"), o);
                    return (
                      (e = e.map(function (e) {
                        return Ve.isPurePara(e) ? Ve.replace(e, "LI") : e;
                      })),
                      Ve.appendChildNodes(a, e),
                      r &&
                        (Ve.appendChildNodes(a, Le.from(r.childNodes)),
                        Ve.remove(r)),
                      e
                    );
                  },
                },
                {
                  key: "releaseList",
                  value: function (e, t) {
                    var n = this,
                      o = [];
                    return (
                      Ce.a.each(e, function (e, i) {
                        var r = Le.head(i),
                          a = Le.last(i),
                          s = t ? Ve.lastAncestor(r, Ve.isList) : r.parentNode,
                          l = s.parentNode;
                        if ("LI" === s.parentNode.nodeName)
                          i.map(function (e) {
                            var t = n.findNextSiblings(e);
                            l.nextSibling
                              ? l.parentNode.insertBefore(e, l.nextSibling)
                              : l.parentNode.appendChild(e),
                              t.length &&
                                (n.wrapList(t, s.nodeName),
                                e.appendChild(t[0].parentNode));
                          }),
                            0 === s.children.length && l.removeChild(s),
                            0 === l.childNodes.length &&
                              l.parentNode.removeChild(l);
                        else {
                          var c =
                              s.childNodes.length > 1
                                ? Ve.splitTree(
                                    s,
                                    {
                                      node: a.parentNode,
                                      offset: Ve.position(a) + 1,
                                    },
                                    {
                                      isSkipPaddingBlankHTML: !0,
                                    }
                                  )
                                : null,
                            u = Ve.splitTree(
                              s,
                              {
                                node: r.parentNode,
                                offset: Ve.position(r),
                              },
                              {
                                isSkipPaddingBlankHTML: !0,
                              }
                            );
                          (i = t
                            ? Ve.listDescendant(u, Ve.isLi)
                            : Le.from(u.childNodes).filter(Ve.isLi)),
                            (!t && Ve.isList(s.parentNode)) ||
                              (i = i.map(function (e) {
                                return Ve.replace(e, "P");
                              })),
                            Ce.a.each(Le.from(i).reverse(), function (e, t) {
                              Ve.insertAfter(t, s);
                            });
                          var d = Le.compact([s, u, c]);
                          Ce.a.each(d, function (e, t) {
                            var n = [t].concat(Ve.listDescendant(t, Ve.isList));
                            Ce.a.each(n.reverse(), function (e, t) {
                              Ve.nodeLength(t) || Ve.remove(t, !0);
                            });
                          });
                        }
                        o = o.concat(i);
                      }),
                      o
                    );
                  },
                },
                {
                  key: "appendToPrevious",
                  value: function (e) {
                    return e.previousSibling
                      ? Ve.appendChildNodes(e.previousSibling, [e])
                      : this.wrapList([e], "LI");
                  },
                },
                {
                  key: "findList",
                  value: function (e) {
                    return e
                      ? Le.find(e.children, function (e) {
                          return ["OL", "UL"].indexOf(e.nodeName) > -1;
                        })
                      : null;
                  },
                },
                {
                  key: "findNextSiblings",
                  value: function (e) {
                    for (var t = []; e.nextSibling; )
                      t.push(e.nextSibling), (e = e.nextSibling);
                    return t;
                  },
                },
              ]) && G(t.prototype, n),
              o && G(t, o),
              e
            );
          })(),
          nt = (function () {
            function e(t) {
              !(function (e, t) {
                if (!(e instanceof t))
                  throw new TypeError("Cannot call a class as a function");
              })(this, e),
                (this.bullet = new tt()),
                (this.options = t.options);
            }
            var t, n, o;
            return (
              (t = e),
              (n = [
                {
                  key: "insertTab",
                  value: function (e, t) {
                    var n = Ve.createText(new Array(t + 1).join(Ve.NBSP_CHAR));
                    (e = e.deleteContents()).insertNode(n, !0),
                      (e = Qe.create(n, t)).select();
                  },
                },
                {
                  key: "insertParagraph",
                  value: function (e, t) {
                    t = (t = (t =
                      t ||
                      Qe.create(e)).deleteContents()).wrapBodyInlineWithPara();
                    var n,
                      o = Ve.ancestor(t.sc, Ve.isPara);
                    if (o) {
                      if (
                        Ve.isLi(o) &&
                        (Ve.isEmpty(o) || Ve.deepestChildIsEmpty(o))
                      )
                        return void this.bullet.toggleList(
                          o.parentNode.nodeName
                        );
                      var i = null;
                      if (
                        (1 === this.options.blockquoteBreakingLevel
                          ? (i = Ve.ancestor(o, Ve.isBlockquote))
                          : 2 === this.options.blockquoteBreakingLevel &&
                            (i = Ve.lastAncestor(o, Ve.isBlockquote)),
                        i)
                      ) {
                        (n = Ce()(Ve.emptyPara)[0]),
                          Ve.isRightEdgePoint(t.getStartPoint()) &&
                            Ve.isBR(t.sc.nextSibling) &&
                            Ce()(t.sc.nextSibling).remove();
                        var r = Ve.splitTree(i, t.getStartPoint(), {
                          isDiscardEmptySplits: !0,
                        });
                        r
                          ? r.parentNode.insertBefore(n, r)
                          : Ve.insertAfter(n, i);
                      } else {
                        n = Ve.splitTree(o, t.getStartPoint());
                        var a = Ve.listDescendant(o, Ve.isEmptyAnchor);
                        (a = a.concat(Ve.listDescendant(n, Ve.isEmptyAnchor))),
                          Ce.a.each(a, function (e, t) {
                            Ve.remove(t);
                          }),
                          (Ve.isHeading(n) ||
                            Ve.isPre(n) ||
                            Ve.isCustomStyleTag(n)) &&
                            Ve.isEmpty(n) &&
                            (n = Ve.replace(n, "p"));
                      }
                    } else {
                      var s = t.sc.childNodes[t.so];
                      (n = Ce()(Ve.emptyPara)[0]),
                        s ? t.sc.insertBefore(n, s) : t.sc.appendChild(n);
                    }
                    Qe.create(n, 0).normalize().select().scrollIntoView(e);
                  },
                },
              ]) && Y(t.prototype, n),
              o && Y(t, o),
              e
            );
          })(),
          ot = function e(t, n, o, i) {
            function r(e, t, n, o, i, r, a) {
              var s = {
                baseRow: n,
                baseCell: o,
                isRowSpan: i,
                isColSpan: r,
                isVirtual: a,
              };
              p[e] || (p[e] = []), (p[e][t] = s);
            }
            function a(e, t, n, o) {
              return {
                baseCell: e.baseCell,
                action: t,
                virtualTable: {
                  rowIndex: n,
                  cellIndex: o,
                },
              };
            }
            function s(e, t) {
              if (!p[e]) return t;
              if (!p[e][t]) return t;
              for (var n = t; p[e][n]; ) if ((n++, !p[e][n])) return n;
            }
            function l(e, t) {
              var n = s(e.rowIndex, t.cellIndex),
                o = t.colSpan > 1,
                i = t.rowSpan > 1,
                a = e.rowIndex === h.rowPos && t.cellIndex === h.colPos;
              r(e.rowIndex, n, e, t, i, o, !1);
              var l = t.attributes.rowSpan
                ? parseInt(t.attributes.rowSpan.value, 10)
                : 0;
              if (l > 1)
                for (var u = 1; u < l; u++) {
                  var d = e.rowIndex + u;
                  c(d, n, t, a), r(d, n, e, t, !0, o, !0);
                }
              var p = t.attributes.colSpan
                ? parseInt(t.attributes.colSpan.value, 10)
                : 0;
              if (p > 1)
                for (var f = 1; f < p; f++) {
                  var m = s(e.rowIndex, n + f);
                  c(e.rowIndex, m, t, a), r(e.rowIndex, m, e, t, i, !0, !0);
                }
            }
            function c(e, t, n, o) {
              e === h.rowPos &&
                h.colPos >= n.cellIndex &&
                n.cellIndex <= t &&
                !o &&
                h.colPos++;
            }
            function u(t) {
              switch (n) {
                case e.where.Column:
                  if (t.isColSpan) return e.resultAction.SubtractSpanCount;
                  break;
                case e.where.Row:
                  if (!t.isVirtual && t.isRowSpan)
                    return e.resultAction.AddCell;
                  if (t.isRowSpan) return e.resultAction.SubtractSpanCount;
              }
              return e.resultAction.RemoveCell;
            }
            function d(t) {
              switch (n) {
                case e.where.Column:
                  if (t.isColSpan) return e.resultAction.SumSpanCount;
                  if (t.isRowSpan && t.isVirtual) return e.resultAction.Ignore;
                  break;
                case e.where.Row:
                  if (t.isRowSpan) return e.resultAction.SumSpanCount;
                  if (t.isColSpan && t.isVirtual) return e.resultAction.Ignore;
              }
              return e.resultAction.AddCell;
            }
            var h = {
                colPos: 0,
                rowPos: 0,
              },
              p = [],
              f = [];
            (this.getActionList = function () {
              for (
                var t = n === e.where.Row ? h.rowPos : -1,
                  i = n === e.where.Column ? h.colPos : -1,
                  r = 0,
                  s = !0;
                s;

              ) {
                var l = t >= 0 ? t : r,
                  c = i >= 0 ? i : r,
                  m = p[l];
                if (!m) return (s = !1), f;
                var g = m[c];
                if (!g) return (s = !1), f;
                var v = e.resultAction.Ignore;
                switch (o) {
                  case e.requestAction.Add:
                    v = d(g);
                    break;
                  case e.requestAction.Delete:
                    v = u(g);
                }
                f.push(a(g, v, l, c)), r++;
              }
              return f;
            }),
              t &&
                t.tagName &&
                ("td" === t.tagName.toLowerCase() ||
                  "th" === t.tagName.toLowerCase()) &&
                ((h.colPos = t.cellIndex),
                t.parentElement &&
                  t.parentElement.tagName &&
                  "tr" === t.parentElement.tagName.toLowerCase() &&
                  (h.rowPos = t.parentElement.rowIndex)),
              (function () {
                for (var e = i.rows, t = 0; t < e.length; t++)
                  for (var n = e[t].cells, o = 0; o < n.length; o++)
                    l(e[t], n[o]);
              })();
          };
        (ot.where = {
          Row: 0,
          Column: 1,
        }),
          (ot.requestAction = {
            Add: 0,
            Delete: 1,
          }),
          (ot.resultAction = {
            Ignore: 0,
            SubtractSpanCount: 1,
            RemoveCell: 2,
            AddCell: 3,
            SumSpanCount: 4,
          });
        var it = (function () {
            function e() {
              !(function (e, t) {
                if (!(e instanceof t))
                  throw new TypeError("Cannot call a class as a function");
              })(this, e);
            }
            var t, n, o;
            return (
              (t = e),
              (n = [
                {
                  key: "tab",
                  value: function (e, t) {
                    var n = Ve.ancestor(e.commonAncestor(), Ve.isCell),
                      o = Ve.ancestor(n, Ve.isTable),
                      i = Ve.listDescendant(o, Ve.isCell),
                      r = Le[t ? "prev" : "next"](i, n);
                    r && Qe.create(r, 0).select();
                  },
                },
                {
                  key: "addRow",
                  value: function (e, t) {
                    for (
                      var n = Ve.ancestor(e.commonAncestor(), Ve.isCell),
                        o = Ce()(n).closest("tr"),
                        i = this.recoverAttributes(o),
                        r = Ce()("<tr" + i + "></tr>"),
                        a = new ot(
                          n,
                          ot.where.Row,
                          ot.requestAction.Add,
                          Ce()(o).closest("table")[0]
                        ).getActionList(),
                        s = 0;
                      s < a.length;
                      s++
                    ) {
                      var l = a[s],
                        c = this.recoverAttributes(l.baseCell);
                      switch (l.action) {
                        case ot.resultAction.AddCell:
                          r.append("<td" + c + ">" + Ve.blank + "</td>");
                          break;
                        case ot.resultAction.SumSpanCount:
                          if (
                            "top" === t &&
                            (l.baseCell.parent
                              ? l.baseCell.closest("tr").rowIndex
                              : 0) <= o[0].rowIndex
                          ) {
                            var u = Ce()("<div></div>")
                              .append(
                                Ce()(
                                  "<td" + c + ">" + Ve.blank + "</td>"
                                ).removeAttr("rowspan")
                              )
                              .html();
                            r.append(u);
                            break;
                          }
                          var d = parseInt(l.baseCell.rowSpan, 10);
                          d++, l.baseCell.setAttribute("rowSpan", d);
                      }
                    }
                    if ("top" === t) o.before(r);
                    else {
                      if (n.rowSpan > 1) {
                        var h = o[0].rowIndex + (n.rowSpan - 2);
                        return void Ce()(Ce()(o).parent().find("tr")[h]).after(
                          Ce()(r)
                        );
                      }
                      o.after(r);
                    }
                  },
                },
                {
                  key: "addCol",
                  value: function (e, t) {
                    var n = Ve.ancestor(e.commonAncestor(), Ve.isCell),
                      o = Ce()(n).closest("tr");
                    Ce()(o).siblings().push(o);
                    for (
                      var i = new ot(
                          n,
                          ot.where.Column,
                          ot.requestAction.Add,
                          Ce()(o).closest("table")[0]
                        ).getActionList(),
                        r = 0;
                      r < i.length;
                      r++
                    ) {
                      var a = i[r],
                        s = this.recoverAttributes(a.baseCell);
                      switch (a.action) {
                        case ot.resultAction.AddCell:
                          "right" === t
                            ? Ce()(a.baseCell).after(
                                "<td" + s + ">" + Ve.blank + "</td>"
                              )
                            : Ce()(a.baseCell).before(
                                "<td" + s + ">" + Ve.blank + "</td>"
                              );
                          break;
                        case ot.resultAction.SumSpanCount:
                          if ("right" === t) {
                            var l = parseInt(a.baseCell.colSpan, 10);
                            l++, a.baseCell.setAttribute("colSpan", l);
                          } else
                            Ce()(a.baseCell).before(
                              "<td" + s + ">" + Ve.blank + "</td>"
                            );
                      }
                    }
                  },
                },
                {
                  key: "recoverAttributes",
                  value: function (e) {
                    var t = "";
                    if (!e) return t;
                    for (var n = e.attributes || [], o = 0; o < n.length; o++)
                      "id" !== n[o].name.toLowerCase() &&
                        n[o].specified &&
                        (t += " " + n[o].name + "='" + n[o].value + "'");
                    return t;
                  },
                },
                {
                  key: "deleteRow",
                  value: function (e) {
                    for (
                      var t = Ve.ancestor(e.commonAncestor(), Ve.isCell),
                        n = Ce()(t).closest("tr"),
                        o = n.children("td, th").index(Ce()(t)),
                        i = n[0].rowIndex,
                        r = new ot(
                          t,
                          ot.where.Row,
                          ot.requestAction.Delete,
                          Ce()(n).closest("table")[0]
                        ).getActionList(),
                        a = 0;
                      a < r.length;
                      a++
                    )
                      if (r[a]) {
                        var s = r[a].baseCell,
                          l = r[a].virtualTable,
                          c = s.rowSpan && s.rowSpan > 1,
                          u = c ? parseInt(s.rowSpan, 10) : 0;
                        switch (r[a].action) {
                          case ot.resultAction.Ignore:
                            continue;
                          case ot.resultAction.AddCell:
                            var d = n.next("tr")[0];
                            if (!d) continue;
                            var h = n[0].cells[o];
                            c &&
                              (u > 2
                                ? (u--,
                                  d.insertBefore(h, d.cells[o]),
                                  d.cells[o].setAttribute("rowSpan", u),
                                  (d.cells[o].innerHTML = ""))
                                : 2 === u &&
                                  (d.insertBefore(h, d.cells[o]),
                                  d.cells[o].removeAttribute("rowSpan"),
                                  (d.cells[o].innerHTML = "")));
                            continue;
                          case ot.resultAction.SubtractSpanCount:
                            c &&
                              (u > 2
                                ? (u--,
                                  s.setAttribute("rowSpan", u),
                                  l.rowIndex !== i &&
                                    s.cellIndex === o &&
                                    (s.innerHTML = ""))
                                : 2 === u &&
                                  (s.removeAttribute("rowSpan"),
                                  l.rowIndex !== i &&
                                    s.cellIndex === o &&
                                    (s.innerHTML = "")));
                            continue;
                          case ot.resultAction.RemoveCell:
                            continue;
                        }
                      }
                    n.remove();
                  },
                },
                {
                  key: "deleteCol",
                  value: function (e) {
                    for (
                      var t = Ve.ancestor(e.commonAncestor(), Ve.isCell),
                        n = Ce()(t).closest("tr"),
                        o = n.children("td, th").index(Ce()(t)),
                        i = new ot(
                          t,
                          ot.where.Column,
                          ot.requestAction.Delete,
                          Ce()(n).closest("table")[0]
                        ).getActionList(),
                        r = 0;
                      r < i.length;
                      r++
                    )
                      if (i[r])
                        switch (i[r].action) {
                          case ot.resultAction.Ignore:
                            continue;
                          case ot.resultAction.SubtractSpanCount:
                            var a = i[r].baseCell;
                            if (a.colSpan && a.colSpan > 1) {
                              var s = a.colSpan ? parseInt(a.colSpan, 10) : 0;
                              s > 2
                                ? (s--,
                                  a.setAttribute("colSpan", s),
                                  a.cellIndex === o && (a.innerHTML = ""))
                                : 2 === s &&
                                  (a.removeAttribute("colSpan"),
                                  a.cellIndex === o && (a.innerHTML = ""));
                            }
                            continue;
                          case ot.resultAction.RemoveCell:
                            Ve.remove(i[r].baseCell, !0);
                            continue;
                        }
                  },
                },
                {
                  key: "createTable",
                  value: function (e, t, n) {
                    for (var o, i = [], r = 0; r < e; r++)
                      i.push("<td>" + Ve.blank + "</td>");
                    o = i.join("");
                    for (var a, s = [], l = 0; l < t; l++)
                      s.push("<tr>" + o + "</tr>");
                    a = s.join("");
                    var c = Ce()("<table>" + a + "</table>");
                    return (
                      n && n.tableClassName && c.addClass(n.tableClassName),
                      c[0]
                    );
                  },
                },
                {
                  key: "deleteTable",
                  value: function (e) {
                    var t = Ve.ancestor(e.commonAncestor(), Ve.isCell);
                    Ce()(t).closest("table").remove();
                  },
                },
              ]) && Q(t.prototype, n),
              o && Q(t, o),
              e
            );
          })(),
          rt = (function () {
            function e(t) {
              var n = this;
              !(function (e, t) {
                if (!(e instanceof t))
                  throw new TypeError("Cannot call a class as a function");
              })(this, e),
                (this.context = t),
                (this.$note = t.layoutInfo.note),
                (this.$editor = t.layoutInfo.editor),
                (this.$editable = t.layoutInfo.editable),
                (this.options = t.options),
                (this.lang = this.options.langInfo),
                (this.editable = this.$editable[0]),
                (this.lastRange = null),
                (this.snapshot = null),
                (this.style = new et()),
                (this.table = new it()),
                (this.typing = new nt(t)),
                (this.bullet = new tt()),
                (this.history = new Ze(t)),
                this.context.memo("help.escape", this.lang.help.escape),
                this.context.memo("help.undo", this.lang.help.undo),
                this.context.memo("help.redo", this.lang.help.redo),
                this.context.memo("help.tab", this.lang.help.tab),
                this.context.memo("help.untab", this.lang.help.untab),
                this.context.memo(
                  "help.insertParagraph",
                  this.lang.help.insertParagraph
                ),
                this.context.memo(
                  "help.insertOrderedList",
                  this.lang.help.insertOrderedList
                ),
                this.context.memo(
                  "help.insertUnorderedList",
                  this.lang.help.insertUnorderedList
                ),
                this.context.memo("help.indent", this.lang.help.indent),
                this.context.memo("help.outdent", this.lang.help.outdent),
                this.context.memo("help.formatPara", this.lang.help.formatPara),
                this.context.memo(
                  "help.insertHorizontalRule",
                  this.lang.help.insertHorizontalRule
                ),
                this.context.memo("help.fontName", this.lang.help.fontName);
              for (
                var o = [
                    "bold",
                    "italic",
                    "underline",
                    "strikethrough",
                    "superscript",
                    "subscript",
                    "justifyLeft",
                    "justifyCenter",
                    "justifyRight",
                    "justifyFull",
                    "formatBlock",
                    "removeFormat",
                    "backColor",
                  ],
                  i = 0,
                  r = o.length;
                i < r;
                i++
              )
                (this[o[i]] = (function (e) {
                  return function (t) {
                    n.beforeCommand(),
                      document.execCommand(e, !1, t),
                      n.afterCommand(!0);
                  };
                })(o[i])),
                  this.context.memo("help." + o[i], this.lang.help[o[i]]);
              (this.fontName = this.wrapCommand(function (e) {
                return n.fontStyling("font-family", Ie.validFontName(e));
              })),
                (this.fontSize = this.wrapCommand(function (e) {
                  var t = n.currentStyle()["font-size-unit"];
                  return n.fontStyling("font-size", e + t);
                })),
                (this.fontSizeUnit = this.wrapCommand(function (e) {
                  var t = n.currentStyle()["font-size"];
                  return n.fontStyling("font-size", t + e);
                }));
              for (var a = 1; a <= 6; a++)
                (this["formatH" + a] = (function (e) {
                  return function () {
                    n.formatBlock("H" + e);
                  };
                })(a)),
                  this.context.memo(
                    "help.formatH" + a,
                    this.lang.help["formatH" + a]
                  );
              (this.insertParagraph = this.wrapCommand(function () {
                n.typing.insertParagraph(n.editable);
              })),
                (this.insertOrderedList = this.wrapCommand(function () {
                  n.bullet.insertOrderedList(n.editable);
                })),
                (this.insertUnorderedList = this.wrapCommand(function () {
                  n.bullet.insertUnorderedList(n.editable);
                })),
                (this.indent = this.wrapCommand(function () {
                  n.bullet.indent(n.editable);
                })),
                (this.outdent = this.wrapCommand(function () {
                  n.bullet.outdent(n.editable);
                })),
                (this.insertNode = this.wrapCommand(function (e) {
                  n.isLimited(Ce()(e).text().length) ||
                    (n.getLastRange().insertNode(e),
                    n.setLastRange(Qe.createFromNodeAfter(e).select()));
                })),
                (this.insertText = this.wrapCommand(function (e) {
                  if (!n.isLimited(e.length)) {
                    var t = n.getLastRange().insertNode(Ve.createText(e));
                    n.setLastRange(Qe.create(t, Ve.nodeLength(t)).select());
                  }
                })),
                (this.pasteHTML = this.wrapCommand(function (e) {
                  if (!n.isLimited(e.length)) {
                    e = n.context.invoke("codeview.purify", e);
                    var t = n.getLastRange().pasteHTML(e);
                    n.setLastRange(Qe.createFromNodeAfter(Le.last(t)).select());
                  }
                })),
                (this.formatBlock = this.wrapCommand(function (e, t) {
                  var o = n.options.callbacks.onApplyCustomStyle;
                  o
                    ? o.call(n, t, n.context, n.onFormatBlock)
                    : n.onFormatBlock(e, t);
                })),
                (this.insertHorizontalRule = this.wrapCommand(function () {
                  var e = n.getLastRange().insertNode(Ve.create("HR"));
                  e.nextSibling &&
                    n.setLastRange(
                      Qe.create(e.nextSibling, 0).normalize().select()
                    );
                })),
                (this.lineHeight = this.wrapCommand(function (e) {
                  n.style.stylePara(n.getLastRange(), {
                    lineHeight: e,
                  });
                })),
                (this.createLink = this.wrapCommand(function (e) {
                  var t = e.url,
                    o = e.text,
                    i = e.isNewWindow,
                    r = e.checkProtocol,
                    a = e.range || n.getLastRange(),
                    s = o.length - a.toString().length;
                  if (!(s > 0 && n.isLimited(s))) {
                    var l = a.toString() !== o;
                    "string" == typeof t && (t = t.trim()),
                      n.options.onCreateLink
                        ? (t = n.options.onCreateLink(t))
                        : r &&
                          (t = /^([A-Za-z][A-Za-z0-9+-.]*\:|#|\/)/.test(t)
                            ? t
                            : n.options.defaultProtocol + t);
                    var c = [];
                    if (l) {
                      var u = (a = a.deleteContents()).insertNode(
                        Ce()("<A>" + o + "</A>")[0]
                      );
                      c.push(u);
                    } else
                      c = n.style.styleNodes(a, {
                        nodeName: "A",
                        expandClosestSibling: !0,
                        onlyPartialContains: !0,
                      });
                    Ce.a.each(c, function (e, n) {
                      Ce()(n).attr("href", t),
                        i
                          ? Ce()(n).attr("target", "_blank")
                          : Ce()(n).removeAttr("target");
                    }),
                      n.setLastRange(n.createRangeFromList(c).select());
                  }
                })),
                (this.color = this.wrapCommand(function (e) {
                  var t = e.foreColor,
                    n = e.backColor;
                  t && document.execCommand("foreColor", !1, t),
                    n && document.execCommand("backColor", !1, n);
                })),
                (this.foreColor = this.wrapCommand(function (e) {
                  document.execCommand("foreColor", !1, e);
                })),
                (this.insertTable = this.wrapCommand(function (e) {
                  var t = e.split("x");
                  n.getLastRange()
                    .deleteContents()
                    .insertNode(n.table.createTable(t[0], t[1], n.options));
                })),
                (this.removeMedia = this.wrapCommand(function () {
                  var e = Ce()(n.restoreTarget()).parent();
                  e.closest("figure").length
                    ? e.closest("figure").remove()
                    : (e = Ce()(n.restoreTarget()).detach()),
                    n.context.triggerEvent("media.delete", e, n.$editable);
                })),
                (this.floatMe = this.wrapCommand(function (e) {
                  var t = Ce()(n.restoreTarget());
                  t.toggleClass("note-float-left", "left" === e),
                    t.toggleClass("note-float-right", "right" === e),
                    t.css("float", "none" === e ? "" : e);
                })),
                (this.resize = this.wrapCommand(function (e) {
                  var t = Ce()(n.restoreTarget());
                  0 === (e = parseFloat(e))
                    ? t.css("width", "")
                    : t.css({
                        width: 100 * e + "%",
                        height: "",
                      });
                }));
            }
            var t, n, o;
            return (
              (t = e),
              (n = [
                {
                  key: "initialize",
                  value: function () {
                    var e = this;
                    this.$editable
                      .on("keydown", function (t) {
                        if (
                          (t.keyCode === Xe.code.ENTER &&
                            e.context.triggerEvent("enter", t),
                          e.context.triggerEvent("keydown", t),
                          (e.snapshot = e.history.makeSnapshot()),
                          (e.hasKeyShortCut = !1),
                          t.isDefaultPrevented() ||
                            (e.options.shortcuts
                              ? (e.hasKeyShortCut = e.handleKeyMap(t))
                              : e.preventDefaultEditableShortCuts(t)),
                          e.isLimited(1, t))
                        ) {
                          var n = e.getLastRange();
                          if (n.eo - n.so == 0) return !1;
                        }
                        e.setLastRange(),
                          e.options.recordEveryKeystroke &&
                            !1 === e.hasKeyShortCut &&
                            e.history.recordUndo();
                      })
                      .on("keyup", function (t) {
                        e.setLastRange(), e.context.triggerEvent("keyup", t);
                      })
                      .on("focus", function (t) {
                        e.setLastRange(), e.context.triggerEvent("focus", t);
                      })
                      .on("blur", function (t) {
                        e.context.triggerEvent("blur", t);
                      })
                      .on("mousedown", function (t) {
                        e.context.triggerEvent("mousedown", t);
                      })
                      .on("mouseup", function (t) {
                        e.setLastRange(),
                          e.history.recordUndo(),
                          e.context.triggerEvent("mouseup", t);
                      })
                      .on("scroll", function (t) {
                        e.context.triggerEvent("scroll", t);
                      })
                      .on("paste", function (t) {
                        e.setLastRange(), e.context.triggerEvent("paste", t);
                      })
                      .on("input", function () {
                        e.isLimited(0) &&
                          e.snapshot &&
                          e.history.applySnapshot(e.snapshot);
                      }),
                      this.$editable.attr(
                        "spellcheck",
                        this.options.spellCheck
                      ),
                      this.$editable.attr(
                        "autocorrect",
                        this.options.spellCheck
                      ),
                      this.options.disableGrammar &&
                        this.$editable.attr("data-gramm", !1),
                      this.$editable.html(Ve.html(this.$note) || Ve.emptyPara),
                      this.$editable.on(
                        Ie.inputEventName,
                        Pe.debounce(function () {
                          e.context.triggerEvent(
                            "change",
                            e.$editable.html(),
                            e.$editable
                          );
                        }, 10)
                      ),
                      this.$editable
                        .on("focusin", function (t) {
                          e.context.triggerEvent("focusin", t);
                        })
                        .on("focusout", function (t) {
                          e.context.triggerEvent("focusout", t);
                        }),
                      this.options.airMode
                        ? this.options.overrideContextMenu &&
                          this.$editor.on("contextmenu", function (t) {
                            return e.context.triggerEvent("contextmenu", t), !1;
                          })
                        : (this.options.width &&
                            this.$editor.outerWidth(this.options.width),
                          this.options.height &&
                            this.$editable.outerHeight(this.options.height),
                          this.options.maxHeight &&
                            this.$editable.css(
                              "max-height",
                              this.options.maxHeight
                            ),
                          this.options.minHeight &&
                            this.$editable.css(
                              "min-height",
                              this.options.minHeight
                            )),
                      this.history.recordUndo(),
                      this.setLastRange();
                  },
                },
                {
                  key: "destroy",
                  value: function () {
                    this.$editable.off();
                  },
                },
                {
                  key: "handleKeyMap",
                  value: function (e) {
                    var t = this.options.keyMap[Ie.isMac ? "mac" : "pc"],
                      n = [];
                    e.metaKey && n.push("CMD"),
                      e.ctrlKey && !e.altKey && n.push("CTRL"),
                      e.shiftKey && n.push("SHIFT");
                    var o = Xe.nameFromCode[e.keyCode];
                    o && n.push(o);
                    var i = t[n.join("+")];
                    if ("TAB" !== o || this.options.tabDisable)
                      if (i) {
                        if (!1 !== this.context.invoke(i))
                          return e.preventDefault(), !0;
                      } else Xe.isEdit(e.keyCode) && this.afterCommand();
                    else this.afterCommand();
                    return !1;
                  },
                },
                {
                  key: "preventDefaultEditableShortCuts",
                  value: function (e) {
                    (e.ctrlKey || e.metaKey) &&
                      Le.contains([66, 73, 85], e.keyCode) &&
                      e.preventDefault();
                  },
                },
                {
                  key: "isLimited",
                  value: function (e, t) {
                    return (
                      (e = e || 0),
                      (void 0 === t ||
                        !(
                          Xe.isMove(t.keyCode) ||
                          Xe.isNavigation(t.keyCode) ||
                          t.ctrlKey ||
                          t.metaKey ||
                          Le.contains(
                            [Xe.code.BACKSPACE, Xe.code.DELETE],
                            t.keyCode
                          )
                        )) &&
                        this.options.maxTextLength > 0 &&
                        this.$editable.text().length + e >
                          this.options.maxTextLength
                    );
                  },
                },
                {
                  key: "createRange",
                  value: function () {
                    return (
                      this.focus(), this.setLastRange(), this.getLastRange()
                    );
                  },
                },
                {
                  key: "createRangeFromList",
                  value: function (e) {
                    var t = Qe.createFromNodeBefore(Le.head(e)).getStartPoint(),
                      n = Qe.createFromNodeAfter(Le.last(e)).getEndPoint();
                    return Qe.create(t.node, t.offset, n.node, n.offset);
                  },
                },
                {
                  key: "setLastRange",
                  value: function (e) {
                    e
                      ? (this.lastRange = e)
                      : ((this.lastRange = Qe.create(this.editable)),
                        0 ===
                          Ce()(this.lastRange.sc).closest(".note-editable")
                            .length &&
                          (this.lastRange = Qe.createFromBodyElement(
                            this.editable
                          )));
                  },
                },
                {
                  key: "getLastRange",
                  value: function () {
                    return (
                      this.lastRange || this.setLastRange(), this.lastRange
                    );
                  },
                },
                {
                  key: "saveRange",
                  value: function (e) {
                    e && this.getLastRange().collapse().select();
                  },
                },
                {
                  key: "restoreRange",
                  value: function () {
                    this.lastRange && (this.lastRange.select(), this.focus());
                  },
                },
                {
                  key: "saveTarget",
                  value: function (e) {
                    this.$editable.data("target", e);
                  },
                },
                {
                  key: "clearTarget",
                  value: function () {
                    this.$editable.removeData("target");
                  },
                },
                {
                  key: "restoreTarget",
                  value: function () {
                    return this.$editable.data("target");
                  },
                },
                {
                  key: "currentStyle",
                  value: function () {
                    var e = Qe.create();
                    return (
                      e && (e = e.normalize()),
                      e
                        ? this.style.current(e)
                        : this.style.fromNode(this.$editable)
                    );
                  },
                },
                {
                  key: "styleFromNode",
                  value: function (e) {
                    return this.style.fromNode(e);
                  },
                },
                {
                  key: "undo",
                  value: function () {
                    this.context.triggerEvent(
                      "before.command",
                      this.$editable.html()
                    ),
                      this.history.undo(),
                      this.context.triggerEvent(
                        "change",
                        this.$editable.html(),
                        this.$editable
                      );
                  },
                },
                {
                  key: "commit",
                  value: function () {
                    this.context.triggerEvent(
                      "before.command",
                      this.$editable.html()
                    ),
                      this.history.commit(),
                      this.context.triggerEvent(
                        "change",
                        this.$editable.html(),
                        this.$editable
                      );
                  },
                },
                {
                  key: "redo",
                  value: function () {
                    this.context.triggerEvent(
                      "before.command",
                      this.$editable.html()
                    ),
                      this.history.redo(),
                      this.context.triggerEvent(
                        "change",
                        this.$editable.html(),
                        this.$editable
                      );
                  },
                },
                {
                  key: "beforeCommand",
                  value: function () {
                    this.context.triggerEvent(
                      "before.command",
                      this.$editable.html()
                    ),
                      document.execCommand(
                        "styleWithCSS",
                        !1,
                        this.options.styleWithCSS
                      ),
                      this.focus();
                  },
                },
                {
                  key: "afterCommand",
                  value: function (e) {
                    this.normalizeContent(),
                      this.history.recordUndo(),
                      e ||
                        this.context.triggerEvent(
                          "change",
                          this.$editable.html(),
                          this.$editable
                        );
                  },
                },
                {
                  key: "tab",
                  value: function () {
                    var e = this.getLastRange();
                    if (e.isCollapsed() && e.isOnCell()) this.table.tab(e);
                    else {
                      if (0 === this.options.tabSize) return !1;
                      this.isLimited(this.options.tabSize) ||
                        (this.beforeCommand(),
                        this.typing.insertTab(e, this.options.tabSize),
                        this.afterCommand());
                    }
                  },
                },
                {
                  key: "untab",
                  value: function () {
                    var e = this.getLastRange();
                    if (e.isCollapsed() && e.isOnCell()) this.table.tab(e, !0);
                    else if (0 === this.options.tabSize) return !1;
                  },
                },
                {
                  key: "wrapCommand",
                  value: function (e) {
                    return function () {
                      this.beforeCommand(),
                        e.apply(this, arguments),
                        this.afterCommand();
                    };
                  },
                },
                {
                  key: "insertImage",
                  value: function (e, t) {
                    var n,
                      o = this;
                    return ((n = e),
                    Ce.a
                      .Deferred(function (e) {
                        var t = Ce()("<img>");
                        t.one("load", function () {
                          t.off("error abort"), e.resolve(t);
                        })
                          .one("error abort", function () {
                            t.off("load").detach(), e.reject(t);
                          })
                          .css({
                            display: "none",
                          })
                          .appendTo(document.body)
                          .attr("src", n);
                      })
                      .promise())
                      .then(function (e) {
                        o.beforeCommand(),
                          "function" == typeof t
                            ? t(e)
                            : ("string" == typeof t &&
                                e.attr("data-filename", t),
                              e.css(
                                "width",
                                Math.min(o.$editable.width(), e.width())
                              )),
                          e.show(),
                          o.getLastRange().insertNode(e[0]),
                          o.setLastRange(Qe.createFromNodeAfter(e[0]).select()),
                          o.afterCommand();
                      })
                      .fail(function (e) {
                        o.context.triggerEvent("image.upload.error", e);
                      });
                  },
                },
                {
                  key: "insertImagesAsDataURL",
                  value: function (e) {
                    var t = this;
                    Ce.a.each(e, function (e, n) {
                      var o = n.name;
                      t.options.maximumImageFileSize &&
                      t.options.maximumImageFileSize < n.size
                        ? t.context.triggerEvent(
                            "image.upload.error",
                            t.lang.image.maximumFileSizeError
                          )
                        : (function (e) {
                            return Ce.a
                              .Deferred(function (t) {
                                Ce.a
                                  .extend(new FileReader(), {
                                    onload: function (e) {
                                      var n = e.target.result;
                                      t.resolve(n);
                                    },
                                    onerror: function (e) {
                                      t.reject(e);
                                    },
                                  })
                                  .readAsDataURL(e);
                              })
                              .promise();
                          })(n)
                            .then(function (e) {
                              return t.insertImage(e, o);
                            })
                            .fail(function () {
                              t.context.triggerEvent("image.upload.error");
                            });
                    });
                  },
                },
                {
                  key: "insertImagesOrCallback",
                  value: function (e) {
                    this.options.callbacks.onImageUpload
                      ? this.context.triggerEvent("image.upload", e)
                      : this.insertImagesAsDataURL(e);
                  },
                },
                {
                  key: "getSelectedText",
                  value: function () {
                    var e = this.getLastRange();
                    return (
                      e.isOnAnchor() &&
                        (e = Qe.createFromNode(Ve.ancestor(e.sc, Ve.isAnchor))),
                      e.toString()
                    );
                  },
                },
                {
                  key: "onFormatBlock",
                  value: function (e, t) {
                    if (
                      (document.execCommand(
                        "FormatBlock",
                        !1,
                        Ie.isMSIE ? "<" + e + ">" : e
                      ),
                      t &&
                        t.length &&
                        (t[0].tagName.toUpperCase() !== e.toUpperCase() &&
                          (t = t.find(e)),
                        t && t.length))
                    ) {
                      var n = t[0].className || "";
                      if (n) {
                        var o = this.createRange();
                        Ce()([o.sc, o.ec]).closest(e).addClass(n);
                      }
                    }
                  },
                },
                {
                  key: "formatPara",
                  value: function () {
                    this.formatBlock("P");
                  },
                },
                {
                  key: "fontStyling",
                  value: function (e, t) {
                    var n = this.getLastRange();
                    if ("" !== n) {
                      var o = this.style.styleNodes(n);
                      if (
                        (this.$editor.find(".note-status-output").html(""),
                        Ce()(o).css(e, t),
                        n.isCollapsed())
                      ) {
                        var i = Le.head(o);
                        i &&
                          !Ve.nodeLength(i) &&
                          ((i.innerHTML = Ve.ZERO_WIDTH_NBSP_CHAR),
                          Qe.createFromNode(i.firstChild).select(),
                          this.setLastRange(),
                          this.$editable.data("bogus", i));
                      } else
                        this.setLastRange(this.createRangeFromList(o).select());
                    } else {
                      var r = Ce.a.now();
                      this.$editor
                        .find(".note-status-output")
                        .html(
                          '<div id="note-status-output-' +
                            r +
                            '" class="alert alert-info">' +
                            this.lang.output.noSelection +
                            "</div>"
                        ),
                        setTimeout(function () {
                          Ce()("#note-status-output-" + r).remove();
                        }, 5e3);
                    }
                  },
                },
                {
                  key: "unlink",
                  value: function () {
                    var e = this.getLastRange();
                    if (e.isOnAnchor()) {
                      var t = Ve.ancestor(e.sc, Ve.isAnchor);
                      (e = Qe.createFromNode(t)).select(),
                        this.setLastRange(),
                        this.beforeCommand(),
                        document.execCommand("unlink"),
                        this.afterCommand();
                    }
                  },
                },
                {
                  key: "getLinkInfo",
                  value: function () {
                    var e = this.getLastRange().expand(Ve.isAnchor),
                      t = Ce()(Le.head(e.nodes(Ve.isAnchor))),
                      n = {
                        range: e,
                        text: e.toString(),
                        url: t.length ? t.attr("href") : "",
                      };
                    return (
                      t.length &&
                        (n.isNewWindow = "_blank" === t.attr("target")),
                      n
                    );
                  },
                },
                {
                  key: "addRow",
                  value: function (e) {
                    var t = this.getLastRange(this.$editable);
                    t.isCollapsed() &&
                      t.isOnCell() &&
                      (this.beforeCommand(),
                      this.table.addRow(t, e),
                      this.afterCommand());
                  },
                },
                {
                  key: "addCol",
                  value: function (e) {
                    var t = this.getLastRange(this.$editable);
                    t.isCollapsed() &&
                      t.isOnCell() &&
                      (this.beforeCommand(),
                      this.table.addCol(t, e),
                      this.afterCommand());
                  },
                },
                {
                  key: "deleteRow",
                  value: function () {
                    var e = this.getLastRange(this.$editable);
                    e.isCollapsed() &&
                      e.isOnCell() &&
                      (this.beforeCommand(),
                      this.table.deleteRow(e),
                      this.afterCommand());
                  },
                },
                {
                  key: "deleteCol",
                  value: function () {
                    var e = this.getLastRange(this.$editable);
                    e.isCollapsed() &&
                      e.isOnCell() &&
                      (this.beforeCommand(),
                      this.table.deleteCol(e),
                      this.afterCommand());
                  },
                },
                {
                  key: "deleteTable",
                  value: function () {
                    var e = this.getLastRange(this.$editable);
                    e.isCollapsed() &&
                      e.isOnCell() &&
                      (this.beforeCommand(),
                      this.table.deleteTable(e),
                      this.afterCommand());
                  },
                },
                {
                  key: "resizeTo",
                  value: function (e, t, n) {
                    var o;
                    if (n) {
                      var i = e.y / e.x,
                        r = t.data("ratio");
                      o = {
                        width: r > i ? e.x : e.y / r,
                        height: r > i ? e.x * r : e.y,
                      };
                    } else
                      o = {
                        width: e.x,
                        height: e.y,
                      };
                    t.css(o);
                  },
                },
                {
                  key: "hasFocus",
                  value: function () {
                    return this.$editable.is(":focus");
                  },
                },
                {
                  key: "focus",
                  value: function () {
                    this.hasFocus() || this.$editable.focus();
                  },
                },
                {
                  key: "isEmpty",
                  value: function () {
                    return (
                      Ve.isEmpty(this.$editable[0]) ||
                      Ve.emptyPara === this.$editable.html()
                    );
                  },
                },
                {
                  key: "empty",
                  value: function () {
                    this.context.invoke("code", Ve.emptyPara);
                  },
                },
                {
                  key: "normalizeContent",
                  value: function () {
                    this.$editable[0].normalize();
                  },
                },
              ]) && J(t.prototype, n),
              o && J(t, o),
              e
            );
          })(),
          at = (function () {
            function e(t) {
              !(function (e, t) {
                if (!(e instanceof t))
                  throw new TypeError("Cannot call a class as a function");
              })(this, e),
                (this.context = t),
                (this.$editable = t.layoutInfo.editable);
            }
            var t, n, o;
            return (
              (t = e),
              (n = [
                {
                  key: "initialize",
                  value: function () {
                    this.$editable.on("paste", this.pasteByEvent.bind(this));
                  },
                },
                {
                  key: "pasteByEvent",
                  value: function (e) {
                    var t = this,
                      n = e.originalEvent.clipboardData;
                    if (n && n.items && n.items.length) {
                      var o =
                        n.items.length > 1 ? n.items[1] : Le.head(n.items);
                      "file" === o.kind && -1 !== o.type.indexOf("image/")
                        ? (this.context.invoke(
                            "editor.insertImagesOrCallback",
                            [o.getAsFile()]
                          ),
                          e.preventDefault())
                        : "string" === o.kind &&
                          this.context.invoke(
                            "editor.isLimited",
                            n.getData("Text").length
                          ) &&
                          e.preventDefault();
                    } else if (window.clipboardData) {
                      var i = window.clipboardData.getData("text");
                      this.context.invoke("editor.isLimited", i.length) &&
                        e.preventDefault();
                    }
                    setTimeout(function () {
                      t.context.invoke("editor.afterCommand");
                    }, 10);
                  },
                },
              ]) && X(t.prototype, n),
              o && X(t, o),
              e
            );
          })(),
          st = (function () {
            function e(t) {
              !(function (e, t) {
                if (!(e instanceof t))
                  throw new TypeError("Cannot call a class as a function");
              })(this, e),
                (this.context = t),
                (this.$eventListener = Ce()(document)),
                (this.$editor = t.layoutInfo.editor),
                (this.$editable = t.layoutInfo.editable),
                (this.options = t.options),
                (this.lang = this.options.langInfo),
                (this.documentEventHandlers = {}),
                (this.$dropzone = Ce()(
                  [
                    '<div class="note-dropzone">',
                    '<div class="note-dropzone-message"></div>',
                    "</div>",
                  ].join("")
                ).prependTo(this.$editor));
            }
            var t, n, o;
            return (
              (t = e),
              (n = [
                {
                  key: "initialize",
                  value: function () {
                    this.options.disableDragAndDrop
                      ? ((this.documentEventHandlers.onDrop = function (e) {
                          e.preventDefault();
                        }),
                        (this.$eventListener = this.$dropzone),
                        this.$eventListener.on(
                          "drop",
                          this.documentEventHandlers.onDrop
                        ))
                      : this.attachDragAndDropEvent();
                  },
                },
                {
                  key: "attachDragAndDropEvent",
                  value: function () {
                    var e = this,
                      t = Ce()(),
                      n = this.$dropzone.find(".note-dropzone-message");
                    (this.documentEventHandlers.onDragenter = function (o) {
                      var i = e.context.invoke("codeview.isActivated"),
                        r = e.$editor.width() > 0 && e.$editor.height() > 0;
                      i ||
                        t.length ||
                        !r ||
                        (e.$editor.addClass("dragover"),
                        e.$dropzone.width(e.$editor.width()),
                        e.$dropzone.height(e.$editor.height()),
                        n.text(e.lang.image.dragImageHere)),
                        (t = t.add(o.target));
                    }),
                      (this.documentEventHandlers.onDragleave = function (n) {
                        ((t = t.not(n.target)).length &&
                          "BODY" !== n.target.nodeName) ||
                          ((t = Ce()()), e.$editor.removeClass("dragover"));
                      }),
                      (this.documentEventHandlers.onDrop = function () {
                        (t = Ce()()), e.$editor.removeClass("dragover");
                      }),
                      this.$eventListener
                        .on("dragenter", this.documentEventHandlers.onDragenter)
                        .on("dragleave", this.documentEventHandlers.onDragleave)
                        .on("drop", this.documentEventHandlers.onDrop),
                      this.$dropzone
                        .on("dragenter", function () {
                          e.$dropzone.addClass("hover"),
                            n.text(e.lang.image.dropImage);
                        })
                        .on("dragleave", function () {
                          e.$dropzone.removeClass("hover"),
                            n.text(e.lang.image.dragImageHere);
                        }),
                      this.$dropzone
                        .on("drop", function (t) {
                          var n = t.originalEvent.dataTransfer;
                          t.preventDefault(),
                            n && n.files && n.files.length
                              ? (e.$editable.focus(),
                                e.context.invoke(
                                  "editor.insertImagesOrCallback",
                                  n.files
                                ))
                              : Ce.a.each(n.types, function (t, o) {
                                  if (
                                    !(o.toLowerCase().indexOf("_moz_") > -1)
                                  ) {
                                    var i = n.getData(o);
                                    o.toLowerCase().indexOf("text") > -1
                                      ? e.context.invoke("editor.pasteHTML", i)
                                      : Ce()(i).each(function (t, n) {
                                          e.context.invoke(
                                            "editor.insertNode",
                                            n
                                          );
                                        });
                                  }
                                });
                        })
                        .on("dragover", !1);
                  },
                },
                {
                  key: "destroy",
                  value: function () {
                    var e = this;
                    Object.keys(this.documentEventHandlers).forEach(function (
                      t
                    ) {
                      e.$eventListener.off(
                        t.substr(2).toLowerCase(),
                        e.documentEventHandlers[t]
                      );
                    }),
                      (this.documentEventHandlers = {});
                  },
                },
              ]) && Z(t.prototype, n),
              o && Z(t, o),
              e
            );
          })(),
          lt = (function () {
            function e(t) {
              !(function (e, t) {
                if (!(e instanceof t))
                  throw new TypeError("Cannot call a class as a function");
              })(this, e),
                (this.context = t),
                (this.$editor = t.layoutInfo.editor),
                (this.$editable = t.layoutInfo.editable),
                (this.$codable = t.layoutInfo.codable),
                (this.options = t.options),
                (this.CodeMirrorConstructor = window.CodeMirror),
                this.options.codemirror.CodeMirrorConstructor &&
                  (this.CodeMirrorConstructor =
                    this.options.codemirror.CodeMirrorConstructor);
            }
            var t, n, o;
            return (
              (t = e),
              (n = [
                {
                  key: "sync",
                  value: function (e) {
                    var t = this.isActivated(),
                      n = this.CodeMirrorConstructor;
                    t &&
                      (e
                        ? n
                          ? this.$codable.data("cmEditor").getDoc().setValue(e)
                          : this.$codable.val(e)
                        : n && this.$codable.data("cmEditor").save());
                  },
                },
                {
                  key: "initialize",
                  value: function () {
                    var e = this;
                    this.$codable.on("keyup", function (t) {
                      t.keyCode === Xe.code.ESCAPE && e.deactivate();
                    });
                  },
                },
                {
                  key: "isActivated",
                  value: function () {
                    return this.$editor.hasClass("codeview");
                  },
                },
                {
                  key: "toggle",
                  value: function () {
                    this.isActivated() ? this.deactivate() : this.activate(),
                      this.context.triggerEvent("codeview.toggled");
                  },
                },
                {
                  key: "purify",
                  value: function (e) {
                    if (
                      this.options.codeviewFilter &&
                      ((e = e.replace(this.options.codeviewFilterRegex, "")),
                      this.options.codeviewIframeFilter)
                    ) {
                      var t = this.options.codeviewIframeWhitelistSrc.concat(
                        this.options.codeviewIframeWhitelistSrcBase
                      );
                      e = e.replace(
                        /(<iframe.*?>.*?(?:<\/iframe>)?)/gi,
                        function (e) {
                          if (
                            /<.+src(?==?('|"|\s)?)[\s\S]+src(?=('|"|\s)?)[^>]*?>/i.test(
                              e
                            )
                          )
                            return "";
                          var n,
                            o = ee(t);
                          try {
                            for (o.s(); !(n = o.n()).done; ) {
                              var i = n.value;
                              if (
                                new RegExp(
                                  'src="(https?:)?//' +
                                    i.replace(
                                      /[-\/\\^$*+?.()|[\]{}]/g,
                                      "\\$&"
                                    ) +
                                    '/(.+)"'
                                ).test(e)
                              )
                                return e;
                            }
                          } catch (e) {
                            o.e(e);
                          } finally {
                            o.f();
                          }
                          return "";
                        }
                      );
                    }
                    return e;
                  },
                },
                {
                  key: "activate",
                  value: function () {
                    var e = this,
                      t = this.CodeMirrorConstructor;
                    if (
                      (this.$codable.val(
                        Ve.html(this.$editable, this.options.prettifyHtml)
                      ),
                      this.$codable.height(this.$editable.height()),
                      this.context.invoke("toolbar.updateCodeview", !0),
                      this.context.invoke("airPopover.updateCodeview", !0),
                      this.$editor.addClass("codeview"),
                      this.$codable.focus(),
                      t)
                    ) {
                      var n = t.fromTextArea(
                        this.$codable[0],
                        this.options.codemirror
                      );
                      if (this.options.codemirror.tern) {
                        var o = new t.TernServer(this.options.codemirror.tern);
                        (n.ternServer = o),
                          n.on("cursorActivity", function (e) {
                            o.updateArgHints(e);
                          });
                      }
                      n.on("blur", function (t) {
                        e.context.triggerEvent(
                          "blur.codeview",
                          n.getValue(),
                          t
                        );
                      }),
                        n.on("change", function () {
                          e.context.triggerEvent(
                            "change.codeview",
                            n.getValue(),
                            n
                          );
                        }),
                        n.setSize(null, this.$editable.outerHeight()),
                        this.$codable.data("cmEditor", n);
                    } else
                      this.$codable.on("blur", function (t) {
                        e.context.triggerEvent(
                          "blur.codeview",
                          e.$codable.val(),
                          t
                        );
                      }),
                        this.$codable.on("input", function () {
                          e.context.triggerEvent(
                            "change.codeview",
                            e.$codable.val(),
                            e.$codable
                          );
                        });
                  },
                },
                {
                  key: "deactivate",
                  value: function () {
                    if (this.CodeMirrorConstructor) {
                      var e = this.$codable.data("cmEditor");
                      this.$codable.val(e.getValue()), e.toTextArea();
                    }
                    var t = this.purify(
                        Ve.value(this.$codable, this.options.prettifyHtml) ||
                          Ve.emptyPara
                      ),
                      n = this.$editable.html() !== t;
                    this.$editable.html(t),
                      this.$editable.height(
                        this.options.height ? this.$codable.height() : "auto"
                      ),
                      this.$editor.removeClass("codeview"),
                      n &&
                        this.context.triggerEvent(
                          "change",
                          this.$editable.html(),
                          this.$editable
                        ),
                      this.$editable.focus(),
                      this.context.invoke("toolbar.updateCodeview", !1),
                      this.context.invoke("airPopover.updateCodeview", !1);
                  },
                },
                {
                  key: "destroy",
                  value: function () {
                    this.isActivated() && this.deactivate();
                  },
                },
              ]) && ne(t.prototype, n),
              o && ne(t, o),
              e
            );
          })(),
          ct = (function () {
            function e(t) {
              !(function (e, t) {
                if (!(e instanceof t))
                  throw new TypeError("Cannot call a class as a function");
              })(this, e),
                (this.$document = Ce()(document)),
                (this.$statusbar = t.layoutInfo.statusbar),
                (this.$editable = t.layoutInfo.editable),
                (this.options = t.options);
            }
            var t, n, o;
            return (
              (t = e),
              (n = [
                {
                  key: "initialize",
                  value: function () {
                    var e = this;
                    this.options.airMode || this.options.disableResizeEditor
                      ? this.destroy()
                      : this.$statusbar.on("mousedown", function (t) {
                          t.preventDefault(), t.stopPropagation();
                          var n =
                              e.$editable.offset().top -
                              e.$document.scrollTop(),
                            o = function (t) {
                              var o = t.clientY - (n + 24);
                              (o =
                                e.options.minheight > 0
                                  ? Math.max(o, e.options.minheight)
                                  : o),
                                (o =
                                  e.options.maxHeight > 0
                                    ? Math.min(o, e.options.maxHeight)
                                    : o),
                                e.$editable.height(o);
                            };
                          e.$document
                            .on("mousemove", o)
                            .one("mouseup", function () {
                              e.$document.off("mousemove", o);
                            });
                        });
                  },
                },
                {
                  key: "destroy",
                  value: function () {
                    this.$statusbar.off(), this.$statusbar.addClass("locked");
                  },
                },
              ]) && oe(t.prototype, n),
              o && oe(t, o),
              e
            );
          })(),
          ut = (function () {
            function e(t) {
              var n = this;
              !(function (e, t) {
                if (!(e instanceof t))
                  throw new TypeError("Cannot call a class as a function");
              })(this, e),
                (this.context = t),
                (this.$editor = t.layoutInfo.editor),
                (this.$toolbar = t.layoutInfo.toolbar),
                (this.$editable = t.layoutInfo.editable),
                (this.$codable = t.layoutInfo.codable),
                (this.$window = Ce()(window)),
                (this.$scrollbar = Ce()("html, body")),
                (this.onResize = function () {
                  n.resizeTo({
                    h: n.$window.height() - n.$toolbar.outerHeight(),
                  });
                });
            }
            var t, n, o;
            return (
              (t = e),
              (n = [
                {
                  key: "resizeTo",
                  value: function (e) {
                    this.$editable.css("height", e.h),
                      this.$codable.css("height", e.h),
                      this.$codable.data("cmeditor") &&
                        this.$codable.data("cmeditor").setsize(null, e.h);
                  },
                },
                {
                  key: "toggle",
                  value: function () {
                    this.$editor.toggleClass("fullscreen"),
                      this.isFullscreen()
                        ? (this.$editable.data(
                            "orgHeight",
                            this.$editable.css("height")
                          ),
                          this.$editable.data(
                            "orgMaxHeight",
                            this.$editable.css("maxHeight")
                          ),
                          this.$editable.css("maxHeight", ""),
                          this.$window
                            .on("resize", this.onResize)
                            .trigger("resize"),
                          this.$scrollbar.css("overflow", "hidden"))
                        : (this.$window.off("resize", this.onResize),
                          this.resizeTo({
                            h: this.$editable.data("orgHeight"),
                          }),
                          this.$editable.css(
                            "maxHeight",
                            this.$editable.css("orgMaxHeight")
                          ),
                          this.$scrollbar.css("overflow", "visible")),
                      this.context.invoke(
                        "toolbar.updateFullscreen",
                        this.isFullscreen()
                      );
                  },
                },
                {
                  key: "isFullscreen",
                  value: function () {
                    return this.$editor.hasClass("fullscreen");
                  },
                },
              ]) && ie(t.prototype, n),
              o && ie(t, o),
              e
            );
          })(),
          dt = (function () {
            function e(t) {
              var n = this;
              !(function (e, t) {
                if (!(e instanceof t))
                  throw new TypeError("Cannot call a class as a function");
              })(this, e),
                (this.context = t),
                (this.$document = Ce()(document)),
                (this.$editingArea = t.layoutInfo.editingArea),
                (this.options = t.options),
                (this.lang = this.options.langInfo),
                (this.events = {
                  "summernote.mousedown": function (e, t) {
                    n.update(t.target, t) && t.preventDefault();
                  },
                  "summernote.keyup summernote.scroll summernote.change summernote.dialog.shown":
                    function () {
                      n.update();
                    },
                  "summernote.disable summernote.blur": function () {
                    n.hide();
                  },
                  "summernote.codeview.toggled": function () {
                    n.update();
                  },
                });
            }
            var t, n, o;
            return (
              (t = e),
              (n = [
                {
                  key: "initialize",
                  value: function () {
                    var e = this;
                    (this.$handle = Ce()(
                      [
                        '<div class="note-handle">',
                        '<div class="note-control-selection">',
                        '<div class="note-control-selection-bg"></div>',
                        '<div class="note-control-holder note-control-nw"></div>',
                        '<div class="note-control-holder note-control-ne"></div>',
                        '<div class="note-control-holder note-control-sw"></div>',
                        '<div class="',
                        this.options.disableResizeImage
                          ? "note-control-holder"
                          : "note-control-sizing",
                        ' note-control-se"></div>',
                        this.options.disableResizeImage
                          ? ""
                          : '<div class="note-control-selection-info"></div>',
                        "</div>",
                        "</div>",
                      ].join("")
                    ).prependTo(this.$editingArea)),
                      this.$handle.on("mousedown", function (t) {
                        if (Ve.isControlSizing(t.target)) {
                          t.preventDefault(), t.stopPropagation();
                          var n = e.$handle
                              .find(".note-control-selection")
                              .data("target"),
                            o = n.offset(),
                            i = e.$document.scrollTop(),
                            r = function (t) {
                              e.context.invoke(
                                "editor.resizeTo",
                                {
                                  x: t.clientX - o.left,
                                  y: t.clientY - (o.top - i),
                                },
                                n,
                                !t.shiftKey
                              ),
                                e.update(n[0], t);
                            };
                          e.$document
                            .on("mousemove", r)
                            .one("mouseup", function (t) {
                              t.preventDefault(),
                                e.$document.off("mousemove", r),
                                e.context.invoke("editor.afterCommand");
                            }),
                            n.data("ratio") ||
                              n.data("ratio", n.height() / n.width());
                        }
                      }),
                      this.$handle.on("wheel", function (t) {
                        t.preventDefault(), e.update();
                      });
                  },
                },
                {
                  key: "destroy",
                  value: function () {
                    this.$handle.remove();
                  },
                },
                {
                  key: "update",
                  value: function (e, t) {
                    if (this.context.isDisabled()) return !1;
                    var n = Ve.isImg(e),
                      o = this.$handle.find(".note-control-selection");
                    if ((this.context.invoke("imagePopover.update", e, t), n)) {
                      var i = Ce()(e),
                        r = i.position(),
                        a = {
                          left: r.left + parseInt(i.css("marginLeft"), 10),
                          top: r.top + parseInt(i.css("marginTop"), 10),
                        },
                        s = {
                          w: i.outerWidth(!1),
                          h: i.outerHeight(!1),
                        };
                      o.css({
                        display: "block",
                        left: a.left,
                        top: a.top,
                        width: s.w,
                        height: s.h,
                      }).data("target", i);
                      var l = new Image();
                      l.src = i.attr("src");
                      var c =
                        s.w +
                        "x" +
                        s.h +
                        " (" +
                        this.lang.image.original +
                        ": " +
                        l.width +
                        "x" +
                        l.height +
                        ")";
                      o.find(".note-control-selection-info").text(c),
                        this.context.invoke("editor.saveTarget", e);
                    } else this.hide();
                    return n;
                  },
                },
                {
                  key: "hide",
                  value: function () {
                    this.context.invoke("editor.clearTarget"),
                      this.$handle.children().hide();
                  },
                },
              ]) && re(t.prototype, n),
              o && re(t, o),
              e
            );
          })(),
          ht =
            /^([A-Za-z][A-Za-z0-9+-.]*\:[\/]{2}|tel:|mailto:[A-Z0-9._%+-]+@)?(www\.)?(.+)$/i,
          pt = (function () {
            function e(t) {
              var n = this;
              !(function (e, t) {
                if (!(e instanceof t))
                  throw new TypeError("Cannot call a class as a function");
              })(this, e),
                (this.context = t),
                (this.options = t.options),
                (this.events = {
                  "summernote.keyup": function (e, t) {
                    t.isDefaultPrevented() || n.handleKeyup(t);
                  },
                  "summernote.keydown": function (e, t) {
                    n.handleKeydown(t);
                  },
                });
            }
            var t, n, o;
            return (
              (t = e),
              (n = [
                {
                  key: "initialize",
                  value: function () {
                    this.lastWordRange = null;
                  },
                },
                {
                  key: "destroy",
                  value: function () {
                    this.lastWordRange = null;
                  },
                },
                {
                  key: "replace",
                  value: function () {
                    if (this.lastWordRange) {
                      var e = this.lastWordRange.toString(),
                        t = e.match(ht);
                      if (t && (t[1] || t[2])) {
                        var n = t[1] ? e : "http://" + e,
                          o = this.options.showDomainOnlyForAutolink
                            ? e
                                .replace(
                                  /^(?:https?:\/\/)?(?:tel?:?)?(?:mailto?:?)?(?:www\.)?/i,
                                  ""
                                )
                                .split("/")[0]
                            : e,
                          i = Ce()("<a />").html(o).attr("href", n)[0];
                        this.context.options.linkTargetBlank &&
                          Ce()(i).attr("target", "_blank"),
                          this.lastWordRange.insertNode(i),
                          (this.lastWordRange = null),
                          this.context.invoke("editor.focus");
                      }
                    }
                  },
                },
                {
                  key: "handleKeydown",
                  value: function (e) {
                    if (
                      Le.contains([Xe.code.ENTER, Xe.code.SPACE], e.keyCode)
                    ) {
                      var t = this.context
                        .invoke("editor.createRange")
                        .getWordRange();
                      this.lastWordRange = t;
                    }
                  },
                },
                {
                  key: "handleKeyup",
                  value: function (e) {
                    Le.contains([Xe.code.ENTER, Xe.code.SPACE], e.keyCode) &&
                      this.replace();
                  },
                },
              ]) && ae(t.prototype, n),
              o && ae(t, o),
              e
            );
          })(),
          ft = (function () {
            function e(t) {
              var n = this;
              !(function (e, t) {
                if (!(e instanceof t))
                  throw new TypeError("Cannot call a class as a function");
              })(this, e),
                (this.$note = t.layoutInfo.note),
                (this.events = {
                  "summernote.change": function () {
                    n.$note.val(t.invoke("code"));
                  },
                });
            }
            var t, n, o;
            return (
              (t = e),
              (n = [
                {
                  key: "shouldInitialize",
                  value: function () {
                    return Ve.isTextarea(this.$note[0]);
                  },
                },
              ]) && se(t.prototype, n),
              o && se(t, o),
              e
            );
          })(),
          mt = (function () {
            function e(t) {
              var n = this;
              !(function (e, t) {
                if (!(e instanceof t))
                  throw new TypeError("Cannot call a class as a function");
              })(this, e),
                (this.context = t),
                (this.options = t.options.replace || {}),
                (this.keys = [
                  Xe.code.ENTER,
                  Xe.code.SPACE,
                  Xe.code.PERIOD,
                  Xe.code.COMMA,
                  Xe.code.SEMICOLON,
                  Xe.code.SLASH,
                ]),
                (this.previousKeydownCode = null),
                (this.events = {
                  "summernote.keyup": function (e, t) {
                    t.isDefaultPrevented() || n.handleKeyup(t);
                  },
                  "summernote.keydown": function (e, t) {
                    n.handleKeydown(t);
                  },
                });
            }
            var t, n, o;
            return (
              (t = e),
              (n = [
                {
                  key: "shouldInitialize",
                  value: function () {
                    return !!this.options.match;
                  },
                },
                {
                  key: "initialize",
                  value: function () {
                    this.lastWord = null;
                  },
                },
                {
                  key: "destroy",
                  value: function () {
                    this.lastWord = null;
                  },
                },
                {
                  key: "replace",
                  value: function () {
                    if (this.lastWord) {
                      var e = this,
                        t = this.lastWord.toString();
                      this.options.match(t, function (t) {
                        if (t) {
                          var n = "";
                          if (
                            ("string" == typeof t
                              ? (n = Ve.createText(t))
                              : t instanceof jQuery
                              ? (n = t[0])
                              : t instanceof Node && (n = t),
                            !n)
                          )
                            return;
                          e.lastWord.insertNode(n),
                            (e.lastWord = null),
                            e.context.invoke("editor.focus");
                        }
                      });
                    }
                  },
                },
                {
                  key: "handleKeydown",
                  value: function (e) {
                    if (
                      this.previousKeydownCode &&
                      Le.contains(this.keys, this.previousKeydownCode)
                    )
                      this.previousKeydownCode = e.keyCode;
                    else {
                      if (Le.contains(this.keys, e.keyCode)) {
                        var t = this.context
                          .invoke("editor.createRange")
                          .getWordRange();
                        this.lastWord = t;
                      }
                      this.previousKeydownCode = e.keyCode;
                    }
                  },
                },
                {
                  key: "handleKeyup",
                  value: function (e) {
                    Le.contains(this.keys, e.keyCode) && this.replace();
                  },
                },
              ]) && le(t.prototype, n),
              o && le(t, o),
              e
            );
          })(),
          gt = (function () {
            function e(t) {
              var n = this;
              !(function (e, t) {
                if (!(e instanceof t))
                  throw new TypeError("Cannot call a class as a function");
              })(this, e),
                (this.context = t),
                (this.$editingArea = t.layoutInfo.editingArea),
                (this.options = t.options),
                !0 === this.options.inheritPlaceholder &&
                  (this.options.placeholder =
                    this.context.$note.attr("placeholder") ||
                    this.options.placeholder),
                (this.events = {
                  "summernote.init summernote.change": function () {
                    n.update();
                  },
                  "summernote.codeview.toggled": function () {
                    n.update();
                  },
                });
            }
            var t, n, o;
            return (
              (t = e),
              (n = [
                {
                  key: "shouldInitialize",
                  value: function () {
                    return !!this.options.placeholder;
                  },
                },
                {
                  key: "initialize",
                  value: function () {
                    var e = this;
                    (this.$placeholder = Ce()(
                      '<div class="note-placeholder">'
                    )),
                      this.$placeholder
                        .on("click", function () {
                          e.context.invoke("focus");
                        })
                        .html(this.options.placeholder)
                        .prependTo(this.$editingArea),
                      this.update();
                  },
                },
                {
                  key: "destroy",
                  value: function () {
                    this.$placeholder.remove();
                  },
                },
                {
                  key: "update",
                  value: function () {
                    var e =
                      !this.context.invoke("codeview.isActivated") &&
                      this.context.invoke("editor.isEmpty");
                    this.$placeholder.toggle(e);
                  },
                },
              ]) && ce(t.prototype, n),
              o && ce(t, o),
              e
            );
          })(),
          vt = (function () {
            function e(t) {
              !(function (e, t) {
                if (!(e instanceof t))
                  throw new TypeError("Cannot call a class as a function");
              })(this, e),
                (this.ui = Ce.a.summernote.ui),
                (this.context = t),
                (this.$toolbar = t.layoutInfo.toolbar),
                (this.options = t.options),
                (this.lang = this.options.langInfo),
                (this.invertedKeyMap = Pe.invertObject(
                  this.options.keyMap[Ie.isMac ? "mac" : "pc"]
                ));
            }
            var t, n, o;
            return (
              (t = e),
              (n = [
                {
                  key: "representShortcut",
                  value: function (e) {
                    var t = this.invertedKeyMap[e];
                    return this.options.shortcuts && t
                      ? (Ie.isMac &&
                          (t = t
                            .replace("CMD", "\u2318")
                            .replace("SHIFT", "\u21e7")),
                        " (" +
                          (t = t
                            .replace("BACKSLASH", "\\")
                            .replace("SLASH", "/")
                            .replace("LEFTBRACKET", "[")
                            .replace("RIGHTBRACKET", "]")) +
                          ")")
                      : "";
                  },
                },
                {
                  key: "button",
                  value: function (e) {
                    return (
                      !this.options.tooltip && e.tooltip && delete e.tooltip,
                      (e.container = this.options.container),
                      this.ui.button(e)
                    );
                  },
                },
                {
                  key: "initialize",
                  value: function () {
                    this.addToolbarButtons(),
                      this.addImagePopoverButtons(),
                      this.addLinkPopoverButtons(),
                      this.addTablePopoverButtons(),
                      (this.fontInstalledMap = {});
                  },
                },
                {
                  key: "destroy",
                  value: function () {
                    delete this.fontInstalledMap;
                  },
                },
                {
                  key: "isFontInstalled",
                  value: function (e) {
                    return (
                      Object.prototype.hasOwnProperty.call(
                        this.fontInstalledMap,
                        e
                      ) ||
                        (this.fontInstalledMap[e] =
                          Ie.isFontInstalled(e) ||
                          Le.contains(this.options.fontNamesIgnoreCheck, e)),
                      this.fontInstalledMap[e]
                    );
                  },
                },
                {
                  key: "isFontDeservedToAdd",
                  value: function (e) {
                    return (
                      "" !== (e = e.toLowerCase()) &&
                      this.isFontInstalled(e) &&
                      -1 === Ie.genericFontFamilies.indexOf(e)
                    );
                  },
                },
                {
                  key: "colorPalette",
                  value: function (e, t, n, o) {
                    var i = this;
                    return this.ui
                      .buttonGroup({
                        className: "note-color " + e,
                        children: [
                          this.button({
                            className: "note-current-color-button",
                            contents: this.ui.icon(
                              this.options.icons.font + " note-recent-color"
                            ),
                            tooltip: t,
                            click: function (e) {
                              var t = Ce()(e.currentTarget);
                              n && o
                                ? i.context.invoke("editor.color", {
                                    backColor: t.attr("data-backColor"),
                                    foreColor: t.attr("data-foreColor"),
                                  })
                                : n
                                ? i.context.invoke("editor.color", {
                                    backColor: t.attr("data-backColor"),
                                  })
                                : o &&
                                  i.context.invoke("editor.color", {
                                    foreColor: t.attr("data-foreColor"),
                                  });
                            },
                            callback: function (e) {
                              var t = e.find(".note-recent-color");
                              n &&
                                (t.css(
                                  "background-color",
                                  i.options.colorButton.backColor
                                ),
                                e.attr(
                                  "data-backColor",
                                  i.options.colorButton.backColor
                                )),
                                o
                                  ? (t.css(
                                      "color",
                                      i.options.colorButton.foreColor
                                    ),
                                    e.attr(
                                      "data-foreColor",
                                      i.options.colorButton.foreColor
                                    ))
                                  : t.css("color", "transparent");
                            },
                          }),
                          this.button({
                            className: "dropdown-toggle",
                            contents: this.ui.dropdownButtonContents(
                              "",
                              this.options
                            ),
                            tooltip: this.lang.color.more,
                            data: {
                              toggle: "dropdown",
                            },
                          }),
                          this.ui.dropdown({
                            items:
                              (n
                                ? [
                                    '<div class="note-palette">',
                                    '<div class="note-palette-title">' +
                                      this.lang.color.background +
                                      "</div>",
                                    "<div>",
                                    '<button type="button" class="note-color-reset btn btn-light btn-default" data-event="backColor" data-value="transparent">',
                                    this.lang.color.transparent,
                                    "</button>",
                                    "</div>",
                                    '<div class="note-holder" data-event="backColor"><!-- back colors --></div>',
                                    "<div>",
                                    '<button type="button" class="note-color-select btn btn-light btn-default" data-event="openPalette" data-value="backColorPicker">',
                                    this.lang.color.cpSelect,
                                    "</button>",
                                    '<input type="color" id="backColorPicker" class="note-btn note-color-select-btn" value="' +
                                      this.options.colorButton.backColor +
                                      '" data-event="backColorPalette">',
                                    "</div>",
                                    '<div class="note-holder-custom" id="backColorPalette" data-event="backColor"></div>',
                                    "</div>",
                                  ].join("")
                                : "") +
                              (o
                                ? [
                                    '<div class="note-palette">',
                                    '<div class="note-palette-title">' +
                                      this.lang.color.foreground +
                                      "</div>",
                                    "<div>",
                                    '<button type="button" class="note-color-reset btn btn-light btn-default" data-event="removeFormat" data-value="foreColor">',
                                    this.lang.color.resetToDefault,
                                    "</button>",
                                    "</div>",
                                    '<div class="note-holder" data-event="foreColor"><!-- fore colors --></div>',
                                    "<div>",
                                    '<button type="button" class="note-color-select btn btn-light btn-default" data-event="openPalette" data-value="foreColorPicker">',
                                    this.lang.color.cpSelect,
                                    "</button>",
                                    '<input type="color" id="foreColorPicker" class="note-btn note-color-select-btn" value="' +
                                      this.options.colorButton.foreColor +
                                      '" data-event="foreColorPalette">',
                                    "</div>",
                                    '<div class="note-holder-custom" id="foreColorPalette" data-event="foreColor"></div>',
                                    "</div>",
                                  ].join("")
                                : ""),
                            callback: function (e) {
                              e.find(".note-holder").each(function (e, t) {
                                var n = Ce()(t);
                                n.append(
                                  i.ui
                                    .palette({
                                      colors: i.options.colors,
                                      colorsName: i.options.colorsName,
                                      eventName: n.data("event"),
                                      container: i.options.container,
                                      tooltip: i.options.tooltip,
                                    })
                                    .render()
                                );
                              });
                              var t = [
                                [
                                  "#FFFFFF",
                                  "#FFFFFF",
                                  "#FFFFFF",
                                  "#FFFFFF",
                                  "#FFFFFF",
                                  "#FFFFFF",
                                  "#FFFFFF",
                                  "#FFFFFF",
                                ],
                              ];
                              e
                                .find(".note-holder-custom")
                                .each(function (e, n) {
                                  var o = Ce()(n);
                                  o.append(
                                    i.ui
                                      .palette({
                                        colors: t,
                                        colorsName: t,
                                        eventName: o.data("event"),
                                        container: i.options.container,
                                        tooltip: i.options.tooltip,
                                      })
                                      .render()
                                  );
                                }),
                                e
                                  .find("input[type=color]")
                                  .each(function (t, n) {
                                    Ce()(n).change(function () {
                                      var t = e
                                          .find("#" + Ce()(this).data("event"))
                                          .find(".note-color-btn")
                                          .first(),
                                        n = this.value.toUpperCase();
                                      t
                                        .css("background-color", n)
                                        .attr("aria-label", n)
                                        .attr("data-value", n)
                                        .attr("data-original-title", n),
                                        t.click();
                                    });
                                  });
                            },
                            click: function (t) {
                              t.stopPropagation();
                              var n = Ce()("." + e).find(".note-dropdown-menu"),
                                o = Ce()(t.target),
                                r = o.data("event"),
                                a = o.attr("data-value");
                              if ("openPalette" === r) {
                                var s = n.find("#" + a),
                                  l = Ce()(
                                    n
                                      .find("#" + s.data("event"))
                                      .find(".note-color-row")[0]
                                  ),
                                  c = l.find(".note-color-btn").last().detach(),
                                  u = s.val();
                                c
                                  .css("background-color", u)
                                  .attr("aria-label", u)
                                  .attr("data-value", u)
                                  .attr("data-original-title", u),
                                  l.prepend(c),
                                  s.click();
                              } else {
                                if (
                                  Le.contains(["backColor", "foreColor"], r)
                                ) {
                                  var d =
                                      "backColor" === r
                                        ? "background-color"
                                        : "color",
                                    h = o
                                      .closest(".note-color")
                                      .find(".note-recent-color"),
                                    p = o
                                      .closest(".note-color")
                                      .find(".note-current-color-button");
                                  h.css(d, a), p.attr("data-" + r, a);
                                }
                                i.context.invoke("editor." + r, a);
                              }
                            },
                          }),
                        ],
                      })
                      .render();
                  },
                },
                {
                  key: "addToolbarButtons",
                  value: function () {
                    var e = this;
                    this.context.memo("button.style", function () {
                      return e.ui
                        .buttonGroup([
                          e.button({
                            className: "dropdown-toggle",
                            contents: e.ui.dropdownButtonContents(
                              e.ui.icon(e.options.icons.magic),
                              e.options
                            ),
                            tooltip: e.lang.style.style,
                            data: {
                              toggle: "dropdown",
                            },
                          }),
                          e.ui.dropdown({
                            className: "dropdown-style",
                            items: e.options.styleTags,
                            title: e.lang.style.style,
                            template: function (t) {
                              "string" == typeof t &&
                                (t = {
                                  tag: t,
                                  title: Object.prototype.hasOwnProperty.call(
                                    e.lang.style,
                                    t
                                  )
                                    ? e.lang.style[t]
                                    : t,
                                });
                              var n = t.tag,
                                o = t.title;
                              return (
                                "<" +
                                n +
                                (t.style ? ' style="' + t.style + '" ' : "") +
                                (t.className
                                  ? ' class="' + t.className + '"'
                                  : "") +
                                ">" +
                                o +
                                "</" +
                                n +
                                ">"
                              );
                            },
                            click:
                              e.context.createInvokeHandler(
                                "editor.formatBlock"
                              ),
                          }),
                        ])
                        .render();
                    });
                    for (
                      var t = function (t) {
                          var n = e.options.styleTags[t];
                          e.context.memo("button.style." + n, function () {
                            return e
                              .button({
                                className: "note-btn-style-" + n,
                                contents:
                                  '<div data-value="' +
                                  n +
                                  '">' +
                                  n.toUpperCase() +
                                  "</div>",
                                tooltip: e.lang.style[n],
                                click:
                                  e.context.createInvokeHandler(
                                    "editor.formatBlock"
                                  ),
                              })
                              .render();
                          });
                        },
                        n = 0,
                        o = this.options.styleTags.length;
                      n < o;
                      n++
                    )
                      t(n);
                    this.context.memo("button.bold", function () {
                      return e
                        .button({
                          className: "note-btn-bold",
                          contents: e.ui.icon(e.options.icons.bold),
                          tooltip:
                            e.lang.font.bold + e.representShortcut("bold"),
                          click:
                            e.context.createInvokeHandlerAndUpdateState(
                              "editor.bold"
                            ),
                        })
                        .render();
                    }),
                      this.context.memo("button.italic", function () {
                        return e
                          .button({
                            className: "note-btn-italic",
                            contents: e.ui.icon(e.options.icons.italic),
                            tooltip:
                              e.lang.font.italic +
                              e.representShortcut("italic"),
                            click:
                              e.context.createInvokeHandlerAndUpdateState(
                                "editor.italic"
                              ),
                          })
                          .render();
                      }),
                      this.context.memo("button.underline", function () {
                        return e
                          .button({
                            className: "note-btn-underline",
                            contents: e.ui.icon(e.options.icons.underline),
                            tooltip:
                              e.lang.font.underline +
                              e.representShortcut("underline"),
                            click:
                              e.context.createInvokeHandlerAndUpdateState(
                                "editor.underline"
                              ),
                          })
                          .render();
                      }),
                      this.context.memo("button.clear", function () {
                        return e
                          .button({
                            contents: e.ui.icon(e.options.icons.eraser),
                            tooltip:
                              e.lang.font.clear +
                              e.representShortcut("removeFormat"),
                            click: e.context.createInvokeHandler(
                              "editor.removeFormat"
                            ),
                          })
                          .render();
                      }),
                      this.context.memo("button.strikethrough", function () {
                        return e
                          .button({
                            className: "note-btn-strikethrough",
                            contents: e.ui.icon(e.options.icons.strikethrough),
                            tooltip:
                              e.lang.font.strikethrough +
                              e.representShortcut("strikethrough"),
                            click: e.context.createInvokeHandlerAndUpdateState(
                              "editor.strikethrough"
                            ),
                          })
                          .render();
                      }),
                      this.context.memo("button.superscript", function () {
                        return e
                          .button({
                            className: "note-btn-superscript",
                            contents: e.ui.icon(e.options.icons.superscript),
                            tooltip: e.lang.font.superscript,
                            click:
                              e.context.createInvokeHandlerAndUpdateState(
                                "editor.superscript"
                              ),
                          })
                          .render();
                      }),
                      this.context.memo("button.subscript", function () {
                        return e
                          .button({
                            className: "note-btn-subscript",
                            contents: e.ui.icon(e.options.icons.subscript),
                            tooltip: e.lang.font.subscript,
                            click:
                              e.context.createInvokeHandlerAndUpdateState(
                                "editor.subscript"
                              ),
                          })
                          .render();
                      }),
                      this.context.memo("button.fontname", function () {
                        var t = e.context.invoke("editor.currentStyle");
                        return (
                          e.options.addDefaultFonts &&
                            Ce.a.each(
                              t["font-family"].split(","),
                              function (t, n) {
                                (n = n.trim().replace(/['"]+/g, "")),
                                  e.isFontDeservedToAdd(n) &&
                                    -1 === e.options.fontNames.indexOf(n) &&
                                    e.options.fontNames.push(n);
                              }
                            ),
                          e.ui
                            .buttonGroup([
                              e.button({
                                className: "dropdown-toggle",
                                contents: e.ui.dropdownButtonContents(
                                  '<span class="note-current-fontname"></span>',
                                  e.options
                                ),
                                tooltip: e.lang.font.name,
                                data: {
                                  toggle: "dropdown",
                                },
                              }),
                              e.ui.dropdownCheck({
                                className: "dropdown-fontname",
                                checkClassName: e.options.icons.menuCheck,
                                items: e.options.fontNames.filter(
                                  e.isFontInstalled.bind(e)
                                ),
                                title: e.lang.font.name,
                                template: function (e) {
                                  return (
                                    '<span style="font-family: ' +
                                    Ie.validFontName(e) +
                                    '">' +
                                    e +
                                    "</span>"
                                  );
                                },
                                click:
                                  e.context.createInvokeHandlerAndUpdateState(
                                    "editor.fontName"
                                  ),
                              }),
                            ])
                            .render()
                        );
                      }),
                      this.context.memo("button.fontsize", function () {
                        return e.ui
                          .buttonGroup([
                            e.button({
                              className: "dropdown-toggle",
                              contents: e.ui.dropdownButtonContents(
                                '<span class="note-current-fontsize"></span>',
                                e.options
                              ),
                              tooltip: e.lang.font.size,
                              data: {
                                toggle: "dropdown",
                              },
                            }),
                            e.ui.dropdownCheck({
                              className: "dropdown-fontsize",
                              checkClassName: e.options.icons.menuCheck,
                              items: e.options.fontSizes,
                              title: e.lang.font.size,
                              click:
                                e.context.createInvokeHandlerAndUpdateState(
                                  "editor.fontSize"
                                ),
                            }),
                          ])
                          .render();
                      }),
                      this.context.memo("button.fontsizeunit", function () {
                        return e.ui
                          .buttonGroup([
                            e.button({
                              className: "dropdown-toggle",
                              contents: e.ui.dropdownButtonContents(
                                '<span class="note-current-fontsizeunit"></span>',
                                e.options
                              ),
                              tooltip: e.lang.font.sizeunit,
                              data: {
                                toggle: "dropdown",
                              },
                            }),
                            e.ui.dropdownCheck({
                              className: "dropdown-fontsizeunit",
                              checkClassName: e.options.icons.menuCheck,
                              items: e.options.fontSizeUnits,
                              title: e.lang.font.sizeunit,
                              click:
                                e.context.createInvokeHandlerAndUpdateState(
                                  "editor.fontSizeUnit"
                                ),
                            }),
                          ])
                          .render();
                      }),
                      this.context.memo("button.color", function () {
                        return e.colorPalette(
                          "note-color-all",
                          e.lang.color.recent,
                          !0,
                          !0
                        );
                      }),
                      this.context.memo("button.forecolor", function () {
                        return e.colorPalette(
                          "note-color-fore",
                          e.lang.color.foreground,
                          !1,
                          !0
                        );
                      }),
                      this.context.memo("button.backcolor", function () {
                        return e.colorPalette(
                          "note-color-back",
                          e.lang.color.background,
                          !0,
                          !1
                        );
                      }),
                      this.context.memo("button.ul", function () {
                        return e
                          .button({
                            contents: e.ui.icon(e.options.icons.unorderedlist),
                            tooltip:
                              e.lang.lists.unordered +
                              e.representShortcut("insertUnorderedList"),
                            click: e.context.createInvokeHandler(
                              "editor.insertUnorderedList"
                            ),
                          })
                          .render();
                      }),
                      this.context.memo("button.ol", function () {
                        return e
                          .button({
                            contents: e.ui.icon(e.options.icons.orderedlist),
                            tooltip:
                              e.lang.lists.ordered +
                              e.representShortcut("insertOrderedList"),
                            click: e.context.createInvokeHandler(
                              "editor.insertOrderedList"
                            ),
                          })
                          .render();
                      });
                    var i = this.button({
                        contents: this.ui.icon(this.options.icons.alignLeft),
                        tooltip:
                          this.lang.paragraph.left +
                          this.representShortcut("justifyLeft"),
                        click:
                          this.context.createInvokeHandler(
                            "editor.justifyLeft"
                          ),
                      }),
                      r = this.button({
                        contents: this.ui.icon(this.options.icons.alignCenter),
                        tooltip:
                          this.lang.paragraph.center +
                          this.representShortcut("justifyCenter"),
                        click: this.context.createInvokeHandler(
                          "editor.justifyCenter"
                        ),
                      }),
                      a = this.button({
                        contents: this.ui.icon(this.options.icons.alignRight),
                        tooltip:
                          this.lang.paragraph.right +
                          this.representShortcut("justifyRight"),
                        click: this.context.createInvokeHandler(
                          "editor.justifyRight"
                        ),
                      }),
                      s = this.button({
                        contents: this.ui.icon(this.options.icons.alignJustify),
                        tooltip:
                          this.lang.paragraph.justify +
                          this.representShortcut("justifyFull"),
                        click:
                          this.context.createInvokeHandler(
                            "editor.justifyFull"
                          ),
                      }),
                      l = this.button({
                        contents: this.ui.icon(this.options.icons.outdent),
                        tooltip:
                          this.lang.paragraph.outdent +
                          this.representShortcut("outdent"),
                        click:
                          this.context.createInvokeHandler("editor.outdent"),
                      }),
                      c = this.button({
                        contents: this.ui.icon(this.options.icons.indent),
                        tooltip:
                          this.lang.paragraph.indent +
                          this.representShortcut("indent"),
                        click:
                          this.context.createInvokeHandler("editor.indent"),
                      });
                    this.context.memo(
                      "button.justifyLeft",
                      Pe.invoke(i, "render")
                    ),
                      this.context.memo(
                        "button.justifyCenter",
                        Pe.invoke(r, "render")
                      ),
                      this.context.memo(
                        "button.justifyRight",
                        Pe.invoke(a, "render")
                      ),
                      this.context.memo(
                        "button.justifyFull",
                        Pe.invoke(s, "render")
                      ),
                      this.context.memo(
                        "button.outdent",
                        Pe.invoke(l, "render")
                      ),
                      this.context.memo(
                        "button.indent",
                        Pe.invoke(c, "render")
                      ),
                      this.context.memo("button.paragraph", function () {
                        return e.ui
                          .buttonGroup([
                            e.button({
                              className: "dropdown-toggle",
                              contents: e.ui.dropdownButtonContents(
                                e.ui.icon(e.options.icons.alignLeft),
                                e.options
                              ),
                              tooltip: e.lang.paragraph.paragraph,
                              data: {
                                toggle: "dropdown",
                              },
                            }),
                            e.ui.dropdown([
                              e.ui.buttonGroup({
                                className: "note-align",
                                children: [i, r, a, s],
                              }),
                              e.ui.buttonGroup({
                                className: "note-list",
                                children: [l, c],
                              }),
                            ]),
                          ])
                          .render();
                      }),
                      this.context.memo("button.height", function () {
                        return e.ui
                          .buttonGroup([
                            e.button({
                              className: "dropdown-toggle",
                              contents: e.ui.dropdownButtonContents(
                                e.ui.icon(e.options.icons.textHeight),
                                e.options
                              ),
                              tooltip: e.lang.font.height,
                              data: {
                                toggle: "dropdown",
                              },
                            }),
                            e.ui.dropdownCheck({
                              items: e.options.lineHeights,
                              checkClassName: e.options.icons.menuCheck,
                              className: "dropdown-line-height",
                              title: e.lang.font.height,
                              click:
                                e.context.createInvokeHandler(
                                  "editor.lineHeight"
                                ),
                            }),
                          ])
                          .render();
                      }),
                      this.context.memo("button.table", function () {
                        return e.ui
                          .buttonGroup(
                            [
                              e.button({
                                className: "dropdown-toggle",
                                contents: e.ui.dropdownButtonContents(
                                  e.ui.icon(e.options.icons.table),
                                  e.options
                                ),
                                tooltip: e.lang.table.table,
                                data: {
                                  toggle: "dropdown",
                                },
                              }),
                              e.ui.dropdown({
                                title: e.lang.table.table,
                                className: "note-table",
                                items: [
                                  '<div class="note-dimension-picker">',
                                  '<div class="note-dimension-picker-mousecatcher" data-event="insertTable" data-value="1x1"></div>',
                                  '<div class="note-dimension-picker-highlighted"></div>',
                                  '<div class="note-dimension-picker-unhighlighted"></div>',
                                  "</div>",
                                  '<div class="note-dimension-display">1 x 1</div>',
                                ].join(""),
                              }),
                            ],
                            {
                              callback: function (t) {
                                t.find(".note-dimension-picker-mousecatcher")
                                  .css({
                                    width:
                                      e.options.insertTableMaxSize.col + "em",
                                    height:
                                      e.options.insertTableMaxSize.row + "em",
                                  })
                                  .mousedown(
                                    e.context.createInvokeHandler(
                                      "editor.insertTable"
                                    )
                                  )
                                  .on("mousemove", e.tableMoveHandler.bind(e));
                              },
                            }
                          )
                          .render();
                      }),
                      this.context.memo("button.link", function () {
                        return e
                          .button({
                            contents: e.ui.icon(e.options.icons.link),
                            tooltip:
                              e.lang.link.link +
                              e.representShortcut("linkDialog.show"),
                            click:
                              e.context.createInvokeHandler("linkDialog.show"),
                          })
                          .render();
                      }),
                      this.context.memo("button.picture", function () {
                        return e
                          .button({
                            contents: e.ui.icon(e.options.icons.picture),
                            tooltip: e.lang.image.image,
                            click:
                              e.context.createInvokeHandler("imageDialog.show"),
                          })
                          .render();
                      }),
                      this.context.memo("button.video", function () {
                        return e
                          .button({
                            contents: e.ui.icon(e.options.icons.video),
                            tooltip: e.lang.video.video,
                            click:
                              e.context.createInvokeHandler("videoDialog.show"),
                          })
                          .render();
                      }),
                      this.context.memo("button.hr", function () {
                        return e
                          .button({
                            contents: e.ui.icon(e.options.icons.minus),
                            tooltip:
                              e.lang.hr.insert +
                              e.representShortcut("insertHorizontalRule"),
                            click: e.context.createInvokeHandler(
                              "editor.insertHorizontalRule"
                            ),
                          })
                          .render();
                      }),
                      this.context.memo("button.fullscreen", function () {
                        return e
                          .button({
                            className: "btn-fullscreen note-codeview-keep",
                            contents: e.ui.icon(e.options.icons.arrowsAlt),
                            tooltip: e.lang.options.fullscreen,
                            click:
                              e.context.createInvokeHandler(
                                "fullscreen.toggle"
                              ),
                          })
                          .render();
                      }),
                      this.context.memo("button.codeview", function () {
                        return e
                          .button({
                            className: "btn-codeview note-codeview-keep",
                            contents: e.ui.icon(e.options.icons.code),
                            tooltip: e.lang.options.codeview,
                            click:
                              e.context.createInvokeHandler("codeview.toggle"),
                          })
                          .render();
                      }),
                      this.context.memo("button.redo", function () {
                        return e
                          .button({
                            contents: e.ui.icon(e.options.icons.redo),
                            tooltip:
                              e.lang.history.redo + e.representShortcut("redo"),
                            click: e.context.createInvokeHandler("editor.redo"),
                          })
                          .render();
                      }),
                      this.context.memo("button.undo", function () {
                        return e
                          .button({
                            contents: e.ui.icon(e.options.icons.undo),
                            tooltip:
                              e.lang.history.undo + e.representShortcut("undo"),
                            click: e.context.createInvokeHandler("editor.undo"),
                          })
                          .render();
                      }),
                      this.context.memo("button.help", function () {
                        return e
                          .button({
                            contents: e.ui.icon(e.options.icons.question),
                            tooltip: e.lang.options.help,
                            click:
                              e.context.createInvokeHandler("helpDialog.show"),
                          })
                          .render();
                      });
                  },
                },
                {
                  key: "addImagePopoverButtons",
                  value: function () {
                    var e = this;
                    this.context.memo("button.resizeFull", function () {
                      return e
                        .button({
                          contents:
                            '<span class="note-fontsize-10">100%</span>',
                          tooltip: e.lang.image.resizeFull,
                          click: e.context.createInvokeHandler(
                            "editor.resize",
                            "1"
                          ),
                        })
                        .render();
                    }),
                      this.context.memo("button.resizeHalf", function () {
                        return e
                          .button({
                            contents:
                              '<span class="note-fontsize-10">50%</span>',
                            tooltip: e.lang.image.resizeHalf,
                            click: e.context.createInvokeHandler(
                              "editor.resize",
                              "0.5"
                            ),
                          })
                          .render();
                      }),
                      this.context.memo("button.resizeQuarter", function () {
                        return e
                          .button({
                            contents:
                              '<span class="note-fontsize-10">25%</span>',
                            tooltip: e.lang.image.resizeQuarter,
                            click: e.context.createInvokeHandler(
                              "editor.resize",
                              "0.25"
                            ),
                          })
                          .render();
                      }),
                      this.context.memo("button.resizeNone", function () {
                        return e
                          .button({
                            contents: e.ui.icon(e.options.icons.rollback),
                            tooltip: e.lang.image.resizeNone,
                            click: e.context.createInvokeHandler(
                              "editor.resize",
                              "0"
                            ),
                          })
                          .render();
                      }),
                      this.context.memo("button.floatLeft", function () {
                        return e
                          .button({
                            contents: e.ui.icon(e.options.icons.floatLeft),
                            tooltip: e.lang.image.floatLeft,
                            click: e.context.createInvokeHandler(
                              "editor.floatMe",
                              "left"
                            ),
                          })
                          .render();
                      }),
                      this.context.memo("button.floatRight", function () {
                        return e
                          .button({
                            contents: e.ui.icon(e.options.icons.floatRight),
                            tooltip: e.lang.image.floatRight,
                            click: e.context.createInvokeHandler(
                              "editor.floatMe",
                              "right"
                            ),
                          })
                          .render();
                      }),
                      this.context.memo("button.floatNone", function () {
                        return e
                          .button({
                            contents: e.ui.icon(e.options.icons.rollback),
                            tooltip: e.lang.image.floatNone,
                            click: e.context.createInvokeHandler(
                              "editor.floatMe",
                              "none"
                            ),
                          })
                          .render();
                      }),
                      this.context.memo("button.removeMedia", function () {
                        return e
                          .button({
                            contents: e.ui.icon(e.options.icons.trash),
                            tooltip: e.lang.image.remove,
                            click:
                              e.context.createInvokeHandler(
                                "editor.removeMedia"
                              ),
                          })
                          .render();
                      });
                  },
                },
                {
                  key: "addLinkPopoverButtons",
                  value: function () {
                    var e = this;
                    this.context.memo("button.linkDialogShow", function () {
                      return e
                        .button({
                          contents: e.ui.icon(e.options.icons.link),
                          tooltip: e.lang.link.edit,
                          click:
                            e.context.createInvokeHandler("linkDialog.show"),
                        })
                        .render();
                    }),
                      this.context.memo("button.unlink", function () {
                        return e
                          .button({
                            contents: e.ui.icon(e.options.icons.unlink),
                            tooltip: e.lang.link.unlink,
                            click:
                              e.context.createInvokeHandler("editor.unlink"),
                          })
                          .render();
                      });
                  },
                },
                {
                  key: "addTablePopoverButtons",
                  value: function () {
                    var e = this;
                    this.context.memo("button.addRowUp", function () {
                      return e
                        .button({
                          className: "btn-md",
                          contents: e.ui.icon(e.options.icons.rowAbove),
                          tooltip: e.lang.table.addRowAbove,
                          click: e.context.createInvokeHandler(
                            "editor.addRow",
                            "top"
                          ),
                        })
                        .render();
                    }),
                      this.context.memo("button.addRowDown", function () {
                        return e
                          .button({
                            className: "btn-md",
                            contents: e.ui.icon(e.options.icons.rowBelow),
                            tooltip: e.lang.table.addRowBelow,
                            click: e.context.createInvokeHandler(
                              "editor.addRow",
                              "bottom"
                            ),
                          })
                          .render();
                      }),
                      this.context.memo("button.addColLeft", function () {
                        return e
                          .button({
                            className: "btn-md",
                            contents: e.ui.icon(e.options.icons.colBefore),
                            tooltip: e.lang.table.addColLeft,
                            click: e.context.createInvokeHandler(
                              "editor.addCol",
                              "left"
                            ),
                          })
                          .render();
                      }),
                      this.context.memo("button.addColRight", function () {
                        return e
                          .button({
                            className: "btn-md",
                            contents: e.ui.icon(e.options.icons.colAfter),
                            tooltip: e.lang.table.addColRight,
                            click: e.context.createInvokeHandler(
                              "editor.addCol",
                              "right"
                            ),
                          })
                          .render();
                      }),
                      this.context.memo("button.deleteRow", function () {
                        return e
                          .button({
                            className: "btn-md",
                            contents: e.ui.icon(e.options.icons.rowRemove),
                            tooltip: e.lang.table.delRow,
                            click:
                              e.context.createInvokeHandler("editor.deleteRow"),
                          })
                          .render();
                      }),
                      this.context.memo("button.deleteCol", function () {
                        return e
                          .button({
                            className: "btn-md",
                            contents: e.ui.icon(e.options.icons.colRemove),
                            tooltip: e.lang.table.delCol,
                            click:
                              e.context.createInvokeHandler("editor.deleteCol"),
                          })
                          .render();
                      }),
                      this.context.memo("button.deleteTable", function () {
                        return e
                          .button({
                            className: "btn-md",
                            contents: e.ui.icon(e.options.icons.trash),
                            tooltip: e.lang.table.delTable,
                            click:
                              e.context.createInvokeHandler(
                                "editor.deleteTable"
                              ),
                          })
                          .render();
                      });
                  },
                },
                {
                  key: "build",
                  value: function (e, t) {
                    for (var n = 0, o = t.length; n < o; n++) {
                      for (
                        var i = t[n],
                          r = Array.isArray(i) ? i[0] : i,
                          a = Array.isArray(i)
                            ? 1 === i.length
                              ? [i[0]]
                              : i[1]
                            : [i],
                          s = this.ui
                            .buttonGroup({
                              className: "note-" + r,
                            })
                            .render(),
                          l = 0,
                          c = a.length;
                        l < c;
                        l++
                      ) {
                        var u = this.context.memo("button." + a[l]);
                        u &&
                          s.append(
                            "function" == typeof u ? u(this.context) : u
                          );
                      }
                      s.appendTo(e);
                    }
                  },
                },
                {
                  key: "updateCurrentStyle",
                  value: function (e) {
                    var t = this,
                      n = e || this.$toolbar,
                      o = this.context.invoke("editor.currentStyle");
                    if (
                      (this.updateBtnStates(n, {
                        ".note-btn-bold": function () {
                          return "bold" === o["font-bold"];
                        },
                        ".note-btn-italic": function () {
                          return "italic" === o["font-italic"];
                        },
                        ".note-btn-underline": function () {
                          return "underline" === o["font-underline"];
                        },
                        ".note-btn-subscript": function () {
                          return "subscript" === o["font-subscript"];
                        },
                        ".note-btn-superscript": function () {
                          return "superscript" === o["font-superscript"];
                        },
                        ".note-btn-strikethrough": function () {
                          return "strikethrough" === o["font-strikethrough"];
                        },
                      }),
                      o["font-family"])
                    ) {
                      var i = o["font-family"].split(",").map(function (e) {
                          return e
                            .replace(/[\'\"]/g, "")
                            .replace(/\s+$/, "")
                            .replace(/^\s+/, "");
                        }),
                        r = Le.find(i, this.isFontInstalled.bind(this));
                      n.find(".dropdown-fontname a").each(function (e, t) {
                        var n = Ce()(t),
                          o = n.data("value") + "" == r + "";
                        n.toggleClass("checked", o);
                      }),
                        n
                          .find(".note-current-fontname")
                          .text(r)
                          .css("font-family", r);
                    }
                    if (o["font-size"]) {
                      var a = o["font-size"];
                      n.find(".dropdown-fontsize a").each(function (e, t) {
                        var n = Ce()(t),
                          o = n.data("value") + "" == a + "";
                        n.toggleClass("checked", o);
                      }),
                        n.find(".note-current-fontsize").text(a);
                      var s = o["font-size-unit"];
                      n.find(".dropdown-fontsizeunit a").each(function (e, t) {
                        var n = Ce()(t),
                          o = n.data("value") + "" == s + "";
                        n.toggleClass("checked", o);
                      }),
                        n.find(".note-current-fontsizeunit").text(s);
                    }
                    if (o["line-height"]) {
                      var l = o["line-height"];
                      n.find(".dropdown-line-height li a").each(function (
                        e,
                        n
                      ) {
                        var o = Ce()(n).data("value") + "" == l + "";
                        t.className = o ? "checked" : "";
                      });
                    }
                  },
                },
                {
                  key: "updateBtnStates",
                  value: function (e, t) {
                    var n = this;
                    Ce.a.each(t, function (t, o) {
                      n.ui.toggleBtnActive(e.find(t), o());
                    });
                  },
                },
                {
                  key: "tableMoveHandler",
                  value: function (e) {
                    var t,
                      n = Ce()(e.target.parentNode),
                      o = n.next(),
                      i = n.find(".note-dimension-picker-mousecatcher"),
                      r = n.find(".note-dimension-picker-highlighted"),
                      a = n.find(".note-dimension-picker-unhighlighted");
                    if (void 0 === e.offsetX) {
                      var s = Ce()(e.target).offset();
                      t = {
                        x: e.pageX - s.left,
                        y: e.pageY - s.top,
                      };
                    } else
                      t = {
                        x: e.offsetX,
                        y: e.offsetY,
                      };
                    var l = Math.ceil(t.x / 18) || 1,
                      c = Math.ceil(t.y / 18) || 1;
                    r.css({
                      width: l + "em",
                      height: c + "em",
                    }),
                      i.data("value", l + "x" + c),
                      l > 3 &&
                        l < this.options.insertTableMaxSize.col &&
                        a.css({
                          width: l + 1 + "em",
                        }),
                      c > 3 &&
                        c < this.options.insertTableMaxSize.row &&
                        a.css({
                          height: c + 1 + "em",
                        }),
                      o.html(l + " x " + c);
                  },
                },
              ]) && ue(t.prototype, n),
              o && ue(t, o),
              e
            );
          })(),
          bt = (function () {
            function e(t) {
              !(function (e, t) {
                if (!(e instanceof t))
                  throw new TypeError("Cannot call a class as a function");
              })(this, e),
                (this.context = t),
                (this.$window = Ce()(window)),
                (this.$document = Ce()(document)),
                (this.ui = Ce.a.summernote.ui),
                (this.$note = t.layoutInfo.note),
                (this.$editor = t.layoutInfo.editor),
                (this.$toolbar = t.layoutInfo.toolbar),
                (this.$editable = t.layoutInfo.editable),
                (this.$statusbar = t.layoutInfo.statusbar),
                (this.options = t.options),
                (this.isFollowing = !1),
                (this.followScroll = this.followScroll.bind(this));
            }
            var t, n, o;
            return (
              (t = e),
              (n = [
                {
                  key: "shouldInitialize",
                  value: function () {
                    return !this.options.airMode;
                  },
                },
                {
                  key: "initialize",
                  value: function () {
                    var e = this;
                    (this.options.toolbar = this.options.toolbar || []),
                      this.options.toolbar.length
                        ? this.context.invoke(
                            "buttons.build",
                            this.$toolbar,
                            this.options.toolbar
                          )
                        : this.$toolbar.hide(),
                      this.options.toolbarContainer &&
                        this.$toolbar.appendTo(this.options.toolbarContainer),
                      this.changeContainer(!1),
                      this.$note.on(
                        "summernote.keyup summernote.mouseup summernote.change",
                        function () {
                          e.context.invoke("buttons.updateCurrentStyle");
                        }
                      ),
                      this.context.invoke("buttons.updateCurrentStyle"),
                      this.options.followingToolbar &&
                        this.$window.on("scroll resize", this.followScroll);
                  },
                },
                {
                  key: "destroy",
                  value: function () {
                    this.$toolbar.children().remove(),
                      this.options.followingToolbar &&
                        this.$window.off("scroll resize", this.followScroll);
                  },
                },
                {
                  key: "followScroll",
                  value: function () {
                    if (this.$editor.hasClass("fullscreen")) return !1;
                    var e = this.$editor.outerHeight(),
                      t = this.$editor.width(),
                      n = this.$toolbar.height(),
                      o = this.$statusbar.height(),
                      i = 0;
                    this.options.otherStaticBar &&
                      (i = Ce()(this.options.otherStaticBar).outerHeight());
                    var r = this.$document.scrollTop(),
                      a = this.$editor.offset().top,
                      s = a - i,
                      l = a + e - i - n - o;
                    !this.isFollowing && r > s && r < l - n
                      ? ((this.isFollowing = !0),
                        this.$editable.css({
                          marginTop: this.$toolbar.outerHeight(),
                        }),
                        this.$toolbar.css({
                          position: "fixed",
                          top: i,
                          width: t,
                          zIndex: 1e3,
                        }))
                      : this.isFollowing &&
                        (r < s || r > l) &&
                        ((this.isFollowing = !1),
                        this.$toolbar.css({
                          position: "relative",
                          top: 0,
                          width: "100%",
                          zIndex: "auto",
                        }),
                        this.$editable.css({
                          marginTop: "",
                        }));
                  },
                },
                {
                  key: "changeContainer",
                  value: function (e) {
                    e
                      ? this.$toolbar.prependTo(this.$editor)
                      : this.options.toolbarContainer &&
                        this.$toolbar.appendTo(this.options.toolbarContainer),
                      this.options.followingToolbar && this.followScroll();
                  },
                },
                {
                  key: "updateFullscreen",
                  value: function (e) {
                    this.ui.toggleBtnActive(
                      this.$toolbar.find(".btn-fullscreen"),
                      e
                    ),
                      this.changeContainer(e);
                  },
                },
                {
                  key: "updateCodeview",
                  value: function (e) {
                    this.ui.toggleBtnActive(
                      this.$toolbar.find(".btn-codeview"),
                      e
                    ),
                      e ? this.deactivate() : this.activate();
                  },
                },
                {
                  key: "activate",
                  value: function (e) {
                    var t = this.$toolbar.find("button");
                    e || (t = t.not(".note-codeview-keep")),
                      this.ui.toggleBtn(t, !0);
                  },
                },
                {
                  key: "deactivate",
                  value: function (e) {
                    var t = this.$toolbar.find("button");
                    e || (t = t.not(".note-codeview-keep")),
                      this.ui.toggleBtn(t, !1);
                  },
                },
              ]) && de(t.prototype, n),
              o && de(t, o),
              e
            );
          })(),
          yt = (function () {
            function e(t) {
              !(function (e, t) {
                if (!(e instanceof t))
                  throw new TypeError("Cannot call a class as a function");
              })(this, e),
                (this.context = t),
                (this.ui = Ce.a.summernote.ui),
                (this.$body = Ce()(document.body)),
                (this.$editor = t.layoutInfo.editor),
                (this.options = t.options),
                (this.lang = this.options.langInfo),
                t.memo(
                  "help.linkDialog.show",
                  this.options.langInfo.help["linkDialog.show"]
                );
            }
            var t, n, o;
            return (
              (t = e),
              (n = [
                {
                  key: "initialize",
                  value: function () {
                    var e = this.options.dialogsInBody
                        ? this.$body
                        : this.options.container,
                      t = [
                        '<div class="form-group note-form-group">',
                        '<label for="note-dialog-link-txt-'
                          .concat(this.options.id, '" class="note-form-label">')
                          .concat(this.lang.link.textToDisplay, "</label>"),
                        '<input id="note-dialog-link-txt-'.concat(
                          this.options.id,
                          '" class="note-link-text form-control note-form-control note-input" type="text"/>'
                        ),
                        "</div>",
                        '<div class="form-group note-form-group">',
                        '<label for="note-dialog-link-url-'
                          .concat(this.options.id, '" class="note-form-label">')
                          .concat(this.lang.link.url, "</label>"),
                        '<input id="note-dialog-link-url-'.concat(
                          this.options.id,
                          '" class="note-link-url form-control note-form-control note-input" type="text" value="http://"/>'
                        ),
                        "</div>",
                        this.options.disableLinkTarget
                          ? ""
                          : Ce()("<div/>")
                              .append(
                                this.ui
                                  .checkbox({
                                    className: "sn-checkbox-open-in-new-window",
                                    text: this.lang.link.openInNewWindow,
                                    checked: !0,
                                  })
                                  .render()
                              )
                              .html(),
                        Ce()("<div/>")
                          .append(
                            this.ui
                              .checkbox({
                                className: "sn-checkbox-use-protocol",
                                text: this.lang.link.useProtocol,
                                checked: !0,
                              })
                              .render()
                          )
                          .html(),
                      ].join(""),
                      n = '<input type="button" href="#" class="'
                        .concat(
                          "btn btn-primary note-btn note-btn-primary note-link-btn",
                          '" value="'
                        )
                        .concat(this.lang.link.insert, '" disabled>');
                    this.$dialog = this.ui
                      .dialog({
                        className: "link-dialog",
                        title: this.lang.link.insert,
                        fade: this.options.dialogsFade,
                        body: t,
                        footer: n,
                      })
                      .render()
                      .appendTo(e);
                  },
                },
                {
                  key: "destroy",
                  value: function () {
                    this.ui.hideDialog(this.$dialog), this.$dialog.remove();
                  },
                },
                {
                  key: "bindEnterKey",
                  value: function (e, t) {
                    e.on("keypress", function (e) {
                      e.keyCode === Xe.code.ENTER &&
                        (e.preventDefault(), t.trigger("click"));
                    });
                  },
                },
                {
                  key: "toggleLinkBtn",
                  value: function (e, t, n) {
                    this.ui.toggleBtn(e, t.val() && n.val());
                  },
                },
                {
                  key: "showLinkDialog",
                  value: function (e) {
                    var t = this;
                    return Ce.a
                      .Deferred(function (n) {
                        var o = t.$dialog.find(".note-link-text"),
                          i = t.$dialog.find(".note-link-url"),
                          r = t.$dialog.find(".note-link-btn"),
                          a = t.$dialog.find(
                            ".sn-checkbox-open-in-new-window input[type=checkbox]"
                          ),
                          s = t.$dialog.find(
                            ".sn-checkbox-use-protocol input[type=checkbox]"
                          );
                        t.ui.onDialogShown(t.$dialog, function () {
                          t.context.triggerEvent("dialog.shown"),
                            !e.url && Pe.isValidUrl(e.text) && (e.url = e.text),
                            o
                              .on("input paste propertychange", function () {
                                (e.text = o.val()), t.toggleLinkBtn(r, o, i);
                              })
                              .val(e.text),
                            i
                              .on("input paste propertychange", function () {
                                e.text || o.val(i.val()),
                                  t.toggleLinkBtn(r, o, i);
                              })
                              .val(e.url),
                            Ie.isSupportTouch || i.trigger("focus"),
                            t.toggleLinkBtn(r, o, i),
                            t.bindEnterKey(i, r),
                            t.bindEnterKey(o, r);
                          var l =
                            void 0 !== e.isNewWindow
                              ? e.isNewWindow
                              : t.context.options.linkTargetBlank;
                          a.prop("checked", l);
                          var c = !e.url && t.context.options.useProtocol;
                          s.prop("checked", c),
                            r.one("click", function (r) {
                              r.preventDefault(),
                                n.resolve({
                                  range: e.range,
                                  url: i.val(),
                                  text: o.val(),
                                  isNewWindow: a.is(":checked"),
                                  checkProtocol: s.is(":checked"),
                                }),
                                t.ui.hideDialog(t.$dialog);
                            });
                        }),
                          t.ui.onDialogHidden(t.$dialog, function () {
                            o.off(),
                              i.off(),
                              r.off(),
                              "pending" === n.state() && n.reject();
                          }),
                          t.ui.showDialog(t.$dialog);
                      })
                      .promise();
                  },
                },
                {
                  key: "show",
                  value: function () {
                    var e = this,
                      t = this.context.invoke("editor.getLinkInfo");
                    this.context.invoke("editor.saveRange"),
                      this.showLinkDialog(t)
                        .then(function (t) {
                          e.context.invoke("editor.restoreRange"),
                            e.context.invoke("editor.createLink", t);
                        })
                        .fail(function () {
                          e.context.invoke("editor.restoreRange");
                        });
                  },
                },
              ]) && he(t.prototype, n),
              o && he(t, o),
              e
            );
          })(),
          wt = (function () {
            function e(t) {
              var n = this;
              !(function (e, t) {
                if (!(e instanceof t))
                  throw new TypeError("Cannot call a class as a function");
              })(this, e),
                (this.context = t),
                (this.ui = Ce.a.summernote.ui),
                (this.options = t.options),
                (this.events = {
                  "summernote.keyup summernote.mouseup summernote.change summernote.scroll":
                    function () {
                      n.update();
                    },
                  "summernote.disable summernote.dialog.shown summernote.blur":
                    function () {
                      n.hide();
                    },
                });
            }
            var t, n, o;
            return (
              (t = e),
              (n = [
                {
                  key: "shouldInitialize",
                  value: function () {
                    return !Le.isEmpty(this.options.popover.link);
                  },
                },
                {
                  key: "initialize",
                  value: function () {
                    this.$popover = this.ui
                      .popover({
                        className: "note-link-popover",
                        callback: function (e) {
                          e.find(
                            ".popover-content,.note-popover-content"
                          ).prepend(
                            '<span><a target="_blank"></a>&nbsp;</span>'
                          );
                        },
                      })
                      .render()
                      .appendTo(this.options.container);
                    var e = this.$popover.find(
                      ".popover-content,.note-popover-content"
                    );
                    this.context.invoke(
                      "buttons.build",
                      e,
                      this.options.popover.link
                    ),
                      this.$popover.on("mousedown", function (e) {
                        e.preventDefault();
                      });
                  },
                },
                {
                  key: "destroy",
                  value: function () {
                    this.$popover.remove();
                  },
                },
                {
                  key: "update",
                  value: function () {
                    if (this.context.invoke("editor.hasFocus")) {
                      var e = this.context.invoke("editor.getLastRange");
                      if (e.isCollapsed() && e.isOnAnchor()) {
                        var t = Ve.ancestor(e.sc, Ve.isAnchor),
                          n = Ce()(t).attr("href");
                        this.$popover.find("a").attr("href", n).text(n);
                        var o = Ve.posFromPlaceholder(t),
                          i = Ce()(this.options.container).offset();
                        (o.top -= i.top),
                          (o.left -= i.left),
                          this.$popover.css({
                            display: "block",
                            left: o.left,
                            top: o.top,
                          });
                      } else this.hide();
                    } else this.hide();
                  },
                },
                {
                  key: "hide",
                  value: function () {
                    this.$popover.hide();
                  },
                },
              ]) && pe(t.prototype, n),
              o && pe(t, o),
              e
            );
          })(),
          _t = (function () {
            function e(t) {
              !(function (e, t) {
                if (!(e instanceof t))
                  throw new TypeError("Cannot call a class as a function");
              })(this, e),
                (this.context = t),
                (this.ui = Ce.a.summernote.ui),
                (this.$body = Ce()(document.body)),
                (this.$editor = t.layoutInfo.editor),
                (this.options = t.options),
                (this.lang = this.options.langInfo);
            }
            var t, n, o;
            return (
              (t = e),
              (n = [
                {
                  key: "initialize",
                  value: function () {
                    var e = "";
                    if (this.options.maximumImageFileSize) {
                      var t = Math.floor(
                          Math.log(this.options.maximumImageFileSize) /
                            Math.log(1024)
                        ),
                        n =
                          1 *
                            (
                              this.options.maximumImageFileSize /
                              Math.pow(1024, t)
                            ).toFixed(2) +
                          " " +
                          " KMGTP"[t] +
                          "B";
                      e = "<small>".concat(
                        this.lang.image.maximumFileSize + " : " + n,
                        "</small>"
                      );
                    }
                    var o = this.options.dialogsInBody
                        ? this.$body
                        : this.options.container,
                      i = [
                        '<div class="form-group note-form-group note-group-select-from-files">',
                        '<label for="note-dialog-image-file-' +
                          this.options.id +
                          '" class="note-form-label">' +
                          this.lang.image.selectFromFiles +
                          "</label>",
                        '<input id="note-dialog-image-file-' +
                          this.options.id +
                          '" class="note-image-input form-control-file note-form-control note-input" ',
                        ' type="file" name="files" accept="image/*" multiple="multiple"/>',
                        e,
                        "</div>",
                        '<div class="form-group note-group-image-url">',
                        '<label for="note-dialog-image-url-' +
                          this.options.id +
                          '" class="note-form-label">' +
                          this.lang.image.url +
                          "</label>",
                        '<input id="note-dialog-image-url-' +
                          this.options.id +
                          '" class="note-image-url form-control note-form-control note-input" type="text"/>',
                        "</div>",
                      ].join(""),
                      r = '<input type="button" href="#" class="'
                        .concat(
                          "btn btn-primary note-btn note-btn-primary note-image-btn",
                          '" value="'
                        )
                        .concat(this.lang.image.insert, '" disabled>');
                    this.$dialog = this.ui
                      .dialog({
                        title: this.lang.image.insert,
                        fade: this.options.dialogsFade,
                        body: i,
                        footer: r,
                      })
                      .render()
                      .appendTo(o);
                  },
                },
                {
                  key: "destroy",
                  value: function () {
                    this.ui.hideDialog(this.$dialog), this.$dialog.remove();
                  },
                },
                {
                  key: "bindEnterKey",
                  value: function (e, t) {
                    e.on("keypress", function (e) {
                      e.keyCode === Xe.code.ENTER &&
                        (e.preventDefault(), t.trigger("click"));
                    });
                  },
                },
                {
                  key: "show",
                  value: function () {
                    var e = this;
                    this.context.invoke("editor.saveRange"),
                      this.showImageDialog()
                        .then(function (t) {
                          e.ui.hideDialog(e.$dialog),
                            e.context.invoke("editor.restoreRange"),
                            "string" == typeof t
                              ? e.options.callbacks.onImageLinkInsert
                                ? e.context.triggerEvent("image.link.insert", t)
                                : e.context.invoke("editor.insertImage", t)
                              : e.context.invoke(
                                  "editor.insertImagesOrCallback",
                                  t
                                );
                        })
                        .fail(function () {
                          e.context.invoke("editor.restoreRange");
                        });
                  },
                },
                {
                  key: "showImageDialog",
                  value: function () {
                    var e = this;
                    return Ce.a.Deferred(function (t) {
                      var n = e.$dialog.find(".note-image-input"),
                        o = e.$dialog.find(".note-image-url"),
                        i = e.$dialog.find(".note-image-btn");
                      e.ui.onDialogShown(e.$dialog, function () {
                        e.context.triggerEvent("dialog.shown"),
                          n.replaceWith(
                            n
                              .clone()
                              .on("change", function (e) {
                                t.resolve(e.target.files || e.target.value);
                              })
                              .val("")
                          ),
                          o
                            .on("input paste propertychange", function () {
                              e.ui.toggleBtn(i, o.val());
                            })
                            .val(""),
                          Ie.isSupportTouch || o.trigger("focus"),
                          i.click(function (e) {
                            e.preventDefault(), t.resolve(o.val());
                          }),
                          e.bindEnterKey(o, i);
                      }),
                        e.ui.onDialogHidden(e.$dialog, function () {
                          n.off(),
                            o.off(),
                            i.off(),
                            "pending" === t.state() && t.reject();
                        }),
                        e.ui.showDialog(e.$dialog);
                    });
                  },
                },
              ]) && fe(t.prototype, n),
              o && fe(t, o),
              e
            );
          })(),
          Ct = (function () {
            function e(t) {
              var n = this;
              !(function (e, t) {
                if (!(e instanceof t))
                  throw new TypeError("Cannot call a class as a function");
              })(this, e),
                (this.context = t),
                (this.ui = Ce.a.summernote.ui),
                (this.editable = t.layoutInfo.editable[0]),
                (this.options = t.options),
                (this.events = {
                  "summernote.disable summernote.blur": function () {
                    n.hide();
                  },
                });
            }
            var t, n, o;
            return (
              (t = e),
              (n = [
                {
                  key: "shouldInitialize",
                  value: function () {
                    return !Le.isEmpty(this.options.popover.image);
                  },
                },
                {
                  key: "initialize",
                  value: function () {
                    this.$popover = this.ui
                      .popover({
                        className: "note-image-popover",
                      })
                      .render()
                      .appendTo(this.options.container);
                    var e = this.$popover.find(
                      ".popover-content,.note-popover-content"
                    );
                    this.context.invoke(
                      "buttons.build",
                      e,
                      this.options.popover.image
                    ),
                      this.$popover.on("mousedown", function (e) {
                        e.preventDefault();
                      });
                  },
                },
                {
                  key: "destroy",
                  value: function () {
                    this.$popover.remove();
                  },
                },
                {
                  key: "update",
                  value: function (e, t) {
                    if (Ve.isImg(e)) {
                      var n = Ce()(e).offset(),
                        o = Ce()(this.options.container).offset(),
                        i = {};
                      this.options.popatmouse
                        ? ((i.left = t.pageX - 20), (i.top = t.pageY))
                        : (i = n),
                        (i.top -= o.top),
                        (i.left -= o.left),
                        this.$popover.css({
                          display: "block",
                          left: i.left,
                          top: i.top,
                        });
                    } else this.hide();
                  },
                },
                {
                  key: "hide",
                  value: function () {
                    this.$popover.hide();
                  },
                },
              ]) && me(t.prototype, n),
              o && me(t, o),
              e
            );
          })(),
          kt = (function () {
            function e(t) {
              var n = this;
              !(function (e, t) {
                if (!(e instanceof t))
                  throw new TypeError("Cannot call a class as a function");
              })(this, e),
                (this.context = t),
                (this.ui = Ce.a.summernote.ui),
                (this.options = t.options),
                (this.events = {
                  "summernote.mousedown": function (e, t) {
                    n.update(t.target);
                  },
                  "summernote.keyup summernote.scroll summernote.change":
                    function () {
                      n.update();
                    },
                  "summernote.disable summernote.blur": function () {
                    n.hide();
                  },
                });
            }
            var t, n, o;
            return (
              (t = e),
              (n = [
                {
                  key: "shouldInitialize",
                  value: function () {
                    return !Le.isEmpty(this.options.popover.table);
                  },
                },
                {
                  key: "initialize",
                  value: function () {
                    this.$popover = this.ui
                      .popover({
                        className: "note-table-popover",
                      })
                      .render()
                      .appendTo(this.options.container);
                    var e = this.$popover.find(
                      ".popover-content,.note-popover-content"
                    );
                    this.context.invoke(
                      "buttons.build",
                      e,
                      this.options.popover.table
                    ),
                      Ie.isFF &&
                        document.execCommand(
                          "enableInlineTableEditing",
                          !1,
                          !1
                        ),
                      this.$popover.on("mousedown", function (e) {
                        e.preventDefault();
                      });
                  },
                },
                {
                  key: "destroy",
                  value: function () {
                    this.$popover.remove();
                  },
                },
                {
                  key: "update",
                  value: function (e) {
                    if (this.context.isDisabled()) return !1;
                    var t = Ve.isCell(e);
                    if (t) {
                      var n = Ve.posFromPlaceholder(e),
                        o = Ce()(this.options.container).offset();
                      (n.top -= o.top),
                        (n.left -= o.left),
                        this.$popover.css({
                          display: "block",
                          left: n.left,
                          top: n.top,
                        });
                    } else this.hide();
                    return t;
                  },
                },
                {
                  key: "hide",
                  value: function () {
                    this.$popover.hide();
                  },
                },
              ]) && ge(t.prototype, n),
              o && ge(t, o),
              e
            );
          })(),
          St = (function () {
            function e(t) {
              !(function (e, t) {
                if (!(e instanceof t))
                  throw new TypeError("Cannot call a class as a function");
              })(this, e),
                (this.context = t),
                (this.ui = Ce.a.summernote.ui),
                (this.$body = Ce()(document.body)),
                (this.$editor = t.layoutInfo.editor),
                (this.options = t.options),
                (this.lang = this.options.langInfo);
            }
            var t, n, o;
            return (
              (t = e),
              (n = [
                {
                  key: "initialize",
                  value: function () {
                    var e = this.options.dialogsInBody
                        ? this.$body
                        : this.options.container,
                      t = [
                        '<div class="form-group note-form-group row-fluid">',
                        '<label for="note-dialog-video-url-'
                          .concat(this.options.id, '" class="note-form-label">')
                          .concat(
                            this.lang.video.url,
                            ' <small class="text-muted">'
                          )
                          .concat(
                            this.lang.video.providers,
                            "</small></label>"
                          ),
                        '<input id="note-dialog-video-url-'.concat(
                          this.options.id,
                          '" class="note-video-url form-control note-form-control note-input" type="text"/>'
                        ),
                        "</div>",
                      ].join(""),
                      n = '<input type="button" href="#" class="'
                        .concat(
                          "btn btn-primary note-btn note-btn-primary note-video-btn",
                          '" value="'
                        )
                        .concat(this.lang.video.insert, '" disabled>');
                    this.$dialog = this.ui
                      .dialog({
                        title: this.lang.video.insert,
                        fade: this.options.dialogsFade,
                        body: t,
                        footer: n,
                      })
                      .render()
                      .appendTo(e);
                  },
                },
                {
                  key: "destroy",
                  value: function () {
                    this.ui.hideDialog(this.$dialog), this.$dialog.remove();
                  },
                },
                {
                  key: "bindEnterKey",
                  value: function (e, t) {
                    e.on("keypress", function (e) {
                      e.keyCode === Xe.code.ENTER &&
                        (e.preventDefault(), t.trigger("click"));
                    });
                  },
                },
                {
                  key: "createVideoNode",
                  value: function (e) {
                    var t,
                      n = e.match(
                        /\/\/(?:(?:www|m)\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))([\w|-]{11})(?:(?:[\?&]t=)(\S+))?$/
                      ),
                      o = e.match(
                        /(?:www\.|\/\/)instagram\.com\/p\/(.[a-zA-Z0-9_-]*)/
                      ),
                      i = e.match(/\/\/vine\.co\/v\/([a-zA-Z0-9]+)/),
                      r = e.match(
                        /\/\/(player\.)?vimeo\.com\/([a-z]*\/)*(\d+)[?]?.*/
                      ),
                      a = e.match(
                        /.+dailymotion.com\/(video|hub)\/([^_]+)[^#]*(#video=([^_&]+))?/
                      ),
                      s = e.match(
                        /\/\/v\.youku\.com\/v_show\/id_(\w+)=*\.html/
                      ),
                      l = e.match(/\/\/v\.qq\.com.*?vid=(.+)/),
                      c = e.match(
                        /\/\/v\.qq\.com\/x?\/?(page|cover).*?\/([^\/]+)\.html\??.*/
                      ),
                      u = e.match(/^.+.(mp4|m4v)$/),
                      d = e.match(/^.+.(ogg|ogv)$/),
                      h = e.match(/^.+.(webm)$/),
                      p = e.match(
                        /(?:www\.|\/\/)facebook\.com\/([^\/]+)\/videos\/([0-9]+)/
                      );
                    if (n && 11 === n[1].length) {
                      var f = n[1],
                        m = 0;
                      if (void 0 !== n[2]) {
                        var g = n[2].match(
                          /^(?:(\d+)h)?(?:(\d+)m)?(?:(\d+)s)?$/
                        );
                        if (g)
                          for (
                            var v = [3600, 60, 1], b = 0, y = v.length;
                            b < y;
                            b++
                          )
                            m +=
                              void 0 !== g[b + 1]
                                ? v[b] * parseInt(g[b + 1], 10)
                                : 0;
                      }
                      t = Ce()("<iframe>")
                        .attr("frameborder", 0)
                        .attr(
                          "src",
                          "//www.youtube.com/embed/" +
                            f +
                            (m > 0 ? "?start=" + m : "")
                        )
                        .attr("width", "640")
                        .attr("height", "360");
                    } else if (o && o[0].length)
                      t = Ce()("<iframe>")
                        .attr("frameborder", 0)
                        .attr(
                          "src",
                          "https://instagram.com/p/" + o[1] + "/embed/"
                        )
                        .attr("width", "612")
                        .attr("height", "710")
                        .attr("scrolling", "no")
                        .attr("allowtransparency", "true");
                    else if (i && i[0].length)
                      t = Ce()("<iframe>")
                        .attr("frameborder", 0)
                        .attr("src", i[0] + "/embed/simple")
                        .attr("width", "600")
                        .attr("height", "600")
                        .attr("class", "vine-embed");
                    else if (r && r[3].length)
                      t = Ce()(
                        "<iframe webkitallowfullscreen mozallowfullscreen allowfullscreen>"
                      )
                        .attr("frameborder", 0)
                        .attr("src", "//player.vimeo.com/video/" + r[3])
                        .attr("width", "640")
                        .attr("height", "360");
                    else if (a && a[2].length)
                      t = Ce()("<iframe>")
                        .attr("frameborder", 0)
                        .attr(
                          "src",
                          "//www.dailymotion.com/embed/video/" + a[2]
                        )
                        .attr("width", "640")
                        .attr("height", "360");
                    else if (s && s[1].length)
                      t = Ce()(
                        "<iframe webkitallowfullscreen mozallowfullscreen allowfullscreen>"
                      )
                        .attr("frameborder", 0)
                        .attr("height", "498")
                        .attr("width", "510")
                        .attr("src", "//player.youku.com/embed/" + s[1]);
                    else if ((l && l[1].length) || (c && c[2].length)) {
                      var w = l && l[1].length ? l[1] : c[2];
                      t = Ce()(
                        "<iframe webkitallowfullscreen mozallowfullscreen allowfullscreen>"
                      )
                        .attr("frameborder", 0)
                        .attr("height", "310")
                        .attr("width", "500")
                        .attr(
                          "src",
                          "https://v.qq.com/txp/iframe/player.html?vid=" +
                            w +
                            "&amp;auto=0"
                        );
                    } else if (u || d || h)
                      t = Ce()("<video controls>")
                        .attr("src", e)
                        .attr("width", "640")
                        .attr("height", "360");
                    else {
                      if (!p || !p[0].length) return !1;
                      t = Ce()("<iframe>")
                        .attr("frameborder", 0)
                        .attr(
                          "src",
                          "https://www.facebook.com/plugins/video.php?href=" +
                            encodeURIComponent(p[0]) +
                            "&show_text=0&width=560"
                        )
                        .attr("width", "560")
                        .attr("height", "301")
                        .attr("scrolling", "no")
                        .attr("allowtransparency", "true");
                    }
                    return t.addClass("note-video-clip"), t[0];
                  },
                },
                {
                  key: "show",
                  value: function () {
                    var e = this,
                      t = this.context.invoke("editor.getSelectedText");
                    this.context.invoke("editor.saveRange"),
                      this.showVideoDialog(t)
                        .then(function (t) {
                          e.ui.hideDialog(e.$dialog),
                            e.context.invoke("editor.restoreRange");
                          var n = e.createVideoNode(t);
                          n && e.context.invoke("editor.insertNode", n);
                        })
                        .fail(function () {
                          e.context.invoke("editor.restoreRange");
                        });
                  },
                },
                {
                  key: "showVideoDialog",
                  value: function () {
                    var e = this;
                    return Ce.a.Deferred(function (t) {
                      var n = e.$dialog.find(".note-video-url"),
                        o = e.$dialog.find(".note-video-btn");
                      e.ui.onDialogShown(e.$dialog, function () {
                        e.context.triggerEvent("dialog.shown"),
                          n.on("input paste propertychange", function () {
                            e.ui.toggleBtn(o, n.val());
                          }),
                          Ie.isSupportTouch || n.trigger("focus"),
                          o.click(function (e) {
                            e.preventDefault(), t.resolve(n.val());
                          }),
                          e.bindEnterKey(n, o);
                      }),
                        e.ui.onDialogHidden(e.$dialog, function () {
                          n.off(),
                            o.off(),
                            "pending" === t.state() && t.reject();
                        }),
                        e.ui.showDialog(e.$dialog);
                    });
                  },
                },
              ]) && ve(t.prototype, n),
              o && ve(t, o),
              e
            );
          })(),
          xt = (function () {
            function e(t) {
              !(function (e, t) {
                if (!(e instanceof t))
                  throw new TypeError("Cannot call a class as a function");
              })(this, e),
                (this.context = t),
                (this.ui = Ce.a.summernote.ui),
                (this.$body = Ce()(document.body)),
                (this.$editor = t.layoutInfo.editor),
                (this.options = t.options),
                (this.lang = this.options.langInfo);
            }
            var t, n, o;
            return (
              (t = e),
              (n = [
                {
                  key: "initialize",
                  value: function () {
                    var e = this.options.dialogsInBody
                        ? this.$body
                        : this.options.container,
                      t = [
                        '<p class="text-center">',
                        '<a href="http://summernote.org/" target="_blank">Summernote 0.8.18</a> \xb7 ',
                        '<a href="https://github.com/summernote/summernote" target="_blank">Project</a> \xb7 ',
                        '<a href="https://github.com/summernote/summernote/issues" target="_blank">Issues</a>',
                        "</p>",
                      ].join("");
                    this.$dialog = this.ui
                      .dialog({
                        title: this.lang.options.help,
                        fade: this.options.dialogsFade,
                        body: this.createShortcutList(),
                        footer: t,
                        callback: function (e) {
                          e.find(".modal-body,.note-modal-body").css({
                            "max-height": 300,
                            overflow: "scroll",
                          });
                        },
                      })
                      .render()
                      .appendTo(e);
                  },
                },
                {
                  key: "destroy",
                  value: function () {
                    this.ui.hideDialog(this.$dialog), this.$dialog.remove();
                  },
                },
                {
                  key: "createShortcutList",
                  value: function () {
                    var e = this,
                      t = this.options.keyMap[Ie.isMac ? "mac" : "pc"];
                    return Object.keys(t)
                      .map(function (n) {
                        var o = t[n],
                          i = Ce()(
                            '<div><div class="help-list-item"></div></div>'
                          );
                        return (
                          i
                            .append(
                              Ce()("<label><kbd>" + n + "</kdb></label>").css({
                                width: 180,
                                "margin-right": 10,
                              })
                            )
                            .append(
                              Ce()("<span/>").html(
                                e.context.memo("help." + o) || o
                              )
                            ),
                          i.html()
                        );
                      })
                      .join("");
                  },
                },
                {
                  key: "showHelpDialog",
                  value: function () {
                    var e = this;
                    return Ce.a
                      .Deferred(function (t) {
                        e.ui.onDialogShown(e.$dialog, function () {
                          e.context.triggerEvent("dialog.shown"), t.resolve();
                        }),
                          e.ui.showDialog(e.$dialog);
                      })
                      .promise();
                  },
                },
                {
                  key: "show",
                  value: function () {
                    var e = this;
                    this.context.invoke("editor.saveRange"),
                      this.showHelpDialog().then(function () {
                        e.context.invoke("editor.restoreRange");
                      });
                  },
                },
              ]) && be(t.prototype, n),
              o && be(t, o),
              e
            );
          })(),
          Et = (function () {
            function e(t) {
              var n = this;
              !(function (e, t) {
                if (!(e instanceof t))
                  throw new TypeError("Cannot call a class as a function");
              })(this, e),
                (this.context = t),
                (this.ui = Ce.a.summernote.ui),
                (this.options = t.options),
                (this.hidable = !0),
                (this.onContextmenu = !1),
                (this.pageX = null),
                (this.pageY = null),
                (this.events = {
                  "summernote.contextmenu": function (e) {
                    n.options.editing &&
                      (e.preventDefault(),
                      e.stopPropagation(),
                      (n.onContextmenu = !0),
                      n.update(!0));
                  },
                  "summernote.mousedown": function (e, t) {
                    (n.pageX = t.pageX), (n.pageY = t.pageY);
                  },
                  "summernote.keyup summernote.mouseup summernote.scroll":
                    function (e, t) {
                      n.options.editing &&
                        !n.onContextmenu &&
                        ((n.pageX = t.pageX), (n.pageY = t.pageY), n.update()),
                        (n.onContextmenu = !1);
                    },
                  "summernote.disable summernote.change summernote.dialog.shown summernote.blur":
                    function () {
                      n.hide();
                    },
                  "summernote.focusout": function () {
                    n.$popover.is(":active,:focus") || n.hide();
                  },
                });
            }
            var t, n, o;
            return (
              (t = e),
              (n = [
                {
                  key: "shouldInitialize",
                  value: function () {
                    return (
                      this.options.airMode &&
                      !Le.isEmpty(this.options.popover.air)
                    );
                  },
                },
                {
                  key: "initialize",
                  value: function () {
                    var e = this;
                    this.$popover = this.ui
                      .popover({
                        className: "note-air-popover",
                      })
                      .render()
                      .appendTo(this.options.container);
                    var t = this.$popover.find(".popover-content");
                    this.context.invoke(
                      "buttons.build",
                      t,
                      this.options.popover.air
                    ),
                      this.$popover.on("mousedown", function () {
                        e.hidable = !1;
                      }),
                      this.$popover.on("mouseup", function () {
                        e.hidable = !0;
                      });
                  },
                },
                {
                  key: "destroy",
                  value: function () {
                    this.$popover.remove();
                  },
                },
                {
                  key: "update",
                  value: function (e) {
                    var t = this.context.invoke("editor.currentStyle");
                    if (!t.range || (t.range.isCollapsed() && !e)) this.hide();
                    else {
                      var n = {
                          left: this.pageX,
                          top: this.pageY,
                        },
                        o = Ce()(this.options.container).offset();
                      (n.top -= o.top),
                        (n.left -= o.left),
                        this.$popover.css({
                          display: "block",
                          left: Math.max(n.left, 0) + -5,
                          top: n.top + 5,
                        }),
                        this.context.invoke(
                          "buttons.updateCurrentStyle",
                          this.$popover
                        );
                    }
                  },
                },
                {
                  key: "updateCodeview",
                  value: function (e) {
                    this.ui.toggleBtnActive(
                      this.$popover.find(".btn-codeview"),
                      e
                    ),
                      e && this.hide();
                  },
                },
                {
                  key: "hide",
                  value: function () {
                    this.hidable && this.$popover.hide();
                  },
                },
              ]) && ye(t.prototype, n),
              o && ye(t, o),
              e
            );
          })(),
          $t = (function () {
            function e(t) {
              var n = this;
              !(function (e, t) {
                if (!(e instanceof t))
                  throw new TypeError("Cannot call a class as a function");
              })(this, e),
                (this.context = t),
                (this.ui = Ce.a.summernote.ui),
                (this.$editable = t.layoutInfo.editable),
                (this.options = t.options),
                (this.hint = this.options.hint || []),
                (this.direction = this.options.hintDirection || "bottom"),
                (this.hints = Array.isArray(this.hint)
                  ? this.hint
                  : [this.hint]),
                (this.events = {
                  "summernote.keyup": function (e, t) {
                    t.isDefaultPrevented() || n.handleKeyup(t);
                  },
                  "summernote.keydown": function (e, t) {
                    n.handleKeydown(t);
                  },
                  "summernote.disable summernote.dialog.shown summernote.blur":
                    function () {
                      n.hide();
                    },
                });
            }
            var t, n, o;
            return (
              (t = e),
              (n = [
                {
                  key: "shouldInitialize",
                  value: function () {
                    return this.hints.length > 0;
                  },
                },
                {
                  key: "initialize",
                  value: function () {
                    var e = this;
                    (this.lastWordRange = null),
                      (this.matchingWord = null),
                      (this.$popover = this.ui
                        .popover({
                          className: "note-hint-popover",
                          hideArrow: !0,
                          direction: "",
                        })
                        .render()
                        .appendTo(this.options.container)),
                      this.$popover.hide(),
                      (this.$content = this.$popover.find(
                        ".popover-content,.note-popover-content"
                      )),
                      this.$content.on(
                        "click",
                        ".note-hint-item",
                        function (t) {
                          e.$content.find(".active").removeClass("active"),
                            Ce()(t.currentTarget).addClass("active"),
                            e.replace();
                        }
                      ),
                      this.$popover.on("mousedown", function (e) {
                        e.preventDefault();
                      });
                  },
                },
                {
                  key: "destroy",
                  value: function () {
                    this.$popover.remove();
                  },
                },
                {
                  key: "selectItem",
                  value: function (e) {
                    this.$content.find(".active").removeClass("active"),
                      e.addClass("active"),
                      (this.$content[0].scrollTop =
                        e[0].offsetTop - this.$content.innerHeight() / 2);
                  },
                },
                {
                  key: "moveDown",
                  value: function () {
                    var e = this.$content.find(".note-hint-item.active"),
                      t = e.next();
                    if (t.length) this.selectItem(t);
                    else {
                      var n = e.parent().next();
                      n.length ||
                        (n = this.$content.find(".note-hint-group").first()),
                        this.selectItem(n.find(".note-hint-item").first());
                    }
                  },
                },
                {
                  key: "moveUp",
                  value: function () {
                    var e = this.$content.find(".note-hint-item.active"),
                      t = e.prev();
                    if (t.length) this.selectItem(t);
                    else {
                      var n = e.parent().prev();
                      n.length ||
                        (n = this.$content.find(".note-hint-group").last()),
                        this.selectItem(n.find(".note-hint-item").last());
                    }
                  },
                },
                {
                  key: "replace",
                  value: function () {
                    var e = this.$content.find(".note-hint-item.active");
                    if (e.length) {
                      var t = this.nodeFromItem(e);
                      if (
                        null !== this.matchingWord &&
                        0 === this.matchingWord.length
                      )
                        this.lastWordRange.so = this.lastWordRange.eo;
                      else if (
                        null !== this.matchingWord &&
                        this.matchingWord.length > 0 &&
                        !this.lastWordRange.isCollapsed()
                      ) {
                        var n =
                          this.lastWordRange.eo -
                          this.lastWordRange.so -
                          this.matchingWord.length;
                        n > 0 && (this.lastWordRange.so += n);
                      }
                      if (
                        (this.lastWordRange.insertNode(t),
                        "next" === this.options.hintSelect)
                      ) {
                        var o = document.createTextNode("");
                        Ce()(t).after(o), Qe.createFromNodeBefore(o).select();
                      } else Qe.createFromNodeAfter(t).select();
                      (this.lastWordRange = null),
                        this.hide(),
                        this.context.invoke("editor.focus");
                    }
                  },
                },
                {
                  key: "nodeFromItem",
                  value: function (e) {
                    var t = this.hints[e.data("index")],
                      n = e.data("item"),
                      o = t.content ? t.content(n) : n;
                    return "string" == typeof o && (o = Ve.createText(o)), o;
                  },
                },
                {
                  key: "createItemTemplates",
                  value: function (e, t) {
                    var n = this.hints[e];
                    return t.map(function (t) {
                      var o = Ce()('<div class="note-hint-item"/>');
                      return (
                        o.append(n.template ? n.template(t) : t + ""),
                        o.data({
                          index: e,
                          item: t,
                        }),
                        o
                      );
                    });
                  },
                },
                {
                  key: "handleKeydown",
                  value: function (e) {
                    this.$popover.is(":visible") &&
                      (e.keyCode === Xe.code.ENTER
                        ? (e.preventDefault(), this.replace())
                        : e.keyCode === Xe.code.UP
                        ? (e.preventDefault(), this.moveUp())
                        : e.keyCode === Xe.code.DOWN &&
                          (e.preventDefault(), this.moveDown()));
                  },
                },
                {
                  key: "searchKeyword",
                  value: function (e, t, n) {
                    var o = this.hints[e];
                    if (o && o.match.test(t) && o.search) {
                      var i = o.match.exec(t);
                      (this.matchingWord = i[0]), o.search(i[1], n);
                    } else n();
                  },
                },
                {
                  key: "createGroup",
                  value: function (e, t) {
                    var n = this,
                      o = Ce()(
                        '<div class="note-hint-group note-hint-group-' +
                          e +
                          '"></div>'
                      );
                    return (
                      this.searchKeyword(e, t, function (t) {
                        (t = t || []).length &&
                          (o.html(n.createItemTemplates(e, t)), n.show());
                      }),
                      o
                    );
                  },
                },
                {
                  key: "handleKeyup",
                  value: function (e) {
                    var t = this;
                    if (
                      !Le.contains(
                        [Xe.code.ENTER, Xe.code.UP, Xe.code.DOWN],
                        e.keyCode
                      )
                    ) {
                      var n,
                        o,
                        i = this.context.invoke("editor.getLastRange");
                      if ("words" === this.options.hintMode) {
                        if (
                          ((n = i.getWordsRange(i)),
                          (o = n.toString()),
                          this.hints.forEach(function (e) {
                            if (e.match.test(o))
                              return (n = i.getWordsMatchRange(e.match)), !1;
                          }),
                          !n)
                        )
                          return void this.hide();
                        o = n.toString();
                      } else (n = i.getWordRange()), (o = n.toString());
                      if (this.hints.length && o) {
                        this.$content.empty();
                        var r = Pe.rect2bnd(Le.last(n.getClientRects())),
                          a = Ce()(this.options.container).offset();
                        r &&
                          ((r.top -= a.top),
                          (r.left -= a.left),
                          this.$popover.hide(),
                          (this.lastWordRange = n),
                          this.hints.forEach(function (e, n) {
                            e.match.test(o) &&
                              t.createGroup(n, o).appendTo(t.$content);
                          }),
                          this.$content
                            .find(".note-hint-item:first")
                            .addClass("active"),
                          "top" === this.direction
                            ? this.$popover.css({
                                left: r.left,
                                top: r.top - this.$popover.outerHeight() - 5,
                              })
                            : this.$popover.css({
                                left: r.left,
                                top: r.top + r.height + 5,
                              }));
                      } else this.hide();
                    }
                  },
                },
                {
                  key: "show",
                  value: function () {
                    this.$popover.show();
                  },
                },
                {
                  key: "hide",
                  value: function () {
                    this.$popover.hide();
                  },
                },
              ]) && we(t.prototype, n),
              o && we(t, o),
              e
            );
          })();
        Ce.a.summernote = Ce.a.extend(Ce.a.summernote, {
          version: "0.8.18",
          plugins: {},
          dom: Ve,
          range: Qe,
          lists: Le,
          options: {
            langInfo: Ce.a.summernote.lang["en-US"],
            editing: !0,
            modules: {
              editor: rt,
              clipboard: at,
              dropzone: st,
              codeview: lt,
              statusbar: ct,
              fullscreen: ut,
              handle: dt,
              hintPopover: $t,
              autoLink: pt,
              autoSync: ft,
              autoReplace: mt,
              placeholder: gt,
              buttons: vt,
              toolbar: bt,
              linkDialog: yt,
              linkPopover: wt,
              imageDialog: _t,
              imagePopover: Ct,
              tablePopover: kt,
              videoDialog: St,
              helpDialog: xt,
              airPopover: Et,
            },
            buttons: {},
            lang: "en-US",
            followingToolbar: !1,
            toolbarPosition: "top",
            otherStaticBar: "",
            codeviewKeepButton: !1,
            toolbar: [
              ["style", ["style"]],
              ["font", ["bold", "underline", "clear"]],
              ["fontname", ["fontname"]],
              ["color", ["color"]],
              ["para", ["ul", "ol", "paragraph"]],
              ["table", ["table"]],
              ["insert", ["link", "picture", "video"]],
              ["view", ["fullscreen", "codeview", "help"]],
            ],
            popatmouse: !0,
            popover: {
              image: [
                [
                  "resize",
                  ["resizeFull", "resizeHalf", "resizeQuarter", "resizeNone"],
                ],
                ["float", ["floatLeft", "floatRight", "floatNone"]],
                ["remove", ["removeMedia"]],
              ],
              link: [["link", ["linkDialogShow", "unlink"]]],
              table: [
                [
                  "add",
                  ["addRowDown", "addRowUp", "addColLeft", "addColRight"],
                ],
                ["delete", ["deleteRow", "deleteCol", "deleteTable"]],
              ],
              air: [
                ["color", ["color"]],
                ["font", ["bold", "underline", "clear"]],
                ["para", ["ul", "paragraph"]],
                ["table", ["table"]],
                ["insert", ["link", "picture"]],
                ["view", ["fullscreen", "codeview"]],
              ],
            },
            airMode: !1,
            overrideContextMenu: !1,
            width: null,
            height: null,
            linkTargetBlank: !0,
            useProtocol: !0,
            defaultProtocol: "http://",
            focus: !1,
            tabDisabled: !1,
            tabSize: 4,
            styleWithCSS: !1,
            shortcuts: !0,
            textareaAutoSync: !0,
            tooltip: "auto",
            container: null,
            maxTextLength: 0,
            blockquoteBreakingLevel: 2,
            spellCheck: !0,
            disableGrammar: !1,
            placeholder: null,
            inheritPlaceholder: !1,
            recordEveryKeystroke: !1,
            historyLimit: 200,
            showDomainOnlyForAutolink: !1,
            hintMode: "word",
            hintSelect: "after",
            hintDirection: "bottom",
            styleTags: [
              "p",
              "blockquote",
              "pre",
              "h1",
              "h2",
              "h3",
              "h4",
              "h5",
              "h6",
            ],
            fontNames: [
              "Arial",
              "Arial Black",
              "Comic Sans MS",
              "Courier New",
              "Helvetica Neue",
              "Helvetica",
              "Impact",
              "Lucida Grande",
              "Tahoma",
              "Times New Roman",
              "Verdana",
            ],
            fontNamesIgnoreCheck: [],
            addDefaultFonts: !0,
            fontSizes: ["8", "9", "10", "11", "12", "14", "18", "24", "36"],
            fontSizeUnits: ["px", "pt"],
            colors: [
              [
                "#000000",
                "#424242",
                "#636363",
                "#9C9C94",
                "#CEC6CE",
                "#EFEFEF",
                "#F7F7F7",
                "#FFFFFF",
              ],
              [
                "#FF0000",
                "#FF9C00",
                "#FFFF00",
                "#00FF00",
                "#00FFFF",
                "#0000FF",
                "#9C00FF",
                "#FF00FF",
              ],
              [
                "#F7C6CE",
                "#FFE7CE",
                "#FFEFC6",
                "#D6EFD6",
                "#CEDEE7",
                "#CEE7F7",
                "#D6D6E7",
                "#E7D6DE",
              ],
              [
                "#E79C9C",
                "#FFC69C",
                "#FFE79C",
                "#B5D6A5",
                "#A5C6CE",
                "#9CC6EF",
                "#B5A5D6",
                "#D6A5BD",
              ],
              [
                "#E76363",
                "#F7AD6B",
                "#FFD663",
                "#94BD7B",
                "#73A5AD",
                "#6BADDE",
                "#8C7BC6",
                "#C67BA5",
              ],
              [
                "#CE0000",
                "#E79439",
                "#EFC631",
                "#6BA54A",
                "#4A7B8C",
                "#3984C6",
                "#634AA5",
                "#A54A7B",
              ],
              [
                "#9C0000",
                "#B56308",
                "#BD9400",
                "#397B21",
                "#104A5A",
                "#085294",
                "#311873",
                "#731842",
              ],
              [
                "#630000",
                "#7B3900",
                "#846300",
                "#295218",
                "#083139",
                "#003163",
                "#21104A",
                "#4A1031",
              ],
            ],
            colorsName: [
              [
                "Black",
                "Tundora",
                "Dove Gray",
                "Star Dust",
                "Pale Slate",
                "Gallery",
                "Alabaster",
                "White",
              ],
              [
                "Red",
                "Orange Peel",
                "Yellow",
                "Green",
                "Cyan",
                "Blue",
                "Electric Violet",
                "Magenta",
              ],
              [
                "Azalea",
                "Karry",
                "Egg White",
                "Zanah",
                "Botticelli",
                "Tropical Blue",
                "Mischka",
                "Twilight",
              ],
              [
                "Tonys Pink",
                "Peach Orange",
                "Cream Brulee",
                "Sprout",
                "Casper",
                "Perano",
                "Cold Purple",
                "Careys Pink",
              ],
              [
                "Mandy",
                "Rajah",
                "Dandelion",
                "Olivine",
                "Gulf Stream",
                "Viking",
                "Blue Marguerite",
                "Puce",
              ],
              [
                "Guardsman Red",
                "Fire Bush",
                "Golden Dream",
                "Chelsea Cucumber",
                "Smalt Blue",
                "Boston Blue",
                "Butterfly Bush",
                "Cadillac",
              ],
              [
                "Sangria",
                "Mai Tai",
                "Buddha Gold",
                "Forest Green",
                "Eden",
                "Venice Blue",
                "Meteorite",
                "Claret",
              ],
              [
                "Rosewood",
                "Cinnamon",
                "Olive",
                "Parsley",
                "Tiber",
                "Midnight Blue",
                "Valentino",
                "Loulou",
              ],
            ],
            colorButton: {
              foreColor: "#000000",
              backColor: "#FFFF00",
            },
            lineHeights: [
              "1.0",
              "1.2",
              "1.4",
              "1.5",
              "1.6",
              "1.8",
              "2.0",
              "3.0",
            ],
            tableClassName: "table table-bordered",
            insertTableMaxSize: {
              col: 10,
              row: 10,
            },
            dialogsInBody: !1,
            dialogsFade: !1,
            maximumImageFileSize: null,
            callbacks: {
              onBeforeCommand: null,
              onBlur: null,
              onBlurCodeview: null,
              onChange: null,
              onChangeCodeview: null,
              onDialogShown: null,
              onEnter: null,
              onFocus: null,
              onImageLinkInsert: null,
              onImageUpload: null,
              onImageUploadError: null,
              onInit: null,
              onKeydown: null,
              onKeyup: null,
              onMousedown: null,
              onMouseup: null,
              onPaste: null,
              onScroll: null,
            },
            codemirror: {
              mode: "text/html",
              htmlMode: !0,
              lineNumbers: !0,
            },
            codeviewFilter: !1,
            codeviewFilterRegex:
              /<\/*(?:applet|b(?:ase|gsound|link)|embed|frame(?:set)?|ilayer|l(?:ayer|ink)|meta|object|s(?:cript|tyle)|t(?:itle|extarea)|xml)[^>]*?>/gi,
            codeviewIframeFilter: !0,
            codeviewIframeWhitelistSrc: [],
            codeviewIframeWhitelistSrcBase: [
              "www.youtube.com",
              "www.youtube-nocookie.com",
              "www.facebook.com",
              "vine.co",
              "instagram.com",
              "player.vimeo.com",
              "www.dailymotion.com",
              "player.youku.com",
              "v.qq.com",
            ],
            keyMap: {
              pc: {
                ESC: "escape",
                ENTER: "insertParagraph",
                "CTRL+Z": "undo",
                "CTRL+Y": "redo",
                TAB: "tab",
                "SHIFT+TAB": "untab",
                "CTRL+B": "bold",
                "CTRL+I": "italic",
                "CTRL+U": "underline",
                "CTRL+SHIFT+S": "strikethrough",
                "CTRL+BACKSLASH": "removeFormat",
                "CTRL+SHIFT+L": "justifyLeft",
                "CTRL+SHIFT+E": "justifyCenter",
                "CTRL+SHIFT+R": "justifyRight",
                "CTRL+SHIFT+J": "justifyFull",
                "CTRL+SHIFT+NUM7": "insertUnorderedList",
                "CTRL+SHIFT+NUM8": "insertOrderedList",
                "CTRL+LEFTBRACKET": "outdent",
                "CTRL+RIGHTBRACKET": "indent",
                "CTRL+NUM0": "formatPara",
                "CTRL+NUM1": "formatH1",
                "CTRL+NUM2": "formatH2",
                "CTRL+NUM3": "formatH3",
                "CTRL+NUM4": "formatH4",
                "CTRL+NUM5": "formatH5",
                "CTRL+NUM6": "formatH6",
                "CTRL+ENTER": "insertHorizontalRule",
                "CTRL+K": "linkDialog.show",
              },
              mac: {
                ESC: "escape",
                ENTER: "insertParagraph",
                "CMD+Z": "undo",
                "CMD+SHIFT+Z": "redo",
                TAB: "tab",
                "SHIFT+TAB": "untab",
                "CMD+B": "bold",
                "CMD+I": "italic",
                "CMD+U": "underline",
                "CMD+SHIFT+S": "strikethrough",
                "CMD+BACKSLASH": "removeFormat",
                "CMD+SHIFT+L": "justifyLeft",
                "CMD+SHIFT+E": "justifyCenter",
                "CMD+SHIFT+R": "justifyRight",
                "CMD+SHIFT+J": "justifyFull",
                "CMD+SHIFT+NUM7": "insertUnorderedList",
                "CMD+SHIFT+NUM8": "insertOrderedList",
                "CMD+LEFTBRACKET": "outdent",
                "CMD+RIGHTBRACKET": "indent",
                "CMD+NUM0": "formatPara",
                "CMD+NUM1": "formatH1",
                "CMD+NUM2": "formatH2",
                "CMD+NUM3": "formatH3",
                "CMD+NUM4": "formatH4",
                "CMD+NUM5": "formatH5",
                "CMD+NUM6": "formatH6",
                "CMD+ENTER": "insertHorizontalRule",
                "CMD+K": "linkDialog.show",
              },
            },
            icons: {
              align: "note-icon-align",
              alignCenter: "note-icon-align-center",
              alignJustify: "note-icon-align-justify",
              alignLeft: "note-icon-align-left",
              alignRight: "note-icon-align-right",
              rowBelow: "note-icon-row-below",
              colBefore: "note-icon-col-before",
              colAfter: "note-icon-col-after",
              rowAbove: "note-icon-row-above",
              rowRemove: "note-icon-row-remove",
              colRemove: "note-icon-col-remove",
              indent: "note-icon-align-indent",
              outdent: "note-icon-align-outdent",
              arrowsAlt: "note-icon-arrows-alt",
              bold: "note-icon-bold",
              caret: "note-icon-caret",
              circle: "note-icon-circle",
              close: "note-icon-close",
              code: "note-icon-code",
              eraser: "note-icon-eraser",
              floatLeft: "note-icon-float-left",
              floatRight: "note-icon-float-right",
              font: "note-icon-font",
              frame: "note-icon-frame",
              italic: "note-icon-italic",
              link: "note-icon-link",
              unlink: "note-icon-chain-broken",
              magic: "note-icon-magic",
              menuCheck: "note-icon-menu-check",
              minus: "note-icon-minus",
              orderedlist: "note-icon-orderedlist",
              pencil: "note-icon-pencil",
              picture: "note-icon-picture",
              question: "note-icon-question",
              redo: "note-icon-redo",
              rollback: "note-icon-rollback",
              square: "note-icon-square",
              strikethrough: "note-icon-strikethrough",
              subscript: "note-icon-subscript",
              superscript: "note-icon-superscript",
              table: "note-icon-table",
              textHeight: "note-icon-text-height",
              trash: "note-icon-trash",
              underline: "note-icon-underline",
              undo: "note-icon-undo",
              unorderedlist: "note-icon-unorderedlist",
              video: "note-icon-video",
            },
          },
        });
      },
      4: function () {},
      52: function (e, t, n) {
        "use strict";
        function o(e) {
          return (o =
            "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
              ? function (e) {
                  return typeof e;
                }
              : function (e) {
                  return e &&
                    "function" == typeof Symbol &&
                    e.constructor === Symbol &&
                    e !== Symbol.prototype
                    ? "symbol"
                    : typeof e;
                })(e);
        }
        n.r(t);
        var i = n(0),
          r = n.n(i),
          a = n(1),
          s = a.a.create(
            '<div class="note-editor note-frame panel panel-default"/>'
          ),
          l = a.a.create(
            '<div class="panel-heading note-toolbar" role="toolbar"/>'
          ),
          c = a.a.create('<div class="note-editing-area"/>'),
          u = a.a.create(
            '<textarea class="note-codable" aria-multiline="true"/>'
          ),
          d = a.a.create(
            '<div class="note-editable" contentEditable="true" role="textbox" aria-multiline="true"/>'
          ),
          h = a.a.create(
            [
              '<output class="note-status-output" role="status" aria-live="polite"></output>',
              '<div class="note-statusbar" role="status">',
              '<div class="note-resizebar" aria-label="Resize">',
              '<div class="note-icon-bar"></div>',
              '<div class="note-icon-bar"></div>',
              '<div class="note-icon-bar"></div>',
              "</div>",
              "</div>",
            ].join("")
          ),
          p = a.a.create('<div class="note-editor note-airframe"/>'),
          f = a.a.create(
            [
              '<div class="note-editable" contentEditable="true" role="textbox" aria-multiline="true"></div>',
              '<output class="note-status-output" role="status" aria-live="polite"></output>',
            ].join("")
          ),
          m = a.a.create('<div class="note-btn-group btn-group">'),
          g = a.a.create(
            '<ul class="note-dropdown-menu dropdown-menu">',
            function (e, t) {
              var n = Array.isArray(t.items)
                ? t.items
                    .map(function (e) {
                      var n = "string" == typeof e ? e : e.value || "",
                        i = t.template ? t.template(e) : e,
                        r = "object" === o(e) ? e.option : void 0;
                      return (
                        '<li aria-label="' +
                        n +
                        '"><a href="#" data-value="' +
                        n +
                        '"' +
                        (void 0 !== r ? ' data-option="' + r + '"' : "") +
                        ">" +
                        i +
                        "</a></li>"
                      );
                    })
                    .join("")
                : t.items;
              e.html(n).attr({
                "aria-label": t.title,
              }),
                t && t.codeviewKeepButton && e.addClass("note-codeview-keep");
            }
          ),
          v = function (e, t) {
            return e + " " + C(t.icons.caret, "span");
          },
          b = a.a.create(
            '<ul class="note-dropdown-menu dropdown-menu note-check">',
            function (e, t) {
              var n = Array.isArray(t.items)
                ? t.items
                    .map(function (e) {
                      var n = "string" == typeof e ? e : e.value || "",
                        o = t.template ? t.template(e) : e;
                      return (
                        '<li aria-label="' +
                        e +
                        '"><a href="#" data-value="' +
                        n +
                        '">' +
                        C(t.checkClassName) +
                        " " +
                        o +
                        "</a></li>"
                      );
                    })
                    .join("")
                : t.items;
              e.html(n).attr({
                "aria-label": t.title,
              }),
                t && t.codeviewKeepButton && e.addClass("note-codeview-keep");
            }
          ),
          y = a.a.create(
            '<div class="modal note-modal" aria-hidden="false" tabindex="-1" role="dialog"/>',
            function (e, t) {
              t.fade && e.addClass("fade"),
                e.attr({
                  "aria-label": t.title,
                }),
                e.html(
                  [
                    '<div class="modal-dialog">',
                    '<div class="modal-content">',
                    t.title
                      ? '<div class="modal-header"><button type="button" class="close" data-dismiss="modal" aria-label="Close" aria-hidden="true">&times;</button><h4 class="modal-title">' +
                        t.title +
                        "</h4></div>"
                      : "",
                    '<div class="modal-body">' + t.body + "</div>",
                    t.footer
                      ? '<div class="modal-footer">' + t.footer + "</div>"
                      : "",
                    "</div>",
                    "</div>",
                  ].join("")
                );
            }
          ),
          w = a.a.create(
            [
              '<div class="note-popover popover in">',
              '<div class="arrow"></div>',
              '<div class="popover-content note-children-container"></div>',
              "</div>",
            ].join(""),
            function (e, t) {
              var n = void 0 !== t.direction ? t.direction : "bottom";
              e.addClass(n), t.hideArrow && e.find(".arrow").hide();
            }
          ),
          _ = a.a.create('<div class="checkbox"></div>', function (e, t) {
            e.html(
              [
                "<label" + (t.id ? ' for="note-' + t.id + '"' : "") + ">",
                '<input type="checkbox"' +
                  (t.id ? ' id="note-' + t.id + '"' : ""),
                t.checked ? " checked" : "",
                ' aria-checked="' + (t.checked ? "true" : "false") + '"/>',
                t.text ? t.text : "",
                "</label>",
              ].join("")
            );
          }),
          C = function (e, t) {
            return "<" + (t = t || "i") + ' class="' + e + '"></' + t + ">";
          },
          k = function (e) {
            return {
              editor: s,
              toolbar: l,
              editingArea: c,
              codable: u,
              editable: d,
              statusbar: h,
              airEditor: p,
              airEditable: f,
              buttonGroup: m,
              dropdown: g,
              dropdownButtonContents: v,
              dropdownCheck: b,
              dialog: y,
              popover: w,
              checkbox: _,
              icon: C,
              options: e,
              palette: function (t, n) {
                return a.a.create(
                  '<div class="note-color-palette"/>',
                  function (t, n) {
                    for (var o = [], i = 0, r = n.colors.length; i < r; i++) {
                      for (
                        var a = n.eventName,
                          s = n.colors[i],
                          l = n.colorsName[i],
                          c = [],
                          u = 0,
                          d = s.length;
                        u < d;
                        u++
                      ) {
                        var h = s[u],
                          p = l[u];
                        c.push(
                          [
                            '<button type="button" class="note-color-btn"',
                            'style="background-color:',
                            h,
                            '" ',
                            'data-event="',
                            a,
                            '" ',
                            'data-value="',
                            h,
                            '" ',
                            'title="',
                            p,
                            '" ',
                            'aria-label="',
                            p,
                            '" ',
                            'data-toggle="button" tabindex="-1"></button>',
                          ].join("")
                        );
                      }
                      o.push(
                        '<div class="note-color-row">' + c.join("") + "</div>"
                      );
                    }
                    t.html(o.join("")),
                      n.tooltip &&
                        t.find(".note-color-btn").tooltip({
                          container: n.container || e.container,
                          trigger: "hover",
                          placement: "bottom",
                        });
                  }
                )(t, n);
              },
              button: function (t, n) {
                return a.a.create(
                  '<button type="button" class="note-btn btn btn-default btn-sm" tabindex="-1">',
                  function (t, n) {
                    n &&
                      n.tooltip &&
                      t
                        .attr({
                          title: n.tooltip,
                          "aria-label": n.tooltip,
                        })
                        .tooltip({
                          container: n.container || e.container,
                          trigger: "hover",
                          placement: "bottom",
                        })
                        .on("click", function (e) {
                          r()(e.currentTarget).tooltip("hide");
                        }),
                      n && n.codeviewButton && t.addClass("note-codeview-keep");
                  }
                )(t, n);
              },
              toggleBtn: function (e, t) {
                e.toggleClass("disabled", !t), e.attr("disabled", !t);
              },
              toggleBtnActive: function (e, t) {
                e.toggleClass("active", t);
              },
              onDialogShown: function (e, t) {
                e.one("shown.bs.modal", t);
              },
              onDialogHidden: function (e, t) {
                e.one("hidden.bs.modal", t);
              },
              showDialog: function (e) {
                e.modal("show");
              },
              hideDialog: function (e) {
                e.modal("hide");
              },
              createLayout: function (t) {
                var n = (
                  e.airMode
                    ? p([c([u(), f()])])
                    : "bottom" === e.toolbarPosition
                    ? s([c([u(), d()]), l(), h()])
                    : s([l(), c([u(), d()]), h()])
                ).render();
                return (
                  n.insertAfter(t),
                  {
                    note: t,
                    editor: n,
                    toolbar: n.find(".note-toolbar"),
                    editingArea: n.find(".note-editing-area"),
                    editable: n.find(".note-editable"),
                    codable: n.find(".note-codable"),
                    statusbar: n.find(".note-statusbar"),
                  }
                );
              },
              removeLayout: function (e, t) {
                e.html(t.editable.html()), t.editor.remove(), e.show();
              },
            };
          };
        n(3),
          n(4),
          (r.a.summernote = r.a.extend(r.a.summernote, {
            ui_template: k,
            interface: "bs3",
          }));
      },
    });
  }),
  angular
    .module("summernote", [])
    .controller("SummernoteController", [
      "$scope",
      "$attrs",
      "$timeout",
      function (e, t, n) {
        "use strict";
        var o,
          i = angular.copy(e.summernoteConfig) || {};
        if (
          (angular.isDefined(t.height) && (i.height = +t.height),
          angular.isDefined(t.minHeight) && (i.minHeight = +t.minHeight),
          angular.isDefined(t.maxHeight) && (i.maxHeight = +t.maxHeight),
          angular.isDefined(t.placeholder) && (i.placeholder = t.placeholder),
          angular.isDefined(t.focus) && (i.focus = !0),
          angular.isDefined(t.airmode) && (i.airMode = !0),
          angular.isDefined(t.dialogsinbody) && (i.dialogsInBody = !0),
          angular.isDefined(t.lang))
        ) {
          if (!angular.isDefined($.summernote.lang[t.lang]))
            throw new Error('"' + t.lang + '" lang file must be exist.');
          i.lang = t.lang;
        }
        (i.callbacks = i.callbacks || {}),
          angular.isDefined(t.onInit) &&
            (i.callbacks.onInit = function (t) {
              e.init({
                evt: t,
              });
            }),
          angular.isDefined(t.onEnter) &&
            (i.callbacks.onEnter = function (t) {
              e.enter({
                evt: t,
              });
            }),
          angular.isDefined(t.onFocus) &&
            (i.callbacks.onFocus = function (t) {
              e.focus({
                evt: t,
              });
            }),
          angular.isDefined(t.onPaste) &&
            (i.callbacks.onPaste = function (t) {
              e.paste({
                evt: t,
              });
            }),
          angular.isDefined(t.onKeyup) &&
            (i.callbacks.onKeyup = function (t) {
              e.keyup({
                evt: t,
              });
            }),
          angular.isDefined(t.onKeydown) &&
            (i.callbacks.onKeydown = function (t) {
              e.keydown({
                evt: t,
              });
            }),
          angular.isDefined(t.onImageUpload) &&
            (i.callbacks.onImageUpload = function (t) {
              e.imageUpload({
                files: t,
                editable: e.editable,
              });
            }),
          angular.isDefined(t.onMediaDelete) &&
            (i.callbacks.onMediaDelete = function (t) {
              var n = {
                attrs: {},
              };
              (n.tagName = t[0].tagName),
                angular.forEach(t[0].attributes, function (e) {
                  n.attrs[e.name] = e.value;
                }),
                e.mediaDelete({
                  target: n,
                });
            }),
          (this.activate = function (r, a, s) {
            var l = function () {
                var e = a.summernote("code");
                a.summernote("isEmpty") && (e = ""),
                  s &&
                    s.$viewValue !== e &&
                    n(function () {
                      s.$setViewValue(e);
                    }, 0);
              },
              c = i.callbacks.onChange;
            (i.callbacks.onChange = function (o) {
              n(function () {
                a.summernote("isEmpty") && (o = ""), l();
              }, 0),
                angular.isDefined(t.onChange)
                  ? e.change({
                      contents: o,
                      editable: e.editable,
                    })
                  : angular.isFunction(c) && c.apply(this, arguments);
            }),
              angular.isDefined(t.onBlur) &&
                (i.callbacks.onBlur = function (t) {
                  !i.airMode && a.blur(),
                    e.blur({
                      evt: t,
                    });
                }),
              a.summernote(i);
            var u,
              d = a.next(".note-editor");
            d.find(".note-toolbar").click(function () {
              l(),
                d.hasClass("codeview")
                  ? (d.on("keyup", l),
                    s &&
                      (u = r.$watch(
                        function () {
                          return s.$modelValue;
                        },
                        function (e) {
                          d.find(".note-codable").val(e);
                        }
                      )))
                  : (d.off("keyup", l), angular.isFunction(u) && u());
            }),
              s &&
                (s.$render = function () {
                  s.$viewValue
                    ? a.summernote("code", s.$viewValue)
                    : a.summernote("empty");
                }),
              angular.isDefined(t.editable) &&
                (e.editable = d.find(".note-editable")),
              angular.isDefined(t.editor) && (e.editor = a),
              (o = a),
              a.on("$destroy", function () {
                a.summernote("destroy"), (e.summernoteDestroyed = !0);
              });
          }),
          e.$on("$destroy", function () {
            e.summernoteDestroyed || o.summernote("destroy");
          });
      },
    ])
    .directive("summernote", [
      function () {
        "use strict";
        return {
          restrict: "EA",
          transclude: "element",
          replace: !0,
          require: ["summernote", "?ngModel"],
          controller: "SummernoteController",
          scope: {
            summernoteConfig: "=config",
            editable: "=",
            editor: "=",
            init: "&onInit",
            enter: "&onEnter",
            focus: "&onFocus",
            blur: "&onBlur",
            paste: "&onPaste",
            keyup: "&onKeyup",
            keydown: "&onKeydown",
            change: "&onChange",
            imageUpload: "&onImageUpload",
            mediaDelete: "&onMediaDelete",
          },
          template: '<div class="summernote"></div>',
          link: function (e, t, n, o, i) {
            var r = o[0],
              a = o[1];
            if (a)
              var s = e.$watch(
                function () {
                  return a.$viewValue;
                },
                function (n) {
                  s(), t.append(n), r.activate(e, t, a);
                },
                !0
              );
            else
              i(e, function (e) {
                t.append(e.html());
              }),
                r.activate(e, t, a);
          },
        };
      },
    ]),
  define(
    "ace/keyboard/vim",
    [
      "require",
      "exports",
      "module",
      "ace/range",
      "ace/lib/event_emitter",
      "ace/lib/dom",
      "ace/lib/oop",
      "ace/lib/keys",
      "ace/lib/event",
      "ace/search",
      "ace/lib/useragent",
      "ace/search_highlight",
      "ace/commands/multi_select_commands",
      "ace/mode/text",
      "ace/multi_select",
    ],
    function (e, t) {
      "use strict";
      function n(e) {
        return {
          row: e.line,
          column: e.ch,
        };
      }
      function o(e) {
        return new $t(e.row, e.column);
      }
      function i(e) {
        e.setOption("disableInput", !0),
          e.setOption("showCursorWhenSelecting", !1),
          St.signal(e, "vim-mode-change", {
            mode: "normal",
          }),
          e.on("cursorActivity", nt),
          k(e),
          St.on(e.getInputField(), "paste", u(e));
      }
      function r(e) {
        e.setOption("disableInput", !1),
          e.off("cursorActivity", nt),
          St.off(e.getInputField(), "paste", u(e)),
          (e.state.vim = null);
      }
      function a(e, t) {
        this == St.keyMap.vim &&
          St.rmClass(e.getWrapperElement(), "cm-fat-cursor"),
          (t && t.attach == s) || r(e);
      }
      function s(e, t) {
        this == St.keyMap.vim &&
          St.addClass(e.getWrapperElement(), "cm-fat-cursor"),
          (t && t.attach == s) || i(e);
      }
      function l(e, t) {
        if (t) {
          var n = c(e);
          if (!n) return !1;
          var o = St.Vim.findKey(t, n);
          return "function" == typeof o && St.signal(t, "vim-keypress", n), o;
        }
      }
      function c(e) {
        if ("'" == e.charAt(0)) return e.charAt(1);
        var t = e.split(/-(?!$)/),
          n = t[t.length - 1];
        if (1 == t.length && 1 == t[0].length) return !1;
        if (2 == t.length && "Shift" == t[0] && 1 == n.length) return !1;
        for (var o = !1, i = 0; i < t.length; i++) {
          var r = t[i];
          r in At ? (t[i] = At[r]) : (o = !0), r in Mt && (t[i] = Mt[r]);
        }
        return (
          !!o &&
          (g(n) && (t[t.length - 1] = n.toLowerCase()), "<" + t.join("-") + ">")
        );
      }
      function u(e) {
        var t = e.state.vim;
        return (
          t.onPasteFn ||
            (t.onPasteFn = function () {
              t.insertMode ||
                (e.setCursor(N(e.getCursor(), 0, 1)),
                Gt.enterInsertMode(e, {}, t));
            }),
          t.onPasteFn
        );
      }
      function d(e, t) {
        for (var n = [], o = e; o < e + t; o++) n.push(String.fromCharCode(o));
        return n;
      }
      function h(e, t) {
        return t >= e.firstLine() && t <= e.lastLine();
      }
      function p(e) {
        return /^[a-z]$/.test(e);
      }
      function f(e) {
        return -1 != "()[]{}".indexOf(e);
      }
      function m(e) {
        return Ot.test(e);
      }
      function g(e) {
        return /^[A-Z]$/.test(e);
      }
      function v(e) {
        return /^\s*$/.test(e);
      }
      function b(e, t) {
        for (var n = 0; n < t.length; n++) if (t[n] == e) return !0;
        return !1;
      }
      function y(e, t, n, o, i) {
        if (void 0 === t && !i)
          throw Error("defaultValue is required unless callback is provided");
        if (
          (n || (n = "string"),
          (Bt[e] = {
            type: n,
            defaultValue: t,
            callback: i,
          }),
          o)
        )
          for (var r = 0; r < o.length; r++) Bt[o[r]] = Bt[e];
        t && w(e, t);
      }
      function w(e, t, n, o) {
        var i = Bt[e],
          r = (o = o || {}).scope;
        if (!i) throw Error("Unknown option: " + e);
        if ("boolean" == i.type) {
          if (t && !0 !== t) throw Error("Invalid argument: " + e + "=" + t);
          !1 !== t && (t = !0);
        }
        i.callback
          ? ("local" !== r && i.callback(t, void 0),
            "global" !== r && n && i.callback(t, n))
          : ("local" !== r && (i.value = "boolean" == i.type ? !!t : t),
            "global" !== r &&
              n &&
              (n.state.vim.options[e] = {
                value: t,
              }));
      }
      function _(e, t, n) {
        var o = Bt[e],
          i = (n = n || {}).scope;
        if (!o) throw Error("Unknown option: " + e);
        if (o.callback) {
          var r = t && o.callback(void 0, t);
          return "global" !== i && void 0 !== r
            ? r
            : "local" !== i
            ? o.callback()
            : void 0;
        }
        return (
          (r = "global" !== i && t && t.state.vim.options[e]) ||
          ("local" !== i && o) ||
          {}
        ).value;
      }
      function C() {
        (this.latestRegister = void 0),
          (this.isPlaying = !1),
          (this.isRecording = !1),
          (this.replaySearchQueries = []),
          (this.onRecordingDone = void 0),
          (this.lastInsertModeChanges = qt());
      }
      function k(e) {
        return (
          e.state.vim ||
            (e.state.vim = {
              inputState: new x(),
              lastEditInputState: void 0,
              lastEditActionCommand: void 0,
              lastHPos: -1,
              lastHSPos: -1,
              lastMotion: null,
              marks: {},
              fakeCursor: null,
              insertMode: !1,
              insertModeRepeat: void 0,
              visualMode: !1,
              visualLine: !1,
              visualBlock: !1,
              lastSelection: null,
              lastPastedText: null,
              sel: {},
              options: {},
            }),
          e.state.vim
        );
      }
      function S() {
        for (var e in ((Ft = {
          searchQuery: null,
          searchIsReversed: !1,
          lastSubstituteReplacePart: void 0,
          jumpList: Ut(),
          macroModeState: new C(),
          lastChararacterSearch: {
            increment: 0,
            forward: !0,
            selectedCharacter: "",
          },
          registerController: new A({}),
          searchHistoryController: new M(),
          exCommandHistoryController: new M(),
        }),
        Bt)) {
          var t = Bt[e];
          t.value = t.defaultValue;
        }
      }
      function x() {
        (this.prefixRepeat = []),
          (this.motionRepeat = []),
          (this.operator = null),
          (this.operatorArgs = null),
          (this.motion = null),
          (this.motionArgs = null),
          (this.keyBuffer = []),
          (this.registerName = null);
      }
      function E(e, t) {
        (e.state.vim.inputState = new x()), St.signal(e, "vim-command-done", t);
      }
      function $(e, t, n) {
        this.clear(),
          (this.keyBuffer = [e || ""]),
          (this.insertModeChanges = []),
          (this.searchQueries = []),
          (this.linewise = !!t),
          (this.blockwise = !!n);
      }
      function T(e, t) {
        var n = Ft.registerController.registers[e];
        if (!e || 1 != e.length)
          throw Error("Register name must be 1 character");
        (n[e] = t), Ht.push(e);
      }
      function A(e) {
        (this.registers = e),
          (this.unnamedRegister = e['"'] = new $()),
          (e["."] = new $()),
          (e[":"] = new $()),
          (e["/"] = new $());
      }
      function M() {
        (this.historyBuffer = []), this.iterator, (this.initialPrefix = null);
      }
      function O(e, t) {
        Wt[e] = t;
      }
      function I(e, t) {
        for (var n = [], o = 0; o < t; o++) n.push(e);
        return n;
      }
      function R(e, t) {
        Vt[e] = t;
      }
      function P(e, t) {
        Gt[e] = t;
      }
      function L(e, t, n) {
        var o = Math.min(Math.max(e.firstLine(), t.line), e.lastLine()),
          i = Y(e, o) - 1;
        i = n ? i + 1 : i;
        var r = Math.min(Math.max(0, t.ch), i);
        return $t(o, r);
      }
      function D(e) {
        var t = {};
        for (var n in e) e.hasOwnProperty(n) && (t[n] = e[n]);
        return t;
      }
      function N(e, t, n) {
        return (
          "object" == typeof t && ((n = t.ch), (t = t.line)),
          $t(e.line + t, e.ch + n)
        );
      }
      function H(e, t) {
        return {
          line: t.line - e.line,
          ch: t.line - e.line,
        };
      }
      function B(e, t, n, o) {
        for (var i, r = [], a = [], s = 0; s < t.length; s++) {
          var l = t[s];
          ("insert" == n && "insert" != l.context) ||
            (l.context && l.context != n) ||
            (o.operator && "action" == l.type) ||
            !(i = F(e, l.keys)) ||
            ("partial" == i && r.push(l), "full" == i && a.push(l));
        }
        return {
          partial: r.length && r,
          full: a.length && a,
        };
      }
      function F(e, t) {
        if ("<character>" == t.slice(-11)) {
          var n = t.length - 11,
            o = e.slice(0, n),
            i = t.slice(0, n);
          return o == i && e.length > n
            ? "full"
            : 0 == i.indexOf(o) && "partial";
        }
        return e == t ? "full" : 0 == t.indexOf(e) && "partial";
      }
      function j(e) {
        var t = /^.*(<[\w\-]+>)$/.exec(e),
          n = t ? t[1] : e.slice(-1);
        if (n.length > 1)
          switch (n) {
            case "<CR>":
              n = "\n";
              break;
            case "<Space>":
              n = " ";
          }
        return n;
      }
      function U(e, t, n) {
        return function () {
          for (var o = 0; o < n; o++) t(e);
        };
      }
      function q(e) {
        return $t(e.line, e.ch);
      }
      function z(e, t) {
        return e.ch == t.ch && e.line == t.line;
      }
      function K(e, t) {
        return e.line < t.line || (e.line == t.line && e.ch < t.ch);
      }
      function W(e, t) {
        return (
          arguments.length > 2 &&
            (t = W.apply(void 0, Array.prototype.slice.call(arguments, 1))),
          K(e, t) ? e : t
        );
      }
      function V(e, t) {
        return (
          arguments.length > 2 &&
            (t = V.apply(void 0, Array.prototype.slice.call(arguments, 1))),
          K(e, t) ? t : e
        );
      }
      function G(e, t, n) {
        var o = K(e, t),
          i = K(t, n);
        return o && i;
      }
      function Y(e, t) {
        return e.getLine(t).length;
      }
      function Q(e) {
        return e.trim ? e.trim() : e.replace(/^\s+|\s+$/g, "");
      }
      function J(e) {
        return e.replace(/([.?*+$\[\]\/\\(){}|\-])/g, "\\$1");
      }
      function X(e, t, n) {
        var o = Y(e, t),
          i = new Array(n - o + 1).join(" ");
        e.setCursor($t(t, o)), e.replaceRange(i, e.getCursor());
      }
      function Z(e, t) {
        var n = [],
          o = e.listSelections(),
          i = q(e.clipPos(t)),
          r = !z(t, i),
          a = te(o, e.getCursor("head")),
          s = z(o[a].head, o[a].anchor),
          l = o.length - 1,
          c = l - a > a ? l : 0,
          u = o[c].anchor,
          d = Math.min(u.line, i.line),
          h = Math.max(u.line, i.line),
          p = u.ch,
          f = i.ch,
          m = o[c].head.ch - p,
          g = f - p;
        m > 0 && g <= 0
          ? (p++, r || f--)
          : m < 0 && g >= 0
          ? (p--, s || f++)
          : m < 0 && -1 == g && (p--, f++);
        for (var v = d; v <= h; v++) {
          var b = {
            anchor: new $t(v, p),
            head: new $t(v, f),
          };
          n.push(b);
        }
        return (
          (a = i.line == h ? n.length - 1 : 0),
          e.setSelections(n),
          (t.ch = f),
          (u.ch = p),
          u
        );
      }
      function ee(e, t, n) {
        for (var o = [], i = 0; i < n; i++) {
          var r = N(t, i, 0);
          o.push({
            anchor: r,
            head: r,
          });
        }
        e.setSelections(o, 0);
      }
      function te(e, t, n) {
        for (var o = 0; o < e.length; o++) {
          var i = "head" != n && z(e[o].anchor, t),
            r = "anchor" != n && z(e[o].head, t);
          if (i || r) return o;
        }
        return -1;
      }
      function ne(e, t) {
        var n = t.lastSelection,
          o = function () {
            var t = e.listSelections(),
              n = t[0],
              o = t[t.length - 1];
            return [
              K(n.anchor, n.head) ? n.anchor : n.head,
              K(o.anchor, o.head) ? o.head : o.anchor,
            ];
          },
          i = function () {
            var t = e.getCursor(),
              o = e.getCursor(),
              i = n.visualBlock;
            if (i) {
              var r = i.width,
                a = i.height;
              o = $t(t.line + a, t.ch + r);
              for (var s = [], l = t.line; l < o.line; l++) {
                var c = {
                  anchor: $t(l, t.ch),
                  head: $t(l, o.ch),
                };
                s.push(c);
              }
              e.setSelections(s);
            } else {
              var u = n.anchorMark.find(),
                d = n.headMark.find(),
                h = d.line - u.line,
                p = d.ch - u.ch;
              (o = {
                line: o.line + h,
                ch: h ? o.ch : p + o.ch,
              }),
                n.visualLine &&
                  ((t = $t(t.line, 0)), (o = $t(o.line, Y(e, o.line)))),
                e.setSelection(t, o);
            }
            return [t, o];
          };
        return t.visualMode ? o() : i();
      }
      function oe(e, t) {
        var n = t.sel.anchor,
          o = t.sel.head;
        t.lastPastedText &&
          ((o = e.posFromIndex(e.indexFromPos(n) + t.lastPastedText.length)),
          (t.lastPastedText = null)),
          (t.lastSelection = {
            anchorMark: e.setBookmark(n),
            headMark: e.setBookmark(o),
            anchor: q(n),
            head: q(o),
            visualMode: t.visualMode,
            visualLine: t.visualLine,
            visualBlock: t.visualBlock,
          });
      }
      function ie(e, t, n) {
        var o,
          i = e.state.vim.sel,
          r = i.head,
          a = i.anchor;
        return (
          K(n, t) && ((o = n), (n = t), (t = o)),
          K(r, a)
            ? ((r = W(t, r)), (a = V(a, n)))
            : ((a = W(t, a)),
              -1 == (r = N((r = V(r, n)), 0, -1)).ch &&
                r.line != e.firstLine() &&
                (r = $t(r.line - 1, Y(e, r.line - 1)))),
          [a, r]
        );
      }
      function re(e, t, n) {
        var o = e.state.vim,
          i = ae(
            e,
            (t = t || o.sel),
            (n = n || o.visualLine ? "line" : o.visualBlock ? "block" : "char")
          );
        e.setSelections(i.ranges, i.primary), ot(e);
      }
      function ae(e, t, n, o) {
        var i = q(t.head),
          r = q(t.anchor);
        if ("char" == n) {
          var a = o || K(t.head, t.anchor) ? 0 : 1,
            s = K(t.head, t.anchor) ? 1 : 0;
          return (
            (i = N(t.head, 0, a)),
            {
              ranges: [
                {
                  anchor: (r = N(t.anchor, 0, s)),
                  head: i,
                },
              ],
              primary: 0,
            }
          );
        }
        if ("line" == n) {
          if (K(t.head, t.anchor)) (i.ch = 0), (r.ch = Y(e, r.line));
          else {
            r.ch = 0;
            var l = e.lastLine();
            i.line > l && (i.line = l), (i.ch = Y(e, i.line));
          }
          return {
            ranges: [
              {
                anchor: r,
                head: i,
              },
            ],
            primary: 0,
          };
        }
        if ("block" == n) {
          for (
            var c = Math.min(r.line, i.line),
              u = Math.min(r.ch, i.ch),
              d = Math.max(r.line, i.line),
              h = Math.max(r.ch, i.ch) + 1,
              p = d - c + 1,
              f = i.line == c ? 0 : p - 1,
              m = [],
              g = 0;
            g < p;
            g++
          )
            m.push({
              anchor: $t(c + g, u),
              head: $t(c + g, h),
            });
          return {
            ranges: m,
            primary: f,
          };
        }
      }
      function se(e) {
        var t = e.getCursor("head");
        return (
          1 == e.getSelection().length && (t = W(t, e.getCursor("anchor"))), t
        );
      }
      function le(e, t) {
        var n = e.state.vim;
        !1 !== t && e.setCursor(L(e, n.sel.head)),
          oe(e, n),
          (n.visualMode = !1),
          (n.visualLine = !1),
          (n.visualBlock = !1),
          St.signal(e, "vim-mode-change", {
            mode: "normal",
          }),
          n.fakeCursor && n.fakeCursor.clear();
      }
      function ce(e, t, n) {
        var o = e.getRange(t, n);
        if (/\n\s*$/.test(o)) {
          var i = o.split("\n");
          i.pop();
          for (var r = i.pop(); i.length > 0 && r && v(r); r = i.pop())
            n.line--, (n.ch = 0);
          r ? (n.line--, (n.ch = Y(e, n.line))) : (n.ch = 0);
        }
      }
      function ue(e, t, n) {
        (t.ch = 0), (n.ch = 0), n.line++;
      }
      function de(e) {
        if (!e) return 0;
        var t = e.search(/\S/);
        return -1 == t ? e.length : t;
      }
      function he(e, t, n, o, i) {
        for (
          var r = se(e), a = e.getLine(r.line), s = r.ch, l = i ? It[0] : Rt[0];
          !l(a.charAt(s));

        )
          if (++s >= a.length) return null;
        o ? (l = Rt[0]) : (l = It[0])(a.charAt(s)) || (l = It[1]);
        for (var c = s, u = s; l(a.charAt(c)) && c < a.length; ) c++;
        for (; l(a.charAt(u)) && u >= 0; ) u--;
        if ((u++, t)) {
          for (var d = c; /\s/.test(a.charAt(c)) && c < a.length; ) c++;
          if (d == c) {
            for (var h = u; /\s/.test(a.charAt(u - 1)) && u > 0; ) u--;
            u || (u = h);
          }
        }
        return {
          start: $t(r.line, u),
          end: $t(r.line, c),
        };
      }
      function pe(e, t, n) {
        z(t, n) || Ft.jumpList.add(e, t, n);
      }
      function fe(e, t) {
        (Ft.lastChararacterSearch.increment = e),
          (Ft.lastChararacterSearch.forward = t.forward),
          (Ft.lastChararacterSearch.selectedCharacter = t.selectedCharacter);
      }
      function me(e, t, n, o) {
        var i = q(e.getCursor()),
          r = n ? 1 : -1,
          a = n ? e.lineCount() : -1,
          s = i.ch,
          l = i.line,
          c = e.getLine(l),
          u = {
            lineText: c,
            nextCh: c.charAt(s),
            lastCh: null,
            index: s,
            symb: o,
            reverseSymb: (n
              ? {
                  ")": "(",
                  "}": "{",
                }
              : {
                  "(": ")",
                  "{": "}",
                })[o],
            forward: n,
            depth: 0,
            curMoveThrough: !1,
          },
          d = Yt[o];
        if (!d) return i;
        var h = Qt[d].init,
          p = Qt[d].isComplete;
        for (h && h(u); l !== a && t; ) {
          if (
            ((u.index += r), (u.nextCh = u.lineText.charAt(u.index)), !u.nextCh)
          ) {
            if (((l += r), (u.lineText = e.getLine(l) || ""), r > 0))
              u.index = 0;
            else {
              var f = u.lineText.length;
              u.index = f > 0 ? f - 1 : 0;
            }
            u.nextCh = u.lineText.charAt(u.index);
          }
          p(u) && ((i.line = l), (i.ch = u.index), t--);
        }
        return u.nextCh || u.curMoveThrough ? $t(l, u.index) : i;
      }
      function ge(e, t, n, o, i) {
        var r = t.line,
          a = t.ch,
          s = e.getLine(r),
          l = n ? 1 : -1,
          c = o ? Rt : It;
        if (i && "" == s) {
          if (((r += l), (s = e.getLine(r)), !h(e, r))) return null;
          a = n ? 0 : s.length;
        }
        for (;;) {
          if (i && "" == s)
            return {
              from: 0,
              to: 0,
              line: r,
            };
          for (var u = l > 0 ? s.length : -1, d = u, p = u; a != u; ) {
            for (var f = !1, m = 0; m < c.length && !f; ++m)
              if (c[m](s.charAt(a))) {
                for (d = a; a != u && c[m](s.charAt(a)); ) a += l;
                if (
                  ((f = d != (p = a)), d == t.ch && r == t.line && p == d + l)
                )
                  continue;
                return {
                  from: Math.min(d, p + 1),
                  to: Math.max(d, p),
                  line: r,
                };
              }
            f || (a += l);
          }
          if (!h(e, (r += l))) return null;
          (s = e.getLine(r)), (a = l > 0 ? 0 : s.length);
        }
        throw new Error("The impossible happened.");
      }
      function ve(e, t, n, o, i, r) {
        var a = q(t),
          s = [];
        ((o && !i) || (!o && i)) && n++;
        for (var l = !(o && i), c = 0; c < n; c++) {
          var u = ge(e, t, o, r, l);
          if (!u) {
            var d = Y(e, e.lastLine());
            s.push(
              o
                ? {
                    line: e.lastLine(),
                    from: d,
                    to: d,
                  }
                : {
                    line: 0,
                    from: 0,
                    to: 0,
                  }
            );
            break;
          }
          s.push(u), (t = $t(u.line, o ? u.to - 1 : u.from));
        }
        var h = s.length != n,
          p = s[0],
          f = s.pop();
        return o && !i
          ? (h || (p.from == a.ch && p.line == a.line) || (f = s.pop()),
            $t(f.line, f.from))
          : o && i
          ? $t(f.line, f.to - 1)
          : !o && i
          ? (h || (p.to == a.ch && p.line == a.line) || (f = s.pop()),
            $t(f.line, f.to))
          : $t(f.line, f.from);
      }
      function be(e, t, n, o) {
        for (var i, r = e.getCursor(), a = r.ch, s = 0; s < t; s++) {
          if (-1 == (i = _e(a, e.getLine(r.line), o, n, !0))) return null;
          a = i;
        }
        return $t(e.getCursor().line, i);
      }
      function ye(e, t) {
        var n = e.getCursor().line;
        return L(e, $t(n, t - 1));
      }
      function we(e, t, n, o) {
        b(n, Nt) &&
          (t.marks[n] && t.marks[n].clear(), (t.marks[n] = e.setBookmark(o)));
      }
      function _e(e, t, n, o, i) {
        var r;
        return (
          o
            ? -1 == (r = t.indexOf(n, e + 1)) || i || (r -= 1)
            : -1 == (r = t.lastIndexOf(n, e - 1)) || i || (r += 1),
          r
        );
      }
      function Ce(e, t, n, o, i) {
        function r(t) {
          return !/\S/.test(e.getLine(t));
        }
        function a(e, t, n) {
          return n ? r(e) != r(e + t) : !r(e) && r(e + t);
        }
        function s(t) {
          o = o > 0 ? 1 : -1;
          var n = e.ace.session.getFoldLine(t);
          n &&
            t + o > n.start.row &&
            t + o < n.end.row &&
            (o = (o > 0 ? n.end.row : n.start.row) - t);
        }
        var l,
          c = t.line,
          u = e.firstLine(),
          d = e.lastLine(),
          h = c;
        if (o) {
          for (; u <= h && h <= d && n > 0; ) s(h), a(h, o) && n--, (h += o);
          return new $t(h, 0);
        }
        var p = e.state.vim;
        if (p.visualLine && a(c, 1, !0)) {
          var f = p.sel.anchor;
          a(f.line, -1, !0) && ((i && f.line == c) || (c += 1));
        }
        var m = r(c);
        for (h = c; h <= d && n; h++) a(h, 1, !0) && ((i && r(h) == m) || n--);
        for (
          l = new $t(h, 0), h > d && !m ? (m = !0) : (i = !1), h = c;
          h > u && ((i && r(h) != m && h != c) || !a(h, -1, !0));
          h--
        );
        return {
          start: new $t(h, 0),
          end: l,
        };
      }
      function ke(e, t, n, o) {
        var i,
          r,
          a = t,
          s = {
            "(": /[()]/,
            ")": /[()]/,
            "[": /[[\]]/,
            "]": /[[\]]/,
            "{": /[{}]/,
            "}": /[{}]/,
          }[n],
          l = {
            "(": "(",
            ")": "(",
            "[": "[",
            "]": "[",
            "{": "{",
            "}": "{",
          }[n],
          c = e.getLine(a.line).charAt(a.ch) === l ? 1 : 0;
        if (
          ((i = e.scanForBracket($t(a.line, a.ch + c), -1, null, {
            bracketRegex: s,
          })),
          (r = e.scanForBracket($t(a.line, a.ch + c), 1, null, {
            bracketRegex: s,
          })),
          !i || !r)
        )
          return {
            start: a,
            end: a,
          };
        if (
          ((i = i.pos),
          (r = r.pos),
          (i.line == r.line && i.ch > r.ch) || i.line > r.line)
        ) {
          var u = i;
          (i = r), (r = u);
        }
        return (
          o ? (r.ch += 1) : (i.ch += 1),
          {
            start: i,
            end: r,
          }
        );
      }
      function Se(e, t, n, o) {
        var i,
          r,
          a,
          s,
          l = q(t),
          c = e.getLine(l.line).split(""),
          u = c.indexOf(n);
        if (
          (l.ch < u
            ? (l.ch = u)
            : u < l.ch && c[l.ch] == n && ((r = l.ch), --l.ch),
          c[l.ch] != n || r)
        )
          for (a = l.ch; a > -1 && !i; a--) c[a] == n && (i = a + 1);
        else i = l.ch + 1;
        if (i && !r)
          for (a = i, s = c.length; a < s && !r; a++) c[a] == n && (r = a);
        return i && r
          ? (o && (--i, ++r),
            {
              start: $t(l.line, i),
              end: $t(l.line, r),
            })
          : {
              start: l,
              end: l,
            };
      }
      function xe() {}
      function Ee(e) {
        var t = e.state.vim;
        return t.searchState_ || (t.searchState_ = new xe());
      }
      function $e(e, t, n, o, i) {
        e.openDialog
          ? e.openDialog(t, o, {
              bottom: !0,
              value: i.value,
              onKeyDown: i.onKeyDown,
              onKeyUp: i.onKeyUp,
              selectValueOnOpen: !1,
            })
          : o(prompt(n, ""));
      }
      function Te(e) {
        return Me(e, "/");
      }
      function Ae(e) {
        return Oe(e, "/");
      }
      function Me(e, t) {
        var n = Oe(e, t) || [];
        if (!n.length) return [];
        var o = [];
        if (0 === n[0]) {
          for (var i = 0; i < n.length; i++)
            "number" == typeof n[i] && o.push(e.substring(n[i] + 1, n[i + 1]));
          return o;
        }
      }
      function Oe(e, t) {
        t || (t = "/");
        for (var n = !1, o = [], i = 0; i < e.length; i++) {
          var r = e.charAt(i);
          n || r != t || o.push(i), (n = !n && "\\" == r);
        }
        return o;
      }
      function Ie(e) {
        for (
          var t = "|(){", n = "}", o = !1, i = [], r = -1;
          r < e.length;
          r++
        ) {
          var a = e.charAt(r) || "",
            s = e.charAt(r + 1) || "",
            l = s && -1 != t.indexOf(s);
          o
            ? (("\\" === a && l) || i.push(a), (o = !1))
            : "\\" === a
            ? ((o = !0),
              s && -1 != n.indexOf(s) && (l = !0),
              (l && "\\" !== s) || i.push(a))
            : (i.push(a), l && "\\" !== s && i.push("\\"));
        }
        return i.join("");
      }
      function Re(e) {
        for (var t = !1, n = [], o = -1; o < e.length; o++) {
          var i = e.charAt(o) || "",
            r = e.charAt(o + 1) || "";
          Jt[i + r]
            ? (n.push(Jt[i + r]), o++)
            : t
            ? (n.push(i), (t = !1))
            : "\\" === i
            ? ((t = !0),
              m(r) || "$" === r
                ? n.push("$")
                : "/" !== r && "\\" !== r && n.push("\\"))
            : ("$" === i && n.push("$"), n.push(i), "/" === r && n.push("\\"));
        }
        return n.join("");
      }
      function Pe(e) {
        for (var t = new St.StringStream(e), n = []; !t.eol(); ) {
          for (; t.peek() && "\\" != t.peek(); ) n.push(t.next());
          var o = !1;
          for (var i in Xt)
            if (t.match(i, !0)) {
              (o = !0), n.push(Xt[i]);
              break;
            }
          o || n.push(t.next());
        }
        return n.join("");
      }
      function Le(e, t, n) {
        if (
          (Ft.registerController.getRegister("/").setText(e),
          e instanceof RegExp)
        )
          return e;
        var o,
          i,
          r = Ae(e);
        r.length
          ? ((o = e.substring(0, r[0])),
            (i = -1 != e.substring(r[0]).indexOf("i")))
          : (o = e);
        return o
          ? (_("pcre") || (o = Ie(o)),
            n && (t = /^[^A-Z]*$/.test(o)),
            new RegExp(o, t || i ? "i" : void 0))
          : null;
      }
      function De(e, t) {
        e.openNotification
          ? e.openNotification('<span style="color: red">' + t + "</span>", {
              bottom: !0,
              duration: 5e3,
            })
          : alert(t);
      }
      function Ne(e, t) {
        var n = "";
        return (
          e && (n += '<span style="font-family: monospace">' + e + "</span>"),
          (n += '<input type="text"/> <span style="color: #888">'),
          t &&
            ((n += '<span style="color: #888">'), (n += t), (n += "</span>")),
          n
        );
      }
      function He(e, t) {
        var n = (t.prefix || "") + " " + (t.desc || "");
        $e(e, Ne(t.prefix, t.desc), n, t.onClose, t);
      }
      function Be(e, t) {
        if (e instanceof RegExp && t instanceof RegExp) {
          for (
            var n = ["global", "multiline", "ignoreCase", "source"], o = 0;
            o < n.length;
            o++
          ) {
            var i = n[o];
            if (e[i] !== t[i]) return !1;
          }
          return !0;
        }
        return !1;
      }
      function Fe(e, t, n, o) {
        if (t) {
          var i = Ee(e),
            r = Le(t, !!n, !!o);
          if (r) return Ue(e, r), Be(r, i.getQuery()) || i.setQuery(r), r;
        }
      }
      function je(e) {
        if ("^" == e.source.charAt(0)) var t = !0;
        return {
          token: function (n) {
            if (!t || n.sol()) {
              var o = n.match(e, !1);
              if (o)
                return 0 == o[0].length
                  ? (n.next(), "searching")
                  : n.sol() || (n.backUp(1), e.exec(n.next() + o[0]))
                  ? (n.match(e), "searching")
                  : (n.next(), null);
              for (; !n.eol() && (n.next(), !n.match(e, !1)); );
            } else n.skipToEnd();
          },
          query: e,
        };
      }
      function Ue(e, t) {
        var n = Ee(e),
          o = n.getOverlay();
        (o && t == o.query) ||
          (o && e.removeOverlay(o),
          (o = je(t)),
          e.addOverlay(o),
          e.showMatchesOnScrollbar &&
            (n.getScrollbarAnnotate() && n.getScrollbarAnnotate().clear(),
            n.setScrollbarAnnotate(e.showMatchesOnScrollbar(t))),
          n.setOverlay(o));
      }
      function qe(e, t, n, o) {
        return (
          void 0 === o && (o = 1),
          e.operation(function () {
            for (
              var i = e.getCursor(), r = e.getSearchCursor(n, i), a = 0;
              a < o;
              a++
            ) {
              var s = r.find(t);
              if (
                (0 == a && s && z(r.from(), i) && (s = r.find(t)),
                !s &&
                  !(r = e.getSearchCursor(
                    n,
                    t ? $t(e.lastLine()) : $t(e.firstLine(), 0)
                  )).find(t))
              )
                return;
            }
            return r.from();
          })
        );
      }
      function ze(e) {
        var t = Ee(e);
        e.removeOverlay(Ee(e).getOverlay()),
          t.setOverlay(null),
          t.getScrollbarAnnotate() &&
            (t.getScrollbarAnnotate().clear(), t.setScrollbarAnnotate(null));
      }
      function Ke(e, t, n) {
        return (
          "number" != typeof e && (e = e.line),
          t instanceof Array ? b(e, t) : n ? e >= t && e <= n : e == t
        );
      }
      function We(e) {
        var t = e.ace.renderer;
        return {
          top: t.getFirstFullyVisibleRow(),
          bottom: t.getLastFullyVisibleRow(),
        };
      }
      function Ve(e, t, n, o, i, r, a, s, l) {
        function c() {
          e.operation(function () {
            for (; !f; ) u(), d();
            h();
          });
        }
        function u() {
          var t = e.getRange(r.from(), r.to()).replace(a, s);
          r.replace(t);
        }
        function d() {
          for (; r.findNext() && Ke(r.from(), o, i); )
            if (n || !m || r.from().line != m.line)
              return (
                e.scrollIntoView(r.from(), 30),
                e.setSelection(r.from(), r.to()),
                (m = r.from()),
                void (f = !1)
              );
          f = !0;
        }
        function h(t) {
          if ((t && t(), e.focus(), m)) {
            e.setCursor(m);
            var n = e.state.vim;
            (n.exMode = !1), (n.lastHPos = n.lastHSPos = m.ch);
          }
          l && l();
        }
        function p(t, n, o) {
          switch ((St.e_stop(t), St.keyName(t))) {
            case "Y":
              u(), d();
              break;
            case "N":
              d();
              break;
            case "A":
              var i = l;
              (l = void 0), e.operation(c), (l = i);
              break;
            case "L":
              u();
            case "Q":
            case "Esc":
            case "Ctrl-C":
            case "Ctrl-[":
              h(o);
          }
          return f && h(o), !0;
        }
        e.state.vim.exMode = !0;
        var f = !1,
          m = r.from();
        if ((d(), !f))
          return t
            ? void He(e, {
                prefix: "replace with <strong>" + s + "</strong> (y/n/a/q/l)",
                onKeyDown: p,
              })
            : (c(), void (l && l()));
        De(e, "No matches for " + a.source);
      }
      function Ge(e) {
        var t = e.state.vim,
          n = Ft.macroModeState,
          o = Ft.registerController.getRegister("."),
          i = n.isPlaying,
          r = n.lastInsertModeChanges,
          a = [];
        if (!i) {
          for (
            var s = r.inVisualBlock ? t.lastSelection.visualBlock.height : 1,
              l = r.changes,
              c = ((a = []), 0);
            c < l.length;

          )
            a.push(l[c]), l[c] instanceof rt ? c++ : (c += s);
          (r.changes = a),
            e.off("change", tt),
            St.off(e.getInputField(), "keydown", at);
        }
        !i &&
          t.insertModeRepeat > 1 &&
          (st(e, t, t.insertModeRepeat - 1, !0),
          (t.lastEditInputState.repeatOverride = t.insertModeRepeat)),
          delete t.insertModeRepeat,
          (t.insertMode = !1),
          e.setCursor(e.getCursor().line, e.getCursor().ch - 1),
          e.setOption("keyMap", "vim"),
          e.setOption("disableInput", !0),
          (r.overwrite = e.state.overwrite),
          e.toggleOverwrite(!1),
          o.setText(r.changes.join("")),
          St.signal(e, "vim-mode-change", {
            mode: "normal",
          }),
          n.isRecording && Ze(n);
      }
      function Ye(e) {
        xt.unshift(e);
      }
      function Qe(e, t, n, o, i) {
        var r = {
          keys: e,
          type: t,
        };
        for (var a in ((r[t] = n), (r[t + "Args"] = o), i)) r[a] = i[a];
        Ye(r);
      }
      function Je(e, t, n, o) {
        var i = Ft.registerController.getRegister(o);
        if (":" == o)
          return (
            i.keyBuffer[0] && nn.processCommand(e, i.keyBuffer[0]),
            void (n.isPlaying = !1)
          );
        var r = i.keyBuffer,
          a = 0;
        (n.isPlaying = !0), (n.replaySearchQueries = i.searchQueries.slice(0));
        for (var s = 0; s < r.length; s++)
          for (var l, c, u = r[s]; u; )
            if (
              ((c = (l = /<\w+-.+?>|<\w+>|./.exec(u))[0]),
              (u = u.substring(l.index + c.length)),
              St.Vim.handleKey(e, c, "macro"),
              t.insertMode)
            ) {
              var d = i.insertModeChanges[a++].changes;
              (Ft.macroModeState.lastInsertModeChanges.changes = d),
                lt(e, d, 1),
                Ge(e);
            }
        n.isPlaying = !1;
      }
      function Xe(e, t) {
        if (!e.isPlaying) {
          var n = e.latestRegister,
            o = Ft.registerController.getRegister(n);
          o && o.pushText(t);
        }
      }
      function Ze(e) {
        if (!e.isPlaying) {
          var t = e.latestRegister,
            n = Ft.registerController.getRegister(t);
          n &&
            n.pushInsertModeChanges &&
            n.pushInsertModeChanges(e.lastInsertModeChanges);
        }
      }
      function et(e, t) {
        if (!e.isPlaying) {
          var n = e.latestRegister,
            o = Ft.registerController.getRegister(n);
          o && o.pushSearchQuery && o.pushSearchQuery(t);
        }
      }
      function tt(e, t) {
        var n = Ft.macroModeState,
          o = n.lastInsertModeChanges;
        if (!n.isPlaying)
          for (; t; ) {
            if (
              ((o.expectCursorActivityForChange = !0),
              "+input" == t.origin ||
                "paste" == t.origin ||
                void 0 === t.origin)
            ) {
              var i = t.text.join("\n");
              o.maybeReset && ((o.changes = []), (o.maybeReset = !1)),
                o.changes.push(i);
            }
            t = t.next;
          }
      }
      function nt(e) {
        var t = e.state.vim;
        if (t.insertMode) {
          var n = Ft.macroModeState;
          if (n.isPlaying) return;
          var o = n.lastInsertModeChanges;
          o.expectCursorActivityForChange
            ? (o.expectCursorActivityForChange = !1)
            : (o.maybeReset = !0);
        } else e.curOp.isVimOp || it(e, t);
        t.visualMode && ot(e);
      }
      function ot(e) {
        var t = e.state.vim,
          n = L(e, q(t.sel.head)),
          o = N(n, 0, 1);
        t.fakeCursor && t.fakeCursor.clear(),
          (t.fakeCursor = e.markText(n, o, {
            className: "cm-animate-fat-cursor",
          }));
      }
      function it(e, t) {
        var n = e.getCursor("anchor"),
          o = e.getCursor("head");
        if (
          (t.visualMode && !e.somethingSelected()
            ? le(e, !1)
            : t.visualMode ||
              t.insertMode ||
              !e.somethingSelected() ||
              ((t.visualMode = !0),
              (t.visualLine = !1),
              St.signal(e, "vim-mode-change", {
                mode: "visual",
              })),
          t.visualMode)
        ) {
          var i = K(o, n) ? 0 : -1,
            r = K(o, n) ? -1 : 0;
          (o = N(o, 0, i)),
            (n = N(n, 0, r)),
            (t.sel = {
              anchor: n,
              head: o,
            }),
            we(e, t, "<", W(o, n)),
            we(e, t, ">", V(o, n));
        } else t.insertMode || (t.lastHPos = e.getCursor().ch);
      }
      function rt(e) {
        this.keyName = e;
      }
      function at(e) {
        function t() {
          return (
            n.maybeReset && ((n.changes = []), (n.maybeReset = !1)),
            n.changes.push(new rt(o)),
            !0
          );
        }
        var n = Ft.macroModeState.lastInsertModeChanges,
          o = St.keyName(e);
        o &&
          ((-1 == o.indexOf("Delete") && -1 == o.indexOf("Backspace")) ||
            St.lookupKey(o, "vim-insert", t));
      }
      function st(e, t, n, o) {
        function i() {
          s
            ? Kt.processAction(e, t, t.lastEditActionCommand)
            : Kt.evalInput(e, t);
        }
        function r(n) {
          if (a.lastInsertModeChanges.changes.length > 0) {
            n = t.lastEditActionCommand ? n : 1;
            var o = a.lastInsertModeChanges;
            lt(e, o.changes, n, o.overwrite);
          }
        }
        var a = Ft.macroModeState;
        a.isPlaying = !0;
        var s = !!t.lastEditActionCommand,
          l = t.inputState;
        if (
          ((t.inputState = t.lastEditInputState),
          s && t.lastEditActionCommand.interlaceInsertRepeat)
        )
          for (var c = 0; c < n; c++) i(), r(1);
        else o || i(), r(n);
        (t.inputState = l), t.insertMode && !o && Ge(e), (a.isPlaying = !1);
      }
      function lt(e, t, n, o) {
        function i(t) {
          return "string" == typeof t ? St.commands[t](e) : t(e), !0;
        }
        var r = e.getCursor("head"),
          a = Ft.macroModeState.lastInsertModeChanges.inVisualBlock;
        if (a) {
          var s = e.state.vim.lastSelection,
            l = H(s.anchor, s.head);
          ee(e, r, l.line + 1), (n = e.listSelections().length), e.setCursor(r);
        }
        for (var c = 0; c < n; c++) {
          a && e.setCursor(N(r, c, 0));
          for (var u = 0; u < t.length; u++) {
            var d = t[u];
            if (d instanceof rt) St.lookupKey(d.keyName, "vim-insert", i);
            else {
              var h = e.getCursor(),
                p = h;
              o && !/\n/.test(d) && (p = N(h, 0, d.length)),
                e.replaceRange(d, h, p);
            }
          }
        }
        a && e.setCursor(N(r, 0, 1));
      }
      function ct(e, t, n) {
        t.length > 1 && "n" == t[0] && (t = t.replace("numpad", "")),
          (t = on[t] || t);
        var o = "";
        return (
          n.ctrlKey && (o += "C-"),
          n.altKey && (o += "A-"),
          n.shiftKey && (o += "S-"),
          (o += t).length > 1 && (o = "<" + o + ">"),
          o
        );
      }
      function ut(e) {
        var t = new e.constructor();
        return (
          Object.keys(e).forEach(function (n) {
            var o = e[n];
            Array.isArray(o)
              ? (o = o.slice())
              : o &&
                "object" == typeof o &&
                o.constructor != Object &&
                (o = ut(o)),
              (t[n] = o);
          }),
          e.sel &&
            (t.sel = {
              head: e.sel.head && q(e.sel.head),
              anchor: e.sel.anchor && q(e.sel.anchor),
            }),
          t
        );
      }
      function dt(e, t, n) {
        var o = !1,
          i = Tt.maybeInitVimState_(e),
          r = i.visualBlock || i.wasInVisualBlock;
        if (
          (i.wasInVisualBlock && !e.ace.inMultiSelectMode
            ? (i.wasInVisualBlock = !1)
            : e.ace.inMultiSelectMode &&
              i.visualBlock &&
              (i.wasInVisualBlock = !0),
          "<Esc>" != t ||
            i.insertMode ||
            i.visualMode ||
            !e.ace.inMultiSelectMode)
        )
          if (r || !e.ace.inMultiSelectMode || e.ace.inVirtualSelectionMode)
            o = Tt.handleKey(e, t, n);
          else {
            var a = ut(i);
            e.operation(function () {
              e.ace.forEachSelection(function () {
                var i = e.ace.selection;
                e.state.vim.lastHPos =
                  null == i.$desiredColumn ? i.lead.column : i.$desiredColumn;
                var r = e.getCursor("head"),
                  s = e.getCursor("anchor"),
                  l = K(r, s) ? 0 : -1,
                  c = K(r, s) ? -1 : 0;
                (r = N(r, 0, l)),
                  (s = N(s, 0, c)),
                  (e.state.vim.sel.head = r),
                  (e.state.vim.sel.anchor = s),
                  (o = rn(e, t, n)),
                  (i.$desiredColumn =
                    -1 == e.state.vim.lastHPos ? null : e.state.vim.lastHPos),
                  e.virtualSelectionMode() && (e.state.vim = ut(a));
              }),
                e.curOp.cursorActivity && !o && (e.curOp.cursorActivity = !1);
            }, !0);
          }
        else e.ace.exitMultiSelectMode();
        return o;
      }
      function ht(e, t) {
        t.off("beforeEndOperation", ht);
        var n = t.state.cm.vimCmd;
        n && t.execCommand(n.exec ? n : n.name, n.args), (t.curOp = t.prevOp);
      }
      var pt = e("../range").Range,
        ft = e("../lib/event_emitter").EventEmitter,
        mt = e("../lib/dom"),
        gt = e("../lib/oop"),
        vt = e("../lib/keys"),
        bt = e("../lib/event"),
        yt = e("../search").Search,
        wt = e("../lib/useragent"),
        _t = e("../search_highlight").SearchHighlight,
        Ct = e("../commands/multi_select_commands"),
        kt = e("../mode/text").Mode.prototype.tokenRe;
      e("../multi_select");
      var St = function (e) {
        (this.ace = e),
          (this.state = {}),
          (this.marks = {}),
          (this.$uid = 0),
          (this.onChange = this.onChange.bind(this)),
          (this.onSelectionChange = this.onSelectionChange.bind(this)),
          (this.onBeforeEndOperation = this.onBeforeEndOperation.bind(this)),
          this.ace.on("change", this.onChange),
          this.ace.on("changeSelection", this.onSelectionChange),
          this.ace.on("beforeEndOperation", this.onBeforeEndOperation);
      };
      (St.Pos = function (e, t) {
        if (!(this instanceof $t)) return new $t(e, t);
        (this.line = e), (this.ch = t);
      }),
        (St.defineOption = function () {}),
        (St.commands = {
          redo: function (e) {
            e.ace.redo();
          },
          undo: function (e) {
            e.ace.undo();
          },
          newlineAndIndent: function (e) {
            e.ace.insert("\n");
          },
        }),
        (St.keyMap = {}),
        (St.addClass = St.rmClass = St.e_stop = function () {}),
        (St.keyName = function (e) {
          if (e.key) return e.key;
          var t = vt[e.keyCode] || "";
          return (
            1 == t.length && (t = t.toUpperCase()),
            (t =
              bt.getModifierString(e).replace(/(^|-)\w/g, function (e) {
                return e.toUpperCase();
              }) + t)
          );
        }),
        (St.keyMap.default = function (e) {
          return function (t) {
            var n = t.ace.commands.commandKeyBinding[e.toLowerCase()];
            return n && !1 !== t.ace.execCommand(n);
          };
        }),
        (St.lookupKey = function e(t, n, o) {
          "string" == typeof n && (n = St.keyMap[n]);
          var i = "function" == typeof n ? n(t) : n[t];
          if (!1 === i) return "nothing";
          if ("..." === i) return "multi";
          if (null != i && o(i)) return "handled";
          if (n.fallthrough) {
            if (!Array.isArray(n.fallthrough)) return e(t, n.fallthrough, o);
            for (var r = 0; r < n.fallthrough.length; r++) {
              var a = e(t, n.fallthrough[r], o);
              if (a) return a;
            }
          }
        }),
        (St.signal = function (e, t, n) {
          return e._signal(t, n);
        }),
        (St.on = bt.addListener),
        (St.off = bt.removeListener),
        (St.isWordChar = function (e) {
          return e < "\x7f" ? /^\w$/.test(e) : ((kt.lastIndex = 0), kt.test(e));
        }),
        function () {
          gt.implement(St.prototype, ft),
            (this.destroy = function () {
              this.ace.off("change", this.onChange),
                this.ace.off("changeSelection", this.onSelectionChange),
                this.ace.off("beforeEndOperation", this.onBeforeEndOperation),
                this.removeOverlay();
            }),
            (this.virtualSelectionMode = function () {
              return (
                this.ace.inVirtualSelectionMode && this.ace.selection.index
              );
            }),
            (this.onChange = function (e) {
              var t = {
                  text: "i" == e.action[0] ? e.lines : [],
                },
                n = (this.curOp = this.curOp || {});
              n.changeHandlers ||
                (n.changeHandlers =
                  this._eventRegistry.change &&
                  this._eventRegistry.change.slice()),
                this.virtualSelectionMode() ||
                  (n.lastChange
                    ? (n.lastChange.next = n.lastChange = t)
                    : (n.lastChange = n.change = t),
                  this.$updateMarkers(e));
            }),
            (this.onSelectionChange = function () {
              var e = (this.curOp = this.curOp || {});
              e.cursorActivityHandlers ||
                (e.cursorActivityHandlers =
                  this._eventRegistry.cursorActivity &&
                  this._eventRegistry.cursorActivity.slice()),
                (this.curOp.cursorActivity = !0),
                this.ace.inMultiSelectMode &&
                  this.ace.keyBinding.removeKeyboardHandler(Ct.keyboardHandler);
            }),
            (this.operation = function (e, t) {
              if ((!t && this.curOp) || (t && this.curOp && this.curOp.force))
                return e();
              if (
                ((!t && this.ace.curOp) ||
                  (this.curOp && this.onBeforeEndOperation()),
                !this.ace.curOp)
              ) {
                var n = this.ace.prevOp;
                this.ace.startOperation({
                  command: {
                    name: "vim",
                    scrollIntoView: "cursor",
                  },
                });
              }
              var o = (this.curOp = this.curOp || {});
              this.curOp.force = t;
              var i = e();
              return (
                this.ace.curOp &&
                  "vim" == this.ace.curOp.command.name &&
                  (this.ace.endOperation(),
                  o.cursorActivity ||
                    o.lastChange ||
                    !n ||
                    (this.ace.prevOp = n)),
                (!t && this.ace.curOp) ||
                  (this.curOp && this.onBeforeEndOperation()),
                i
              );
            }),
            (this.onBeforeEndOperation = function () {
              var e = this.curOp;
              e &&
                (e.change && this.signal("change", e.change, e),
                e && e.cursorActivity && this.signal("cursorActivity", null, e),
                (this.curOp = null));
            }),
            (this.signal = function (e, t, n) {
              var o = n ? n[e + "Handlers"] : (this._eventRegistry || {})[e];
              if (o) {
                o = o.slice();
                for (var i = 0; i < o.length; i++) o[i](this, t);
              }
            }),
            (this.firstLine = function () {
              return 0;
            }),
            (this.lastLine = function () {
              return this.ace.session.getLength() - 1;
            }),
            (this.lineCount = function () {
              return this.ace.session.getLength();
            }),
            (this.setCursor = function (e, t) {
              "object" == typeof e && ((t = e.ch), (e = e.line)),
                this.ace.inVirtualSelectionMode ||
                  this.ace.exitMultiSelectMode(),
                this.ace.session.unfold({
                  row: e,
                  column: t,
                }),
                this.ace.selection.moveTo(e, t);
            }),
            (this.getCursor = function (e) {
              var t = this.ace.selection;
              return o(
                "anchor" == e
                  ? t.isEmpty()
                    ? t.lead
                    : t.anchor
                  : "head" != e && e
                  ? t.getRange()[e]
                  : t.lead
              );
            }),
            (this.listSelections = function () {
              var e = this.ace.multiSelect.rangeList.ranges;
              return !e.length || this.ace.inVirtualSelectionMode
                ? [
                    {
                      anchor: this.getCursor("anchor"),
                      head: this.getCursor("head"),
                    },
                  ]
                : e.map(function (e) {
                    return {
                      anchor: this.clipPos(
                        o(e.cursor == e.end ? e.start : e.end)
                      ),
                      head: this.clipPos(o(e.cursor)),
                    };
                  }, this);
            }),
            (this.setSelections = function (e, t) {
              var o = this.ace.multiSelect,
                i = e.map(function (e) {
                  var t = n(e.anchor),
                    o = n(e.head),
                    i =
                      pt.comparePoints(t, o) < 0
                        ? new pt.fromPoints(t, o)
                        : new pt.fromPoints(o, t);
                  return (
                    (i.cursor = pt.comparePoints(i.start, o) ? i.end : i.start),
                    i
                  );
                });
              if (this.ace.inVirtualSelectionMode)
                this.ace.selection.fromOrientedRange(i[0]);
              else {
                t ? i[t] && i.push(i.splice(t, 1)[0]) : (i = i.reverse()),
                  o.toSingleRange(i[0].clone());
                for (var r = this.ace.session, a = 0; a < i.length; a++) {
                  var s = r.$clipRangeToDocument(i[a]);
                  o.addRange(s);
                }
              }
            }),
            (this.setSelection = function (e, t, n) {
              var o = this.ace.selection;
              o.moveTo(e.line, e.ch),
                o.selectTo(t.line, t.ch),
                n && "*mouse" == n.origin && this.onBeforeEndOperation();
            }),
            (this.somethingSelected = function () {
              return !this.ace.selection.isEmpty();
            }),
            (this.clipPos = function (e) {
              return o(this.ace.session.$clipPositionToDocument(e.line, e.ch));
            }),
            (this.markText = function () {
              return {
                clear: function () {},
                find: function () {},
              };
            }),
            (this.$updateMarkers = function (e) {
              var t = "insert" == e.action,
                n = e.start,
                o = e.end,
                i = (o.row - n.row) * (t ? 1 : -1),
                r = (o.column - n.column) * (t ? 1 : -1);
              for (var a in (t && (o = n), this.marks)) {
                var s = this.marks[a],
                  l = pt.comparePoints(s, n);
                if (!(l < 0)) {
                  if (0 === l && t) {
                    if (1 != s.bias) {
                      s.bias = -1;
                      continue;
                    }
                    l = 1;
                  }
                  var c = t ? l : pt.comparePoints(s, o);
                  c > 0
                    ? ((s.row += i), (s.column += s.row == o.row ? r : 0))
                    : !t &&
                      c <= 0 &&
                      ((s.row = n.row),
                      (s.column = n.column),
                      0 === c && (s.bias = 1));
                }
              }
            });
          var e = function (e, t, n, o) {
            (this.cm = e),
              (this.id = t),
              (this.row = n),
              (this.column = o),
              (e.marks[this.id] = this);
          };
          (e.prototype.clear = function () {
            delete this.cm.marks[this.id];
          }),
            (e.prototype.find = function () {
              return o(this);
            }),
            (this.setBookmark = function (t, n) {
              var o = new e(this, this.$uid++, t.line, t.ch);
              return (
                (n && n.insertLeft) || (o.$insertRight = !0),
                (this.marks[o.id] = o),
                o
              );
            }),
            (this.moveH = function (e, t) {
              if ("char" == t) {
                var n = this.ace.selection;
                n.clearSelection(), n.moveCursorBy(0, e);
              }
            }),
            (this.findPosV = function (e, t, n, i) {
              if ("page" == n) {
                var r = this.ace.renderer.layerConfig;
                (t *= Math.floor(r.height / r.lineHeight)), (n = "line");
              }
              if ("line" == n) {
                var a = this.ace.session.documentToScreenPosition(e.line, e.ch);
                return (
                  null != i && (a.column = i),
                  (a.row += t),
                  (a.row = Math.min(
                    Math.max(0, a.row),
                    this.ace.session.getScreenLength() - 1
                  )),
                  o(this.ace.session.screenToDocumentPosition(a.row, a.column))
                );
              }
            }),
            (this.charCoords = function (e, t) {
              if ("div" == t || !t)
                return {
                  left: (o = this.ace.session.documentToScreenPosition(
                    e.line,
                    e.ch
                  )).column,
                  top: o.row,
                };
              if ("local" == t) {
                var n = this.ace.renderer,
                  o = this.ace.session.documentToScreenPosition(e.line, e.ch),
                  i = n.layerConfig.lineHeight,
                  r = n.layerConfig.characterWidth,
                  a = i * o.row;
                return {
                  left: o.column * r,
                  top: a,
                  bottom: a + i,
                };
              }
            }),
            (this.coordsChar = function (e, t) {
              var n = this.ace.renderer;
              if ("local" == t) {
                var i = Math.max(0, Math.floor(e.top / n.lineHeight)),
                  r = Math.max(0, Math.floor(e.left / n.characterWidth));
                return o(n.session.screenToDocumentPosition(i, r));
              }
              if ("div" == t) throw "not implemented";
            }),
            (this.getSearchCursor = function (e, t) {
              var n = !1,
                i = !1;
              e instanceof RegExp &&
                !e.global &&
                ((n = !e.ignoreCase), (e = e.source), (i = !0));
              var r = new yt();
              null == t.ch && (t.ch = Number.MAX_VALUE);
              var a = {
                  row: t.line,
                  column: t.ch,
                },
                s = this,
                l = null;
              return {
                findNext: function () {
                  return this.find(!1);
                },
                findPrevious: function () {
                  return this.find(!0);
                },
                find: function (t) {
                  r.setOptions({
                    needle: e,
                    caseSensitive: n,
                    wrap: !1,
                    backwards: t,
                    regExp: i,
                    start: l || a,
                  });
                  var o = r.find(s.ace.session);
                  return (
                    o &&
                      o.isEmpty() &&
                      s.getLine(o.start.row).length == o.start.column &&
                      ((r.$options.start = o), (o = r.find(s.ace.session))),
                    (l = o)
                  );
                },
                from: function () {
                  return l && o(l.start);
                },
                to: function () {
                  return l && o(l.end);
                },
                replace: function (e) {
                  l && (l.end = s.ace.session.doc.replace(l, e));
                },
              };
            }),
            (this.scrollTo = function (e, t) {
              var n = this.ace.renderer,
                o = n.layerConfig,
                i = o.maxHeight;
              (i -= (n.$size.scrollerHeight - n.lineHeight) * n.$scrollPastEnd),
                null != t &&
                  this.ace.session.setScrollTop(Math.max(0, Math.min(t, i))),
                null != e &&
                  this.ace.session.setScrollLeft(
                    Math.max(0, Math.min(e, o.width))
                  );
            }),
            (this.scrollInfo = function () {
              return 0;
            }),
            (this.scrollIntoView = function (e, t) {
              if (e) {
                var o = this.ace.renderer,
                  i = {
                    top: 0,
                    bottom: t,
                  };
                o.scrollCursorIntoView(
                  n(e),
                  (2 * o.lineHeight) / o.$size.scrollerHeight,
                  i
                );
              }
            }),
            (this.getLine = function (e) {
              return this.ace.session.getLine(e);
            }),
            (this.getRange = function (e, t) {
              return this.ace.session.getTextRange(
                new pt(e.line, e.ch, t.line, t.ch)
              );
            }),
            (this.replaceRange = function (e, t, n) {
              return (
                n || (n = t),
                this.ace.session.replace(new pt(t.line, t.ch, n.line, n.ch), e)
              );
            }),
            (this.replaceSelections = function (e) {
              var t = this.ace.selection;
              if (this.ace.inVirtualSelectionMode)
                this.ace.session.replace(t.getRange(), e[0] || "");
              else {
                t.inVirtualSelectionMode = !0;
                var n = t.rangeList.ranges;
                n.length || (n = [this.ace.multiSelect.getRange()]);
                for (var o = n.length; o--; )
                  this.ace.session.replace(n[o], e[o] || "");
                t.inVirtualSelectionMode = !1;
              }
            }),
            (this.getSelection = function () {
              return this.ace.getSelectedText();
            }),
            (this.getSelections = function () {
              return this.listSelections().map(function (e) {
                return this.getRange(e.anchor, e.head);
              }, this);
            }),
            (this.getInputField = function () {
              return this.ace.textInput.getElement();
            }),
            (this.getWrapperElement = function () {
              return this.ace.containter;
            });
          var t = {
            indentWithTabs: "useSoftTabs",
            indentUnit: "tabSize",
            tabSize: "tabSize",
            firstLineNumber: "firstLineNumber",
            readOnly: "readOnly",
          };
          (this.setOption = function (e, n) {
            switch (((this.state[e] = n), e)) {
              case "indentWithTabs":
                (e = t[e]), (n = !n);
                break;
              default:
                e = t[e];
            }
            e && this.ace.setOption(e, n);
          }),
            (this.getOption = function (e, n) {
              var o = t[e];
              switch ((o && (n = this.ace.getOption(o)), e)) {
                case "indentWithTabs":
                  return (e = t[e]), !n;
              }
              return o ? n : this.state[e];
            }),
            (this.toggleOverwrite = function (e) {
              return (this.state.overwrite = e), this.ace.setOverwrite(e);
            }),
            (this.addOverlay = function (e) {
              if (!this.$searchHighlight || !this.$searchHighlight.session) {
                var t = new _t(null, "ace_highlight-marker", "text"),
                  n = this.ace.session.addDynamicMarker(t);
                (t.id = n.id),
                  (t.session = this.ace.session),
                  (t.destroy = function () {
                    t.session.off("change", t.updateOnChange),
                      t.session.off("changeEditor", t.destroy),
                      t.session.removeMarker(t.id),
                      (t.session = null);
                  }),
                  (t.updateOnChange = function (e) {
                    var n = e.start.row;
                    n == e.end.row
                      ? (t.cache[n] = void 0)
                      : t.cache.splice(n, t.cache.length);
                  }),
                  t.session.on("changeEditor", t.destroy),
                  t.session.on("change", t.updateOnChange);
              }
              var o = new RegExp(e.query.source, "gmi");
              (this.$searchHighlight = e.highlight = t),
                this.$searchHighlight.setRegexp(o),
                this.ace.renderer.updateBackMarkers();
            }),
            (this.removeOverlay = function () {
              this.$searchHighlight &&
                this.$searchHighlight.session &&
                this.$searchHighlight.destroy();
            }),
            (this.getScrollInfo = function () {
              var e = this.ace.renderer,
                t = e.layerConfig;
              return {
                left: e.scrollLeft,
                top: e.scrollTop,
                height: t.maxHeight,
                width: t.width,
                clientHeight: t.height,
                clientWidth: t.width,
              };
            }),
            (this.getValue = function () {
              return this.ace.getValue();
            }),
            (this.setValue = function (e) {
              return this.ace.setValue(e);
            }),
            (this.getTokenTypeAt = function (e) {
              var t = this.ace.session.getTokenAt(e.line, e.ch);
              return t && /comment|string/.test(t.type) ? "string" : "";
            }),
            (this.findMatchingBracket = function (e) {
              var t = this.ace.session.findMatchingBracket(n(e));
              return {
                to: t && o(t),
              };
            }),
            (this.indentLine = function (e, t) {
              !0 === t
                ? this.ace.session.indentRows(e, e, "\t")
                : !1 === t && this.ace.session.outdentRows(new pt(e, 0, e, 0));
            }),
            (this.indexFromPos = function (e) {
              return this.ace.session.doc.positionToIndex(n(e));
            }),
            (this.posFromIndex = function (e) {
              return o(this.ace.session.doc.indexToPosition(e));
            }),
            (this.focus = function () {
              return this.ace.focus();
            }),
            (this.blur = function () {
              return this.ace.blur();
            }),
            (this.defaultTextHeight = function () {
              return this.ace.renderer.layerConfig.lineHeight;
            }),
            (this.scanForBracket = function (e, t, i, r) {
              var a = r.bracketRegex.source;
              if (1 == t)
                var s = this.ace.session.$findClosingBracket(
                  a.slice(1, 2),
                  n(e),
                  /paren|text/
                );
              else
                s = this.ace.session.$findOpeningBracket(
                  a.slice(-2, -1),
                  {
                    row: e.line,
                    column: e.ch + 1,
                  },
                  /paren|text/
                );
              return (
                s && {
                  pos: o(s),
                }
              );
            }),
            (this.refresh = function () {
              return this.ace.resize(!0);
            }),
            (this.getMode = function () {
              return {
                name: this.getOption("mode"),
              };
            });
        }.call(St.prototype),
        ((St.StringStream = function (e, t) {
          (this.pos = this.start = 0),
            (this.string = e),
            (this.tabSize = t || 8),
            (this.lastColumnPos = this.lastColumnValue = 0),
            (this.lineStart = 0);
        }).prototype = {
          eol: function () {
            return this.pos >= this.string.length;
          },
          sol: function () {
            return this.pos == this.lineStart;
          },
          peek: function () {
            return this.string.charAt(this.pos) || void 0;
          },
          next: function () {
            if (this.pos < this.string.length)
              return this.string.charAt(this.pos++);
          },
          eat: function (e) {
            var t = this.string.charAt(this.pos);
            if ("string" == typeof e) var n = t == e;
            else n = t && (e.test ? e.test(t) : e(t));
            if (n) return ++this.pos, t;
          },
          eatWhile: function (e) {
            for (var t = this.pos; this.eat(e); );
            return this.pos > t;
          },
          eatSpace: function () {
            for (
              var e = this.pos;
              /[\s\u00a0]/.test(this.string.charAt(this.pos));

            )
              ++this.pos;
            return this.pos > e;
          },
          skipToEnd: function () {
            this.pos = this.string.length;
          },
          skipTo: function (e) {
            var t = this.string.indexOf(e, this.pos);
            if (t > -1) return (this.pos = t), !0;
          },
          backUp: function (e) {
            this.pos -= e;
          },
          column: function () {
            throw "not implemented";
          },
          indentation: function () {
            throw "not implemented";
          },
          match: function (e, t, n) {
            if ("string" != typeof e) {
              var o = this.string.slice(this.pos).match(e);
              return o && o.index > 0
                ? null
                : (o && !1 !== t && (this.pos += o[0].length), o);
            }
            var i = function (e) {
              return n ? e.toLowerCase() : e;
            };
            if (i(this.string.substr(this.pos, e.length)) == i(e))
              return !1 !== t && (this.pos += e.length), !0;
          },
          current: function () {
            return this.string.slice(this.start, this.pos);
          },
          hideFirstChars: function (e, t) {
            this.lineStart += e;
            try {
              return t();
            } finally {
              this.lineStart -= e;
            }
          },
        }),
        (St.defineExtension = function (e, t) {
          St.prototype[e] = t;
        }),
        mt.importCssString(
          ".normal-mode .ace_cursor{  border: 1px solid red;  background-color: red;  opacity: 0.5;}.normal-mode .ace_hidden-cursors .ace_cursor{  background-color: transparent;}.ace_dialog {  position: absolute;  left: 0; right: 0;  background: white;  z-index: 15;  padding: .1em .8em;  overflow: hidden;  color: #333;}.ace_dialog-top {  border-bottom: 1px solid #eee;  top: 0;}.ace_dialog-bottom {  border-top: 1px solid #eee;  bottom: 0;}.ace_dialog input {  border: none;  outline: none;  background: transparent;  width: 20em;  color: inherit;  font-family: monospace;}",
          "vimMode"
        ),
        (function () {
          function e(e, t, n) {
            var o;
            return (
              ((o = e.ace.container.appendChild(
                document.createElement("div")
              )).className = n
                ? "ace_dialog ace_dialog-bottom"
                : "ace_dialog ace_dialog-top"),
              "string" == typeof t ? (o.innerHTML = t) : o.appendChild(t),
              o
            );
          }
          function t(e, t) {
            e.state.currentNotificationClose &&
              e.state.currentNotificationClose(),
              (e.state.currentNotificationClose = t);
          }
          St.defineExtension("openDialog", function (n, o, i) {
            function r(e) {
              if ("string" == typeof e) u.value = e;
              else {
                if (l) return;
                (l = !0),
                  s.parentNode.removeChild(s),
                  c.focus(),
                  i.onClose && i.onClose(s);
              }
            }
            if (!this.virtualSelectionMode()) {
              i || (i = {}), t(this, null);
              var a,
                s = e(this, n, i.bottom),
                l = !1,
                c = this,
                u = s.getElementsByTagName("input")[0];
              return (
                u
                  ? (i.value &&
                      ((u.value = i.value), !1 !== i.select && u.select()),
                    i.onInput &&
                      St.on(u, "input", function (e) {
                        i.onInput(e, u.value, r);
                      }),
                    i.onKeyUp &&
                      St.on(u, "keyup", function (e) {
                        i.onKeyUp(e, u.value, r);
                      }),
                    St.on(u, "keydown", function (e) {
                      (i && i.onKeyDown && i.onKeyDown(e, u.value, r)) ||
                        ((27 == e.keyCode ||
                          (!1 !== i.closeOnEnter && 13 == e.keyCode)) &&
                          (u.blur(), St.e_stop(e), r()),
                        13 == e.keyCode && o(u.value));
                    }),
                    !1 !== i.closeOnBlur && St.on(u, "blur", r),
                    u.focus())
                  : (a = s.getElementsByTagName("button")[0]) &&
                    (St.on(a, "click", function () {
                      r(), c.focus();
                    }),
                    !1 !== i.closeOnBlur && St.on(a, "blur", r),
                    a.focus()),
                r
              );
            }
          }),
            St.defineExtension("openNotification", function (n, o) {
              function i() {
                s || ((s = !0), clearTimeout(r), a.parentNode.removeChild(a));
              }
              if (!this.virtualSelectionMode()) {
                t(this, i);
                var r,
                  a = e(this, n, o && o.bottom),
                  s = !1,
                  l = o && void 0 !== o.duration ? o.duration : 5e3;
                return (
                  St.on(a, "click", function (e) {
                    St.e_preventDefault(e), i();
                  }),
                  l && (r = setTimeout(i, l)),
                  i
                );
              }
            });
        })();
      var xt = [
          {
            keys: "<Left>",
            type: "keyToKey",
            toKeys: "h",
          },
          {
            keys: "<Right>",
            type: "keyToKey",
            toKeys: "l",
          },
          {
            keys: "<Up>",
            type: "keyToKey",
            toKeys: "k",
          },
          {
            keys: "<Down>",
            type: "keyToKey",
            toKeys: "j",
          },
          {
            keys: "<Space>",
            type: "keyToKey",
            toKeys: "l",
          },
          {
            keys: "<BS>",
            type: "keyToKey",
            toKeys: "h",
            context: "normal",
          },
          {
            keys: "<C-Space>",
            type: "keyToKey",
            toKeys: "W",
          },
          {
            keys: "<C-BS>",
            type: "keyToKey",
            toKeys: "B",
            context: "normal",
          },
          {
            keys: "<S-Space>",
            type: "keyToKey",
            toKeys: "w",
          },
          {
            keys: "<S-BS>",
            type: "keyToKey",
            toKeys: "b",
            context: "normal",
          },
          {
            keys: "<C-n>",
            type: "keyToKey",
            toKeys: "j",
          },
          {
            keys: "<C-p>",
            type: "keyToKey",
            toKeys: "k",
          },
          {
            keys: "<C-[>",
            type: "keyToKey",
            toKeys: "<Esc>",
          },
          {
            keys: "<C-c>",
            type: "keyToKey",
            toKeys: "<Esc>",
          },
          {
            keys: "<C-[>",
            type: "keyToKey",
            toKeys: "<Esc>",
            context: "insert",
          },
          {
            keys: "<C-c>",
            type: "keyToKey",
            toKeys: "<Esc>",
            context: "insert",
          },
          {
            keys: "s",
            type: "keyToKey",
            toKeys: "cl",
            context: "normal",
          },
          {
            keys: "s",
            type: "keyToKey",
            toKeys: "c",
            context: "visual",
          },
          {
            keys: "S",
            type: "keyToKey",
            toKeys: "cc",
            context: "normal",
          },
          {
            keys: "S",
            type: "keyToKey",
            toKeys: "VdO",
            context: "visual",
          },
          {
            keys: "<Home>",
            type: "keyToKey",
            toKeys: "0",
          },
          {
            keys: "<End>",
            type: "keyToKey",
            toKeys: "$",
          },
          {
            keys: "<PageUp>",
            type: "keyToKey",
            toKeys: "<C-b>",
          },
          {
            keys: "<PageDown>",
            type: "keyToKey",
            toKeys: "<C-f>",
          },
          {
            keys: "<CR>",
            type: "keyToKey",
            toKeys: "j^",
            context: "normal",
          },
          {
            keys: "H",
            type: "motion",
            motion: "moveToTopLine",
            motionArgs: {
              linewise: !0,
              toJumplist: !0,
            },
          },
          {
            keys: "M",
            type: "motion",
            motion: "moveToMiddleLine",
            motionArgs: {
              linewise: !0,
              toJumplist: !0,
            },
          },
          {
            keys: "L",
            type: "motion",
            motion: "moveToBottomLine",
            motionArgs: {
              linewise: !0,
              toJumplist: !0,
            },
          },
          {
            keys: "h",
            type: "motion",
            motion: "moveByCharacters",
            motionArgs: {
              forward: !1,
            },
          },
          {
            keys: "l",
            type: "motion",
            motion: "moveByCharacters",
            motionArgs: {
              forward: !0,
            },
          },
          {
            keys: "j",
            type: "motion",
            motion: "moveByLines",
            motionArgs: {
              forward: !0,
              linewise: !0,
            },
          },
          {
            keys: "k",
            type: "motion",
            motion: "moveByLines",
            motionArgs: {
              forward: !1,
              linewise: !0,
            },
          },
          {
            keys: "gj",
            type: "motion",
            motion: "moveByDisplayLines",
            motionArgs: {
              forward: !0,
            },
          },
          {
            keys: "gk",
            type: "motion",
            motion: "moveByDisplayLines",
            motionArgs: {
              forward: !1,
            },
          },
          {
            keys: "w",
            type: "motion",
            motion: "moveByWords",
            motionArgs: {
              forward: !0,
              wordEnd: !1,
            },
          },
          {
            keys: "W",
            type: "motion",
            motion: "moveByWords",
            motionArgs: {
              forward: !0,
              wordEnd: !1,
              bigWord: !0,
            },
          },
          {
            keys: "e",
            type: "motion",
            motion: "moveByWords",
            motionArgs: {
              forward: !0,
              wordEnd: !0,
              inclusive: !0,
            },
          },
          {
            keys: "E",
            type: "motion",
            motion: "moveByWords",
            motionArgs: {
              forward: !0,
              wordEnd: !0,
              bigWord: !0,
              inclusive: !0,
            },
          },
          {
            keys: "b",
            type: "motion",
            motion: "moveByWords",
            motionArgs: {
              forward: !1,
              wordEnd: !1,
            },
          },
          {
            keys: "B",
            type: "motion",
            motion: "moveByWords",
            motionArgs: {
              forward: !1,
              wordEnd: !1,
              bigWord: !0,
            },
          },
          {
            keys: "ge",
            type: "motion",
            motion: "moveByWords",
            motionArgs: {
              forward: !1,
              wordEnd: !0,
              inclusive: !0,
            },
          },
          {
            keys: "gE",
            type: "motion",
            motion: "moveByWords",
            motionArgs: {
              forward: !1,
              wordEnd: !0,
              bigWord: !0,
              inclusive: !0,
            },
          },
          {
            keys: "{",
            type: "motion",
            motion: "moveByParagraph",
            motionArgs: {
              forward: !1,
              toJumplist: !0,
            },
          },
          {
            keys: "}",
            type: "motion",
            motion: "moveByParagraph",
            motionArgs: {
              forward: !0,
              toJumplist: !0,
            },
          },
          {
            keys: "<C-f>",
            type: "motion",
            motion: "moveByPage",
            motionArgs: {
              forward: !0,
            },
          },
          {
            keys: "<C-b>",
            type: "motion",
            motion: "moveByPage",
            motionArgs: {
              forward: !1,
            },
          },
          {
            keys: "<C-d>",
            type: "motion",
            motion: "moveByScroll",
            motionArgs: {
              forward: !0,
              explicitRepeat: !0,
            },
          },
          {
            keys: "<C-u>",
            type: "motion",
            motion: "moveByScroll",
            motionArgs: {
              forward: !1,
              explicitRepeat: !0,
            },
          },
          {
            keys: "gg",
            type: "motion",
            motion: "moveToLineOrEdgeOfDocument",
            motionArgs: {
              forward: !1,
              explicitRepeat: !0,
              linewise: !0,
              toJumplist: !0,
            },
          },
          {
            keys: "G",
            type: "motion",
            motion: "moveToLineOrEdgeOfDocument",
            motionArgs: {
              forward: !0,
              explicitRepeat: !0,
              linewise: !0,
              toJumplist: !0,
            },
          },
          {
            keys: "0",
            type: "motion",
            motion: "moveToStartOfLine",
          },
          {
            keys: "^",
            type: "motion",
            motion: "moveToFirstNonWhiteSpaceCharacter",
          },
          {
            keys: "+",
            type: "motion",
            motion: "moveByLines",
            motionArgs: {
              forward: !0,
              toFirstChar: !0,
            },
          },
          {
            keys: "-",
            type: "motion",
            motion: "moveByLines",
            motionArgs: {
              forward: !1,
              toFirstChar: !0,
            },
          },
          {
            keys: "_",
            type: "motion",
            motion: "moveByLines",
            motionArgs: {
              forward: !0,
              toFirstChar: !0,
              repeatOffset: -1,
            },
          },
          {
            keys: "$",
            type: "motion",
            motion: "moveToEol",
            motionArgs: {
              inclusive: !0,
            },
          },
          {
            keys: "%",
            type: "motion",
            motion: "moveToMatchedSymbol",
            motionArgs: {
              inclusive: !0,
              toJumplist: !0,
            },
          },
          {
            keys: "f<character>",
            type: "motion",
            motion: "moveToCharacter",
            motionArgs: {
              forward: !0,
              inclusive: !0,
            },
          },
          {
            keys: "F<character>",
            type: "motion",
            motion: "moveToCharacter",
            motionArgs: {
              forward: !1,
            },
          },
          {
            keys: "t<character>",
            type: "motion",
            motion: "moveTillCharacter",
            motionArgs: {
              forward: !0,
              inclusive: !0,
            },
          },
          {
            keys: "T<character>",
            type: "motion",
            motion: "moveTillCharacter",
            motionArgs: {
              forward: !1,
            },
          },
          {
            keys: ";",
            type: "motion",
            motion: "repeatLastCharacterSearch",
            motionArgs: {
              forward: !0,
            },
          },
          {
            keys: ",",
            type: "motion",
            motion: "repeatLastCharacterSearch",
            motionArgs: {
              forward: !1,
            },
          },
          {
            keys: "'<character>",
            type: "motion",
            motion: "goToMark",
            motionArgs: {
              toJumplist: !0,
              linewise: !0,
            },
          },
          {
            keys: "`<character>",
            type: "motion",
            motion: "goToMark",
            motionArgs: {
              toJumplist: !0,
            },
          },
          {
            keys: "]`",
            type: "motion",
            motion: "jumpToMark",
            motionArgs: {
              forward: !0,
            },
          },
          {
            keys: "[`",
            type: "motion",
            motion: "jumpToMark",
            motionArgs: {
              forward: !1,
            },
          },
          {
            keys: "]'",
            type: "motion",
            motion: "jumpToMark",
            motionArgs: {
              forward: !0,
              linewise: !0,
            },
          },
          {
            keys: "['",
            type: "motion",
            motion: "jumpToMark",
            motionArgs: {
              forward: !1,
              linewise: !0,
            },
          },
          {
            keys: "]p",
            type: "action",
            action: "paste",
            isEdit: !0,
            actionArgs: {
              after: !0,
              isEdit: !0,
              matchIndent: !0,
            },
          },
          {
            keys: "[p",
            type: "action",
            action: "paste",
            isEdit: !0,
            actionArgs: {
              after: !1,
              isEdit: !0,
              matchIndent: !0,
            },
          },
          {
            keys: "]<character>",
            type: "motion",
            motion: "moveToSymbol",
            motionArgs: {
              forward: !0,
              toJumplist: !0,
            },
          },
          {
            keys: "[<character>",
            type: "motion",
            motion: "moveToSymbol",
            motionArgs: {
              forward: !1,
              toJumplist: !0,
            },
          },
          {
            keys: "|",
            type: "motion",
            motion: "moveToColumn",
          },
          {
            keys: "o",
            type: "motion",
            motion: "moveToOtherHighlightedEnd",
            context: "visual",
          },
          {
            keys: "O",
            type: "motion",
            motion: "moveToOtherHighlightedEnd",
            motionArgs: {
              sameLine: !0,
            },
            context: "visual",
          },
          {
            keys: "d",
            type: "operator",
            operator: "delete",
          },
          {
            keys: "y",
            type: "operator",
            operator: "yank",
          },
          {
            keys: "c",
            type: "operator",
            operator: "change",
          },
          {
            keys: ">",
            type: "operator",
            operator: "indent",
            operatorArgs: {
              indentRight: !0,
            },
          },
          {
            keys: "<",
            type: "operator",
            operator: "indent",
            operatorArgs: {
              indentRight: !1,
            },
          },
          {
            keys: "g~",
            type: "operator",
            operator: "changeCase",
          },
          {
            keys: "gu",
            type: "operator",
            operator: "changeCase",
            operatorArgs: {
              toLower: !0,
            },
            isEdit: !0,
          },
          {
            keys: "gU",
            type: "operator",
            operator: "changeCase",
            operatorArgs: {
              toLower: !1,
            },
            isEdit: !0,
          },
          {
            keys: "n",
            type: "motion",
            motion: "findNext",
            motionArgs: {
              forward: !0,
              toJumplist: !0,
            },
          },
          {
            keys: "N",
            type: "motion",
            motion: "findNext",
            motionArgs: {
              forward: !1,
              toJumplist: !0,
            },
          },
          {
            keys: "x",
            type: "operatorMotion",
            operator: "delete",
            motion: "moveByCharacters",
            motionArgs: {
              forward: !0,
            },
            operatorMotionArgs: {
              visualLine: !1,
            },
          },
          {
            keys: "X",
            type: "operatorMotion",
            operator: "delete",
            motion: "moveByCharacters",
            motionArgs: {
              forward: !1,
            },
            operatorMotionArgs: {
              visualLine: !0,
            },
          },
          {
            keys: "D",
            type: "operatorMotion",
            operator: "delete",
            motion: "moveToEol",
            motionArgs: {
              inclusive: !0,
            },
            context: "normal",
          },
          {
            keys: "D",
            type: "operator",
            operator: "delete",
            operatorArgs: {
              linewise: !0,
            },
            context: "visual",
          },
          {
            keys: "Y",
            type: "operatorMotion",
            operator: "yank",
            motion: "moveToEol",
            motionArgs: {
              inclusive: !0,
            },
            context: "normal",
          },
          {
            keys: "Y",
            type: "operator",
            operator: "yank",
            operatorArgs: {
              linewise: !0,
            },
            context: "visual",
          },
          {
            keys: "C",
            type: "operatorMotion",
            operator: "change",
            motion: "moveToEol",
            motionArgs: {
              inclusive: !0,
            },
            context: "normal",
          },
          {
            keys: "C",
            type: "operator",
            operator: "change",
            operatorArgs: {
              linewise: !0,
            },
            context: "visual",
          },
          {
            keys: "~",
            type: "operatorMotion",
            operator: "changeCase",
            motion: "moveByCharacters",
            motionArgs: {
              forward: !0,
            },
            operatorArgs: {
              shouldMoveCursor: !0,
            },
            context: "normal",
          },
          {
            keys: "~",
            type: "operator",
            operator: "changeCase",
            context: "visual",
          },
          {
            keys: "<C-w>",
            type: "operatorMotion",
            operator: "delete",
            motion: "moveByWords",
            motionArgs: {
              forward: !1,
              wordEnd: !1,
            },
            context: "insert",
          },
          {
            keys: "<C-i>",
            type: "action",
            action: "jumpListWalk",
            actionArgs: {
              forward: !0,
            },
          },
          {
            keys: "<C-o>",
            type: "action",
            action: "jumpListWalk",
            actionArgs: {
              forward: !1,
            },
          },
          {
            keys: "<C-e>",
            type: "action",
            action: "scroll",
            actionArgs: {
              forward: !0,
              linewise: !0,
            },
          },
          {
            keys: "<C-y>",
            type: "action",
            action: "scroll",
            actionArgs: {
              forward: !1,
              linewise: !0,
            },
          },
          {
            keys: "a",
            type: "action",
            action: "enterInsertMode",
            isEdit: !0,
            actionArgs: {
              insertAt: "charAfter",
            },
            context: "normal",
          },
          {
            keys: "A",
            type: "action",
            action: "enterInsertMode",
            isEdit: !0,
            actionArgs: {
              insertAt: "eol",
            },
            context: "normal",
          },
          {
            keys: "A",
            type: "action",
            action: "enterInsertMode",
            isEdit: !0,
            actionArgs: {
              insertAt: "endOfSelectedArea",
            },
            context: "visual",
          },
          {
            keys: "i",
            type: "action",
            action: "enterInsertMode",
            isEdit: !0,
            actionArgs: {
              insertAt: "inplace",
            },
            context: "normal",
          },
          {
            keys: "I",
            type: "action",
            action: "enterInsertMode",
            isEdit: !0,
            actionArgs: {
              insertAt: "firstNonBlank",
            },
            context: "normal",
          },
          {
            keys: "I",
            type: "action",
            action: "enterInsertMode",
            isEdit: !0,
            actionArgs: {
              insertAt: "startOfSelectedArea",
            },
            context: "visual",
          },
          {
            keys: "o",
            type: "action",
            action: "newLineAndEnterInsertMode",
            isEdit: !0,
            interlaceInsertRepeat: !0,
            actionArgs: {
              after: !0,
            },
            context: "normal",
          },
          {
            keys: "O",
            type: "action",
            action: "newLineAndEnterInsertMode",
            isEdit: !0,
            interlaceInsertRepeat: !0,
            actionArgs: {
              after: !1,
            },
            context: "normal",
          },
          {
            keys: "v",
            type: "action",
            action: "toggleVisualMode",
          },
          {
            keys: "V",
            type: "action",
            action: "toggleVisualMode",
            actionArgs: {
              linewise: !0,
            },
          },
          {
            keys: "<C-v>",
            type: "action",
            action: "toggleVisualMode",
            actionArgs: {
              blockwise: !0,
            },
          },
          {
            keys: "<C-q>",
            type: "action",
            action: "toggleVisualMode",
            actionArgs: {
              blockwise: !0,
            },
          },
          {
            keys: "gv",
            type: "action",
            action: "reselectLastSelection",
          },
          {
            keys: "J",
            type: "action",
            action: "joinLines",
            isEdit: !0,
          },
          {
            keys: "p",
            type: "action",
            action: "paste",
            isEdit: !0,
            actionArgs: {
              after: !0,
              isEdit: !0,
            },
          },
          {
            keys: "P",
            type: "action",
            action: "paste",
            isEdit: !0,
            actionArgs: {
              after: !1,
              isEdit: !0,
            },
          },
          {
            keys: "r<character>",
            type: "action",
            action: "replace",
            isEdit: !0,
          },
          {
            keys: "@<character>",
            type: "action",
            action: "replayMacro",
          },
          {
            keys: "q<character>",
            type: "action",
            action: "enterMacroRecordMode",
          },
          {
            keys: "R",
            type: "action",
            action: "enterInsertMode",
            isEdit: !0,
            actionArgs: {
              replace: !0,
            },
          },
          {
            keys: "u",
            type: "action",
            action: "undo",
            context: "normal",
          },
          {
            keys: "u",
            type: "operator",
            operator: "changeCase",
            operatorArgs: {
              toLower: !0,
            },
            context: "visual",
            isEdit: !0,
          },
          {
            keys: "U",
            type: "operator",
            operator: "changeCase",
            operatorArgs: {
              toLower: !1,
            },
            context: "visual",
            isEdit: !0,
          },
          {
            keys: "<C-r>",
            type: "action",
            action: "redo",
          },
          {
            keys: "m<character>",
            type: "action",
            action: "setMark",
          },
          {
            keys: '"<character>',
            type: "action",
            action: "setRegister",
          },
          {
            keys: "zz",
            type: "action",
            action: "scrollToCursor",
            actionArgs: {
              position: "center",
            },
          },
          {
            keys: "z.",
            type: "action",
            action: "scrollToCursor",
            actionArgs: {
              position: "center",
            },
            motion: "moveToFirstNonWhiteSpaceCharacter",
          },
          {
            keys: "zt",
            type: "action",
            action: "scrollToCursor",
            actionArgs: {
              position: "top",
            },
          },
          {
            keys: "z<CR>",
            type: "action",
            action: "scrollToCursor",
            actionArgs: {
              position: "top",
            },
            motion: "moveToFirstNonWhiteSpaceCharacter",
          },
          {
            keys: "z-",
            type: "action",
            action: "scrollToCursor",
            actionArgs: {
              position: "bottom",
            },
          },
          {
            keys: "zb",
            type: "action",
            action: "scrollToCursor",
            actionArgs: {
              position: "bottom",
            },
            motion: "moveToFirstNonWhiteSpaceCharacter",
          },
          {
            keys: ".",
            type: "action",
            action: "repeatLastEdit",
          },
          {
            keys: "<C-a>",
            type: "action",
            action: "incrementNumberToken",
            isEdit: !0,
            actionArgs: {
              increase: !0,
              backtrack: !1,
            },
          },
          {
            keys: "<C-x>",
            type: "action",
            action: "incrementNumberToken",
            isEdit: !0,
            actionArgs: {
              increase: !1,
              backtrack: !1,
            },
          },
          {
            keys: "a<character>",
            type: "motion",
            motion: "textObjectManipulation",
          },
          {
            keys: "i<character>",
            type: "motion",
            motion: "textObjectManipulation",
            motionArgs: {
              textObjectInner: !0,
            },
          },
          {
            keys: "/",
            type: "search",
            searchArgs: {
              forward: !0,
              querySrc: "prompt",
              toJumplist: !0,
            },
          },
          {
            keys: "?",
            type: "search",
            searchArgs: {
              forward: !1,
              querySrc: "prompt",
              toJumplist: !0,
            },
          },
          {
            keys: "*",
            type: "search",
            searchArgs: {
              forward: !0,
              querySrc: "wordUnderCursor",
              wholeWordOnly: !0,
              toJumplist: !0,
            },
          },
          {
            keys: "#",
            type: "search",
            searchArgs: {
              forward: !1,
              querySrc: "wordUnderCursor",
              wholeWordOnly: !0,
              toJumplist: !0,
            },
          },
          {
            keys: "g*",
            type: "search",
            searchArgs: {
              forward: !0,
              querySrc: "wordUnderCursor",
              toJumplist: !0,
            },
          },
          {
            keys: "g#",
            type: "search",
            searchArgs: {
              forward: !1,
              querySrc: "wordUnderCursor",
              toJumplist: !0,
            },
          },
          {
            keys: ":",
            type: "ex",
          },
        ],
        Et = [
          {
            name: "colorscheme",
            shortName: "colo",
          },
          {
            name: "map",
          },
          {
            name: "imap",
            shortName: "im",
          },
          {
            name: "nmap",
            shortName: "nm",
          },
          {
            name: "vmap",
            shortName: "vm",
          },
          {
            name: "unmap",
          },
          {
            name: "write",
            shortName: "w",
          },
          {
            name: "undo",
            shortName: "u",
          },
          {
            name: "redo",
            shortName: "red",
          },
          {
            name: "set",
            shortName: "se",
          },
          {
            name: "set",
            shortName: "se",
          },
          {
            name: "setlocal",
            shortName: "setl",
          },
          {
            name: "setglobal",
            shortName: "setg",
          },
          {
            name: "sort",
            shortName: "sor",
          },
          {
            name: "substitute",
            shortName: "s",
            possiblyAsync: !0,
          },
          {
            name: "nohlsearch",
            shortName: "noh",
          },
          {
            name: "delmarks",
            shortName: "delm",
          },
          {
            name: "registers",
            shortName: "reg",
            excludeFromCommandHistory: !0,
          },
          {
            name: "global",
            shortName: "g",
          },
        ],
        $t = St.Pos,
        Tt = function () {
          return zt;
        };
      St.defineOption("vimMode", !1, function (e, t, n) {
        t && "vim" != e.getOption("keyMap")
          ? e.setOption("keyMap", "vim")
          : !t &&
            n != St.Init &&
            /^vim/.test(e.getOption("keyMap")) &&
            e.setOption("keyMap", "default");
      });
      var At = {
          Shift: "S",
          Ctrl: "C",
          Alt: "A",
          Cmd: "D",
          Mod: "A",
        },
        Mt = {
          Enter: "CR",
          Backspace: "BS",
          Delete: "Del",
        },
        Ot = /[\d]/,
        It = [
          St.isWordChar,
          function (e) {
            return e && !St.isWordChar(e) && !/\s/.test(e);
          },
        ],
        Rt = [
          function (e) {
            return /\S/.test(e);
          },
        ],
        Pt = d(65, 26),
        Lt = d(97, 26),
        Dt = d(48, 10),
        Nt = [].concat(Pt, Lt, Dt, ["<", ">"]),
        Ht = [].concat(Pt, Lt, Dt, ["-", '"', ".", ":", "/"]),
        Bt = {};
      y("filetype", void 0, "string", ["ft"], function (e, t) {
        if (void 0 !== t) {
          if (void 0 === e) return "null" == (n = t.getOption("mode")) ? "" : n;
          var n = "" == e ? "null" : e;
          t.setOption("mode", n);
        }
      });
      var Ft,
        jt,
        Ut = function () {
          function e(e, t, s) {
            function l(t) {
              var i = ++o % n,
                r = a[i];
              r && r.clear(), (a[i] = e.setBookmark(t));
            }
            var c = a[o % n];
            if (c) {
              var u = c.find();
              u && !z(u, t) && l(t);
            } else l(t);
            l(s), (i = o), (r = o - n + 1) < 0 && (r = 0);
          }
          function t(e, t) {
            (o += t) > i ? (o = i) : o < r && (o = r);
            var s = a[(n + o) % n];
            if (s && !s.find()) {
              var l,
                c = t > 0 ? 1 : -1,
                u = e.getCursor();
              do {
                if ((s = a[(n + (o += c)) % n]) && (l = s.find()) && !z(u, l))
                  break;
              } while (o < i && o > r);
            }
            return s;
          }
          var n = 100,
            o = -1,
            i = 0,
            r = 0,
            a = new Array(n);
          return {
            cachedCursor: void 0,
            add: e,
            move: t,
          };
        },
        qt = function (e) {
          return e
            ? {
                changes: e.changes,
                expectCursorActivityForChange: e.expectCursorActivityForChange,
              }
            : {
                changes: [],
                expectCursorActivityForChange: !1,
              };
        };
      C.prototype = {
        exitMacroRecordMode: function () {
          var e = Ft.macroModeState;
          e.onRecordingDone && e.onRecordingDone(),
            (e.onRecordingDone = void 0),
            (e.isRecording = !1);
        },
        enterMacroRecordMode: function (e, t) {
          var n = Ft.registerController.getRegister(t);
          n &&
            (n.clear(),
            (this.latestRegister = t),
            e.openDialog &&
              (this.onRecordingDone = e.openDialog(
                "(recording)[" + t + "]",
                null,
                {
                  bottom: !0,
                }
              )),
            (this.isRecording = !0));
        },
      };
      var zt = {
        buildKeyMap: function () {},
        getRegisterController: function () {
          return Ft.registerController;
        },
        resetVimGlobalState_: S,
        getVimGlobalState_: function () {
          return Ft;
        },
        maybeInitVimState_: k,
        suppressErrorLogging: !1,
        InsertModeKey: rt,
        map: function (e, t, n) {
          nn.map(e, t, n);
        },
        unmap: function (e, t) {
          nn.unmap(e, t);
        },
        setOption: w,
        getOption: _,
        defineOption: y,
        defineEx: function (e, t, n) {
          if (t) {
            if (0 !== e.indexOf(t))
              throw new Error(
                '(Vim.defineEx) "' +
                  t +
                  '" is not a prefix of "' +
                  e +
                  '", command not registered'
              );
          } else t = e;
          (tn[e] = n),
            (nn.commandMap_[t] = {
              name: e,
              shortName: t,
              type: "api",
            });
        },
        handleKey: function (e, t, n) {
          var o = this.findKey(e, t, n);
          if ("function" == typeof o) return o();
        },
        findKey: function (e, t, n) {
          function o() {
            var o = Ft.macroModeState;
            if (o.isRecording) {
              if ("q" == t) return o.exitMacroRecordMode(), E(e), !0;
              "mapping" != n && Xe(o, t);
            }
          }
          function i() {
            if ("<Esc>" == t)
              return E(e), c.visualMode ? le(e) : c.insertMode && Ge(e), !0;
          }
          function r(n) {
            for (var o; n; )
              (o = /<\w+-.+?>|<\w+>|./.exec(n)),
                (t = o[0]),
                (n = n.substring(o.index + t.length)),
                St.Vim.handleKey(e, t, "mapping");
          }
          function a() {
            if (i()) return !0;
            for (
              var n = (c.inputState.keyBuffer = c.inputState.keyBuffer + t),
                o = 1 == t.length,
                r = Kt.matchCommand(n, xt, c.inputState, "insert");
              n.length > 1 && "full" != r.type;

            ) {
              n = c.inputState.keyBuffer = n.slice(1);
              var a = Kt.matchCommand(n, xt, c.inputState, "insert");
              "none" != a.type && (r = a);
            }
            if ("none" == r.type) return E(e), !1;
            if ("partial" == r.type)
              return (
                jt && window.clearTimeout(jt),
                (jt = window.setTimeout(function () {
                  c.insertMode && c.inputState.keyBuffer && E(e);
                }, _("insertModeEscKeysTimeout"))),
                !o
              );
            if ((jt && window.clearTimeout(jt), o)) {
              for (var s = e.listSelections(), l = 0; l < s.length; l++) {
                var u = s[l].head;
                e.replaceRange("", N(u, 0, -(n.length - 1)), u, "+input");
              }
              Ft.macroModeState.lastInsertModeChanges.changes.pop();
            }
            return E(e), r.command;
          }
          function s() {
            if (o() || i()) return !0;
            var n = (c.inputState.keyBuffer = c.inputState.keyBuffer + t);
            if (/^[1-9]\d*$/.test(n)) return !0;
            if (!(r = /^(\d*)(.*)$/.exec(n))) return E(e), !1;
            var r,
              a = c.visualMode ? "visual" : "normal",
              s = Kt.matchCommand(r[2] || r[1], xt, c.inputState, a);
            return "none" == s.type
              ? (E(e), !1)
              : "partial" == s.type ||
                  ((c.inputState.keyBuffer = ""),
                  (r = /^(\d*)(.*)$/.exec(n))[1] &&
                    "0" != r[1] &&
                    c.inputState.pushRepeatDigit(r[1]),
                  s.command);
          }
          var l,
            c = k(e);
          return !1 === (l = c.insertMode ? a() : s())
            ? void 0
            : !0 === l
            ? function () {
                return !0;
              }
            : function () {
                if ((!l.operator && !l.isEdit) || !e.getOption("readOnly"))
                  return e.operation(function () {
                    e.curOp.isVimOp = !0;
                    try {
                      "keyToKey" == l.type
                        ? r(l.toKeys)
                        : Kt.processCommand(e, c, l);
                    } catch (t) {
                      throw (
                        ((e.state.vim = void 0),
                        k(e),
                        St.Vim.suppressErrorLogging || console.log(t),
                        t)
                      );
                    }
                    return !0;
                  });
              };
        },
        handleEx: function (e, t) {
          nn.processCommand(e, t);
        },
        defineMotion: O,
        defineAction: P,
        defineOperator: R,
        mapCommand: Qe,
        _mapCommand: Ye,
        defineRegister: T,
        exitVisualMode: le,
        exitInsertMode: Ge,
      };
      (x.prototype.pushRepeatDigit = function (e) {
        this.operator
          ? (this.motionRepeat = this.motionRepeat.concat(e))
          : (this.prefixRepeat = this.prefixRepeat.concat(e));
      }),
        (x.prototype.getRepeat = function () {
          var e = 0;
          return (
            (this.prefixRepeat.length > 0 || this.motionRepeat.length > 0) &&
              ((e = 1),
              this.prefixRepeat.length > 0 &&
                (e *= parseInt(this.prefixRepeat.join(""), 10)),
              this.motionRepeat.length > 0 &&
                (e *= parseInt(this.motionRepeat.join(""), 10))),
            e
          );
        }),
        ($.prototype = {
          setText: function (e, t, n) {
            (this.keyBuffer = [e || ""]),
              (this.linewise = !!t),
              (this.blockwise = !!n);
          },
          pushText: function (e, t) {
            t &&
              (this.linewise || this.keyBuffer.push("\n"),
              (this.linewise = !0)),
              this.keyBuffer.push(e);
          },
          pushInsertModeChanges: function (e) {
            this.insertModeChanges.push(qt(e));
          },
          pushSearchQuery: function (e) {
            this.searchQueries.push(e);
          },
          clear: function () {
            (this.keyBuffer = []),
              (this.insertModeChanges = []),
              (this.searchQueries = []),
              (this.linewise = !1);
          },
          toString: function () {
            return this.keyBuffer.join("");
          },
        }),
        (A.prototype = {
          pushText: function (e, t, n, o, i) {
            o && "\n" == n.charAt(0) && (n = n.slice(1) + "\n"),
              o && "\n" !== n.charAt(n.length - 1) && (n += "\n");
            var r = this.isValidRegister(e) ? this.getRegister(e) : null;
            if (r) {
              g(e) ? r.pushText(n, o) : r.setText(n, o, i),
                this.unnamedRegister.setText(r.toString(), o);
            } else {
              switch (t) {
                case "yank":
                  this.registers[0] = new $(n, o, i);
                  break;
                case "delete":
                case "change":
                  -1 == n.indexOf("\n")
                    ? (this.registers["-"] = new $(n, o))
                    : (this.shiftNumericRegisters_(),
                      (this.registers[1] = new $(n, o)));
              }
              this.unnamedRegister.setText(n, o, i);
            }
          },
          getRegister: function (e) {
            return this.isValidRegister(e)
              ? ((e = e.toLowerCase()),
                this.registers[e] || (this.registers[e] = new $()),
                this.registers[e])
              : this.unnamedRegister;
          },
          isValidRegister: function (e) {
            return e && b(e, Ht);
          },
          shiftNumericRegisters_: function () {
            for (var e = 9; e >= 2; e--)
              this.registers[e] = this.getRegister("" + (e - 1));
          },
        }),
        (M.prototype = {
          nextMatch: function (e, t) {
            var n = this.historyBuffer,
              o = t ? -1 : 1;
            null === this.initialPrefix && (this.initialPrefix = e);
            for (var i = this.iterator + o; t ? i >= 0 : i < n.length; i += o)
              for (var r = n[i], a = 0; a <= r.length; a++)
                if (this.initialPrefix == r.substring(0, a))
                  return (this.iterator = i), r;
            return i >= n.length
              ? ((this.iterator = n.length), this.initialPrefix)
              : i < 0
              ? e
              : void 0;
          },
          pushInput: function (e) {
            var t = this.historyBuffer.indexOf(e);
            t > -1 && this.historyBuffer.splice(t, 1),
              e.length && this.historyBuffer.push(e);
          },
          reset: function () {
            (this.initialPrefix = null),
              (this.iterator = this.historyBuffer.length);
          },
        });
      var Kt = {
          matchCommand: function (e, t, n, o) {
            var i,
              r = B(e, t, o, n);
            if (!r.full && !r.partial)
              return {
                type: "none",
              };
            if (!r.full && r.partial)
              return {
                type: "partial",
              };
            for (var a = 0; a < r.full.length; a++) {
              var s = r.full[a];
              i || (i = s);
            }
            if ("<character>" == i.keys.slice(-11)) {
              var l = j(e);
              if (/<C-.>/.test(l))
                return {
                  type: "none",
                };
              n.selectedCharacter = l;
            }
            return {
              type: "full",
              command: i,
            };
          },
          processCommand: function (e, t, n) {
            switch (
              ((t.inputState.repeatOverride = n.repeatOverride), n.type)
            ) {
              case "motion":
                this.processMotion(e, t, n);
                break;
              case "operator":
                this.processOperator(e, t, n);
                break;
              case "operatorMotion":
                this.processOperatorMotion(e, t, n);
                break;
              case "action":
                this.processAction(e, t, n);
                break;
              case "search":
                this.processSearch(e, t, n);
                break;
              case "ex":
              case "keyToEx":
                this.processEx(e, t, n);
            }
          },
          processMotion: function (e, t, n) {
            (t.inputState.motion = n.motion),
              (t.inputState.motionArgs = D(n.motionArgs)),
              this.evalInput(e, t);
          },
          processOperator: function (e, t, n) {
            var o = t.inputState;
            if (o.operator) {
              if (o.operator == n.operator)
                return (
                  (o.motion = "expandToLine"),
                  (o.motionArgs = {
                    linewise: !0,
                  }),
                  void this.evalInput(e, t)
                );
              E(e);
            }
            (o.operator = n.operator),
              (o.operatorArgs = D(n.operatorArgs)),
              t.visualMode && this.evalInput(e, t);
          },
          processOperatorMotion: function (e, t, n) {
            var o = t.visualMode,
              i = D(n.operatorMotionArgs);
            i && o && i.visualLine && (t.visualLine = !0),
              this.processOperator(e, t, n),
              o || this.processMotion(e, t, n);
          },
          processAction: function (e, t, n) {
            var o = t.inputState,
              i = o.getRepeat(),
              r = !!i,
              a = D(n.actionArgs) || {};
            o.selectedCharacter && (a.selectedCharacter = o.selectedCharacter),
              n.operator && this.processOperator(e, t, n),
              n.motion && this.processMotion(e, t, n),
              (n.motion || n.operator) && this.evalInput(e, t),
              (a.repeat = i || 1),
              (a.repeatIsExplicit = r),
              (a.registerName = o.registerName),
              E(e),
              (t.lastMotion = null),
              n.isEdit && this.recordLastEdit(t, o, n),
              Gt[n.action](e, a, t);
          },
          processSearch: function (e, t, n) {
            function o(o, i, r) {
              Ft.searchHistoryController.pushInput(o),
                Ft.searchHistoryController.reset();
              try {
                Fe(e, o, i, r);
              } catch (t) {
                return De(e, "Invalid regex: " + o), void E(e);
              }
              Kt.processMotion(e, t, {
                type: "motion",
                motion: "findNext",
                motionArgs: {
                  forward: !0,
                  toJumplist: n.searchArgs.toJumplist,
                },
              });
            }
            function i(t) {
              e.scrollTo(d.left, d.top), o(t, !0, !0);
              var n = Ft.macroModeState;
              n.isRecording && et(n, t);
            }
            function r(t, n, o) {
              var i,
                r,
                a = St.keyName(t);
              "Up" == a || "Down" == a
                ? ((i = "Up" == a),
                  o((n = Ft.searchHistoryController.nextMatch(n, i) || "")))
                : "Left" != a &&
                  "Right" != a &&
                  "Ctrl" != a &&
                  "Alt" != a &&
                  "Shift" != a &&
                  Ft.searchHistoryController.reset();
              try {
                r = Fe(e, n, !0, !0);
              } catch (t) {}
              r
                ? e.scrollIntoView(qe(e, !s, r), 30)
                : (ze(e), e.scrollTo(d.left, d.top));
            }
            function a(t, n, o) {
              var i = St.keyName(t);
              "Esc" == i ||
              "Ctrl-C" == i ||
              "Ctrl-[" == i ||
              ("Backspace" == i && "" == n)
                ? (Ft.searchHistoryController.pushInput(n),
                  Ft.searchHistoryController.reset(),
                  Fe(e, u),
                  ze(e),
                  e.scrollTo(d.left, d.top),
                  St.e_stop(t),
                  E(e),
                  o(),
                  e.focus())
                : "Ctrl-U" == i && (St.e_stop(t), o(""));
            }
            if (e.getSearchCursor) {
              var s = n.searchArgs.forward,
                l = n.searchArgs.wholeWordOnly;
              Ee(e).setReversed(!s);
              var c = s ? "/" : "?",
                u = Ee(e).getQuery(),
                d = e.getScrollInfo();
              switch (n.searchArgs.querySrc) {
                case "prompt":
                  var h = Ft.macroModeState;
                  if (h.isPlaying)
                    o((m = h.replaySearchQueries.shift()), !0, !1);
                  else
                    He(e, {
                      onClose: i,
                      prefix: c,
                      desc: Zt,
                      onKeyUp: r,
                      onKeyDown: a,
                    });
                  break;
                case "wordUnderCursor":
                  var p = he(e, !1, !0, !1, !0),
                    f = !0;
                  if ((p || ((p = he(e, !1, !0, !1, !1)), (f = !1)), !p))
                    return;
                  var m = e
                    .getLine(p.start.line)
                    .substring(p.start.ch, p.end.ch);
                  (m = f && l ? "\\b" + m + "\\b" : J(m)),
                    (Ft.jumpList.cachedCursor = e.getCursor()),
                    e.setCursor(p.start),
                    o(m, !0, !1);
              }
            }
          },
          processEx: function (e, t, n) {
            function o(t) {
              Ft.exCommandHistoryController.pushInput(t),
                Ft.exCommandHistoryController.reset(),
                nn.processCommand(e, t);
            }
            function i(t, n, o) {
              var i,
                r = St.keyName(t);
              ("Esc" == r ||
                "Ctrl-C" == r ||
                "Ctrl-[" == r ||
                ("Backspace" == r && "" == n)) &&
                (Ft.exCommandHistoryController.pushInput(n),
                Ft.exCommandHistoryController.reset(),
                St.e_stop(t),
                E(e),
                o(),
                e.focus()),
                "Up" == r || "Down" == r
                  ? ((i = "Up" == r),
                    o(
                      (n = Ft.exCommandHistoryController.nextMatch(n, i) || "")
                    ))
                  : "Ctrl-U" == r
                  ? (St.e_stop(t), o(""))
                  : "Left" != r &&
                    "Right" != r &&
                    "Ctrl" != r &&
                    "Alt" != r &&
                    "Shift" != r &&
                    Ft.exCommandHistoryController.reset();
            }
            "keyToEx" == n.type
              ? nn.processCommand(e, n.exArgs.input)
              : t.visualMode
              ? He(e, {
                  onClose: o,
                  prefix: ":",
                  value: "'<,'>",
                  onKeyDown: i,
                })
              : He(e, {
                  onClose: o,
                  prefix: ":",
                  onKeyDown: i,
                });
          },
          evalInput: function (e, t) {
            var n,
              o,
              i,
              r = t.inputState,
              a = r.motion,
              s = r.motionArgs || {},
              l = r.operator,
              c = r.operatorArgs || {},
              u = r.registerName,
              d = t.sel,
              h = q(t.visualMode ? L(e, d.head) : e.getCursor("head")),
              p = q(t.visualMode ? L(e, d.anchor) : e.getCursor("anchor")),
              f = q(h),
              m = q(p);
            if (
              (l && this.recordLastEdit(t, r),
              (i =
                void 0 !== r.repeatOverride
                  ? r.repeatOverride
                  : r.getRepeat()) > 0 && s.explicitRepeat
                ? (s.repeatIsExplicit = !0)
                : (s.noRepeat || (!s.explicitRepeat && 0 === i)) &&
                  ((i = 1), (s.repeatIsExplicit = !1)),
              r.selectedCharacter &&
                (s.selectedCharacter = c.selectedCharacter =
                  r.selectedCharacter),
              (s.repeat = i),
              E(e),
              a)
            ) {
              var g = Wt[a](e, h, s, t);
              if (((t.lastMotion = Wt[a]), !g)) return;
              if (s.toJumplist) {
                l ||
                  null == e.ace.curOp ||
                  (e.ace.curOp.command.scrollIntoView = "center-animate");
                var v = Ft.jumpList,
                  b = v.cachedCursor;
                b ? (pe(e, b, g), delete v.cachedCursor) : pe(e, h, g);
              }
              g instanceof Array ? ((o = g[0]), (n = g[1])) : (n = g),
                n || (n = q(h)),
                t.visualMode
                  ? ((t.visualBlock && n.ch === 1 / 0) ||
                      (n = L(e, n, t.visualBlock)),
                    o && (o = L(e, o, !0)),
                    (o = o || m),
                    (d.anchor = o),
                    (d.head = n),
                    re(e),
                    we(e, t, "<", K(o, n) ? o : n),
                    we(e, t, ">", K(o, n) ? n : o))
                  : l || ((n = L(e, n)), e.setCursor(n.line, n.ch));
            }
            if (l) {
              if (c.lastSel) {
                o = m;
                var y = c.lastSel,
                  w = Math.abs(y.head.line - y.anchor.line),
                  _ = Math.abs(y.head.ch - y.anchor.ch);
                (n = y.visualLine
                  ? $t(m.line + w, m.ch)
                  : y.visualBlock
                  ? $t(m.line + w, m.ch + _)
                  : y.head.line == y.anchor.line
                  ? $t(m.line, m.ch + _)
                  : $t(m.line + w, m.ch)),
                  (t.visualMode = !0),
                  (t.visualLine = y.visualLine),
                  (t.visualBlock = y.visualBlock),
                  (d = t.sel =
                    {
                      anchor: o,
                      head: n,
                    }),
                  re(e);
              } else
                t.visualMode &&
                  (c.lastSel = {
                    anchor: q(d.anchor),
                    head: q(d.head),
                    visualBlock: t.visualBlock,
                    visualLine: t.visualLine,
                  });
              var C, k, S, x, $;
              if (t.visualMode) {
                if (
                  ((C = W(d.head, d.anchor)),
                  (k = V(d.head, d.anchor)),
                  (S = t.visualLine || c.linewise),
                  ($ = ae(
                    e,
                    {
                      anchor: C,
                      head: k,
                    },
                    (x = t.visualBlock ? "block" : S ? "line" : "char")
                  )),
                  S)
                ) {
                  var T = $.ranges;
                  if ("block" == x)
                    for (var A = 0; A < T.length; A++)
                      T[A].head.ch = Y(e, T[A].head.line);
                  else "line" == x && (T[0].head = $t(T[0].head.line + 1, 0));
                }
              } else {
                if (((C = q(o || m)), K((k = q(n || f)), C))) {
                  var M = C;
                  (C = k), (k = M);
                }
                (S = s.linewise || c.linewise)
                  ? ue(e, C, k)
                  : s.forward && ce(e, C, k),
                  ($ = ae(
                    e,
                    {
                      anchor: C,
                      head: k,
                    },
                    (x = "char"),
                    !s.inclusive || S
                  ));
              }
              e.setSelections($.ranges, $.primary),
                (t.lastMotion = null),
                (c.repeat = i),
                (c.registerName = u),
                (c.linewise = S);
              var O = Vt[l](e, c, $.ranges, m, n);
              t.visualMode && le(e, null != O), O && e.setCursor(O);
            }
          },
          recordLastEdit: function (e, t, n) {
            var o = Ft.macroModeState;
            o.isPlaying ||
              ((e.lastEditInputState = t),
              (e.lastEditActionCommand = n),
              (o.lastInsertModeChanges.changes = []),
              (o.lastInsertModeChanges.expectCursorActivityForChange = !1));
          },
        },
        Wt = {
          moveToTopLine: function (e, t, n) {
            var o = We(e).top + n.repeat - 1;
            return $t(o, de(e.getLine(o)));
          },
          moveToMiddleLine: function (e) {
            var t = We(e),
              n = Math.floor(0.5 * (t.top + t.bottom));
            return $t(n, de(e.getLine(n)));
          },
          moveToBottomLine: function (e, t, n) {
            var o = We(e).bottom - n.repeat + 1;
            return $t(o, de(e.getLine(o)));
          },
          expandToLine: function (e, t, n) {
            return $t(t.line + n.repeat - 1, 1 / 0);
          },
          findNext: function (e, t, n) {
            var o = Ee(e),
              i = o.getQuery();
            if (i) {
              var r = !n.forward;
              return (
                (r = o.isReversed() ? !r : r), Ue(e, i), qe(e, r, i, n.repeat)
              );
            }
          },
          goToMark: function (e, t, n, o) {
            var i = o.marks[n.selectedCharacter];
            if (i) {
              var r = i.find();
              return n.linewise
                ? {
                    line: r.line,
                    ch: de(e.getLine(r.line)),
                  }
                : r;
            }
            return null;
          },
          moveToOtherHighlightedEnd: function (e, t, n, o) {
            if (o.visualBlock && n.sameLine) {
              var i = o.sel;
              return [
                L(e, $t(i.anchor.line, i.head.ch)),
                L(e, $t(i.head.line, i.anchor.ch)),
              ];
            }
            return [o.sel.head, o.sel.anchor];
          },
          jumpToMark: function (e, t, n, o) {
            for (var i = t, r = 0; r < n.repeat; r++) {
              var a = i;
              for (var s in o.marks)
                if (p(s)) {
                  var l = o.marks[s].find();
                  if (
                    !(
                      (n.forward ? K(l, a) : K(a, l)) ||
                      (n.linewise && l.line == a.line)
                    )
                  ) {
                    var c = z(a, i),
                      u = n.forward ? G(a, l, i) : G(i, l, a);
                    (c || u) && (i = l);
                  }
                }
            }
            return n.linewise && (i = $t(i.line, de(e.getLine(i.line)))), i;
          },
          moveByCharacters: function (e, t, n) {
            var o = t,
              i = n.repeat,
              r = n.forward ? o.ch + i : o.ch - i;
            return $t(o.line, r);
          },
          moveByLines: function (e, t, n, o) {
            var i = t,
              r = i.ch;
            switch (o.lastMotion) {
              case this.moveByLines:
              case this.moveByDisplayLines:
              case this.moveByScroll:
              case this.moveToColumn:
              case this.moveToEol:
                r = o.lastHPos;
                break;
              default:
                o.lastHPos = r;
            }
            var a = n.repeat + (n.repeatOffset || 0),
              s = n.forward ? i.line + a : i.line - a,
              l = e.firstLine(),
              c = e.lastLine();
            if (!((s < l && i.line == l) || (s > c && i.line == c))) {
              var u = e.ace.session.getFoldLine(s);
              return (
                u &&
                  (n.forward
                    ? s > u.start.row && (s = u.end.row + 1)
                    : (s = u.start.row)),
                n.toFirstChar && ((r = de(e.getLine(s))), (o.lastHPos = r)),
                (o.lastHSPos = e.charCoords($t(s, r), "div").left),
                $t(s, r)
              );
            }
          },
          moveByDisplayLines: function (e, t, n, o) {
            var i = t;
            switch (o.lastMotion) {
              case this.moveByDisplayLines:
              case this.moveByScroll:
              case this.moveByLines:
              case this.moveToColumn:
              case this.moveToEol:
                break;
              default:
                o.lastHSPos = e.charCoords(i, "div").left;
            }
            var r = n.repeat;
            if (
              (s = e.findPosV(i, n.forward ? r : -r, "line", o.lastHSPos))
                .hitSide
            )
              if (n.forward)
                var a = {
                    top: e.charCoords(s, "div").top + 8,
                    left: o.lastHSPos,
                  },
                  s = e.coordsChar(a, "div");
              else {
                var l = e.charCoords($t(e.firstLine(), 0), "div");
                (l.left = o.lastHSPos), (s = e.coordsChar(l, "div"));
              }
            return (o.lastHPos = s.ch), s;
          },
          moveByPage: function (e, t, n) {
            var o = t,
              i = n.repeat;
            return e.findPosV(o, n.forward ? i : -i, "page");
          },
          moveByParagraph: function (e, t, n) {
            var o = n.forward ? 1 : -1;
            return Ce(e, t, n.repeat, o);
          },
          moveByScroll: function (e, t, n, o) {
            var i = e.getScrollInfo(),
              r = null,
              a = n.repeat;
            a || (a = i.clientHeight / (2 * e.defaultTextHeight()));
            var s = e.charCoords(t, "local");
            if (((n.repeat = a), !(r = Wt.moveByDisplayLines(e, t, n, o))))
              return null;
            var l = e.charCoords(r, "local");
            return e.scrollTo(null, i.top + l.top - s.top), r;
          },
          moveByWords: function (e, t, n) {
            return ve(e, t, n.repeat, !!n.forward, !!n.wordEnd, !!n.bigWord);
          },
          moveTillCharacter: function (e, t, n) {
            var o = be(e, n.repeat, n.forward, n.selectedCharacter),
              i = n.forward ? -1 : 1;
            return fe(i, n), o ? ((o.ch += i), o) : null;
          },
          moveToCharacter: function (e, t, n) {
            var o = n.repeat;
            return fe(0, n), be(e, o, n.forward, n.selectedCharacter) || t;
          },
          moveToSymbol: function (e, t, n) {
            return me(e, n.repeat, n.forward, n.selectedCharacter) || t;
          },
          moveToColumn: function (e, t, n, o) {
            var i = n.repeat;
            return (
              (o.lastHPos = i - 1),
              (o.lastHSPos = e.charCoords(t, "div").left),
              ye(e, i)
            );
          },
          moveToEol: function (e, t, n, o) {
            var i = t;
            o.lastHPos = 1 / 0;
            var r = $t(i.line + n.repeat - 1, 1 / 0),
              a = e.clipPos(r);
            return a.ch--, (o.lastHSPos = e.charCoords(a, "div").left), r;
          },
          moveToFirstNonWhiteSpaceCharacter: function (e, t) {
            var n = t;
            return $t(n.line, de(e.getLine(n.line)));
          },
          moveToMatchedSymbol: function (e, t) {
            var n,
              o = t,
              i = o.line,
              r = o.ch,
              a = e.getLine(i);
            do {
              if ((n = a.charAt(r++)) && f(n)) {
                var s = e.getTokenTypeAt($t(i, r));
                if ("string" !== s && "comment" !== s) break;
              }
            } while (n);
            return n ? e.findMatchingBracket($t(i, r)).to : o;
          },
          moveToStartOfLine: function (e, t) {
            return $t(t.line, 0);
          },
          moveToLineOrEdgeOfDocument: function (e, t, n) {
            var o = n.forward ? e.lastLine() : e.firstLine();
            return (
              n.repeatIsExplicit &&
                (o = n.repeat - e.getOption("firstLineNumber")),
              $t(o, de(e.getLine(o)))
            );
          },
          textObjectManipulation: function (e, t, n, o) {
            var i = {
                "(": ")",
                ")": "(",
                "{": "}",
                "}": "{",
                "[": "]",
                "]": "[",
              },
              r = {
                "'": !0,
                '"': !0,
              },
              a = n.selectedCharacter;
            "b" == a ? (a = "(") : "B" == a && (a = "{");
            var s,
              l = !n.textObjectInner;
            if (i[a]) s = ke(e, t, a, l);
            else if (r[a]) s = Se(e, t, a, l);
            else if ("W" === a) s = he(e, l, !0, !0);
            else if ("w" === a) s = he(e, l, !0, !1);
            else {
              if ("p" !== a) return null;
              if (
                ((s = Ce(e, t, n.repeat, 0, l)),
                (n.linewise = !0),
                o.visualMode)
              )
                o.visualLine || (o.visualLine = !0);
              else {
                var c = o.inputState.operatorArgs;
                c && (c.linewise = !0), s.end.line--;
              }
            }
            return e.state.vim.visualMode
              ? ie(e, s.start, s.end)
              : [s.start, s.end];
          },
          repeatLastCharacterSearch: function (e, t, n) {
            var o = Ft.lastChararacterSearch,
              i = n.repeat,
              r = n.forward === o.forward,
              a = (o.increment ? 1 : 0) * (r ? -1 : 1);
            e.moveH(-a, "char"), (n.inclusive = !!r);
            var s = be(e, i, r, o.selectedCharacter);
            return s ? ((s.ch += a), s) : (e.moveH(a, "char"), t);
          },
        },
        Vt = {
          change: function (e, t, n) {
            var o,
              i,
              r = e.state.vim;
            if (
              ((Ft.macroModeState.lastInsertModeChanges.inVisualBlock =
                r.visualBlock),
              r.visualMode)
            ) {
              i = e.getSelection();
              var a = I("", n.length);
              e.replaceSelections(a), (o = W(n[0].head, n[0].anchor));
            } else {
              var s = n[0].anchor,
                l = n[0].head;
              i = e.getRange(s, l);
              var c = r.lastEditInputState || {};
              if ("moveByWords" == c.motion && !v(i)) {
                var u = /\s+$/.exec(i);
                u &&
                  c.motionArgs &&
                  c.motionArgs.forward &&
                  ((l = N(l, 0, -u[0].length)), (i = i.slice(0, -u[0].length)));
              }
              var d = new $t(s.line - 1, Number.MAX_VALUE),
                h = e.firstLine() == e.lastLine();
              l.line > e.lastLine() && t.linewise && !h
                ? e.replaceRange("", d, l)
                : e.replaceRange("", s, l),
                t.linewise &&
                  (h || (e.setCursor(d), St.commands.newlineAndIndent(e)),
                  (s.ch = Number.MAX_VALUE)),
                (o = s);
            }
            Ft.registerController.pushText(
              t.registerName,
              "change",
              i,
              t.linewise,
              n.length > 1
            ),
              Gt.enterInsertMode(
                e,
                {
                  head: o,
                },
                e.state.vim
              );
          },
          delete: function (e, t, n) {
            var o,
              i,
              r = e.state.vim;
            if (r.visualBlock) {
              i = e.getSelection();
              var a = I("", n.length);
              e.replaceSelections(a), (o = n[0].anchor);
            } else {
              var s = n[0].anchor,
                l = n[0].head;
              t.linewise &&
                l.line != e.firstLine() &&
                s.line == e.lastLine() &&
                s.line == l.line - 1 &&
                (s.line == e.firstLine()
                  ? (s.ch = 0)
                  : (s = $t(s.line - 1, Y(e, s.line - 1)))),
                (i = e.getRange(s, l)),
                e.replaceRange("", s, l),
                (o = s),
                t.linewise && (o = Wt.moveToFirstNonWhiteSpaceCharacter(e, s));
            }
            return (
              Ft.registerController.pushText(
                t.registerName,
                "delete",
                i,
                t.linewise,
                r.visualBlock
              ),
              L(e, o)
            );
          },
          indent: function (e, t, n) {
            var o = e.state.vim,
              i = n[0].anchor.line,
              r = o.visualBlock ? n[n.length - 1].anchor.line : n[0].head.line,
              a = o.visualMode ? t.repeat : 1;
            t.linewise && r--;
            for (var s = i; s <= r; s++)
              for (var l = 0; l < a; l++) e.indentLine(s, t.indentRight);
            return Wt.moveToFirstNonWhiteSpaceCharacter(e, n[0].anchor);
          },
          changeCase: function (e, t, n, o, i) {
            for (
              var r = e.getSelections(), a = [], s = t.toLower, l = 0;
              l < r.length;
              l++
            ) {
              var c = r[l],
                u = "";
              if (!0 === s) u = c.toLowerCase();
              else if (!1 === s) u = c.toUpperCase();
              else
                for (var d = 0; d < c.length; d++) {
                  var h = c.charAt(d);
                  u += g(h) ? h.toLowerCase() : h.toUpperCase();
                }
              a.push(u);
            }
            return (
              e.replaceSelections(a),
              t.shouldMoveCursor
                ? i
                : !e.state.vim.visualMode &&
                  t.linewise &&
                  n[0].anchor.line + 1 == n[0].head.line
                ? Wt.moveToFirstNonWhiteSpaceCharacter(e, o)
                : t.linewise
                ? o
                : W(n[0].anchor, n[0].head)
            );
          },
          yank: function (e, t, n, o) {
            var i = e.state.vim,
              r = e.getSelection(),
              a = i.visualMode
                ? W(i.sel.anchor, i.sel.head, n[0].head, n[0].anchor)
                : o;
            return (
              Ft.registerController.pushText(
                t.registerName,
                "yank",
                r,
                t.linewise,
                i.visualBlock
              ),
              a
            );
          },
        },
        Gt = {
          jumpListWalk: function (e, t, n) {
            if (!n.visualMode) {
              var o = t.repeat,
                i = t.forward,
                r = Ft.jumpList.move(e, i ? o : -o),
                a = r ? r.find() : void 0;
              (a = a || e.getCursor()),
                e.setCursor(a),
                (e.ace.curOp.command.scrollIntoView = "center-animate");
            }
          },
          scroll: function (e, t, n) {
            if (!n.visualMode) {
              var o = t.repeat || 1,
                i = e.defaultTextHeight(),
                r = e.getScrollInfo().top,
                a = i * o,
                s = t.forward ? r + a : r - a,
                l = q(e.getCursor()),
                c = e.charCoords(l, "local");
              if (t.forward)
                s > c.top
                  ? ((l.line += (s - c.top) / i),
                    (l.line = Math.ceil(l.line)),
                    e.setCursor(l),
                    (c = e.charCoords(l, "local")),
                    e.scrollTo(null, c.top))
                  : e.scrollTo(null, s);
              else {
                var u = s + e.getScrollInfo().clientHeight;
                u < c.bottom
                  ? ((l.line -= (c.bottom - u) / i),
                    (l.line = Math.floor(l.line)),
                    e.setCursor(l),
                    (c = e.charCoords(l, "local")),
                    e.scrollTo(null, c.bottom - e.getScrollInfo().clientHeight))
                  : e.scrollTo(null, s);
              }
            }
          },
          scrollToCursor: function (e, t) {
            var n = e.getCursor().line,
              o = e.charCoords($t(n, 0), "local"),
              i = e.getScrollInfo().clientHeight,
              r = o.top,
              a = o.bottom - r;
            switch (t.position) {
              case "center":
                r = r - i / 2 + a;
                break;
              case "bottom":
                r = r - i + 1.4 * a;
                break;
              case "top":
                r += 0.4 * a;
            }
            e.scrollTo(null, r);
          },
          replayMacro: function (e, t, n) {
            var o = t.selectedCharacter,
              i = t.repeat,
              r = Ft.macroModeState;
            for ("@" == o && (o = r.latestRegister); i--; ) Je(e, n, r, o);
          },
          enterMacroRecordMode: function (e, t) {
            var n = Ft.macroModeState,
              o = t.selectedCharacter;
            n.enterMacroRecordMode(e, o);
          },
          enterInsertMode: function (e, t, n) {
            if (!e.getOption("readOnly")) {
              (n.insertMode = !0), (n.insertModeRepeat = (t && t.repeat) || 1);
              var o = t ? t.insertAt : null,
                i = n.sel,
                r = t.head || e.getCursor("head"),
                a = e.listSelections().length;
              if ("eol" == o) r = $t(r.line, Y(e, r.line));
              else if ("charAfter" == o) r = N(r, 0, 1);
              else if ("firstNonBlank" == o)
                r = Wt.moveToFirstNonWhiteSpaceCharacter(e, r);
              else if ("startOfSelectedArea" == o)
                n.visualBlock
                  ? ((r = $t(
                      Math.min(i.head.line, i.anchor.line),
                      Math.min(i.head.ch, i.anchor.ch)
                    )),
                    (a = Math.abs(i.head.line - i.anchor.line) + 1))
                  : (r =
                      i.head.line < i.anchor.line
                        ? i.head
                        : $t(i.anchor.line, 0));
              else if ("endOfSelectedArea" == o)
                n.visualBlock
                  ? ((r = $t(
                      Math.min(i.head.line, i.anchor.line),
                      Math.max(i.head.ch + 1, i.anchor.ch)
                    )),
                    (a = Math.abs(i.head.line - i.anchor.line) + 1))
                  : (r =
                      i.head.line >= i.anchor.line
                        ? N(i.head, 0, 1)
                        : $t(i.anchor.line, 0));
              else if ("inplace" == o && n.visualMode) return;
              e.setOption("keyMap", "vim-insert"),
                e.setOption("disableInput", !1),
                t && t.replace
                  ? (e.toggleOverwrite(!0),
                    e.setOption("keyMap", "vim-replace"),
                    St.signal(e, "vim-mode-change", {
                      mode: "replace",
                    }))
                  : (e.setOption("keyMap", "vim-insert"),
                    St.signal(e, "vim-mode-change", {
                      mode: "insert",
                    })),
                Ft.macroModeState.isPlaying ||
                  (e.on("change", tt), St.on(e.getInputField(), "keydown", at)),
                n.visualMode && le(e),
                ee(e, r, a);
            }
          },
          toggleVisualMode: function (e, t, n) {
            var o,
              i = t.repeat,
              r = e.getCursor();
            n.visualMode
              ? n.visualLine ^ t.linewise || n.visualBlock ^ t.blockwise
                ? ((n.visualLine = !!t.linewise),
                  (n.visualBlock = !!t.blockwise),
                  St.signal(e, "vim-mode-change", {
                    mode: "visual",
                    subMode: n.visualLine
                      ? "linewise"
                      : n.visualBlock
                      ? "blockwise"
                      : "",
                  }),
                  re(e))
                : le(e)
              : ((n.visualMode = !0),
                (n.visualLine = !!t.linewise),
                (n.visualBlock = !!t.blockwise),
                (o = L(e, $t(r.line, r.ch + i - 1), !0)),
                (n.sel = {
                  anchor: r,
                  head: o,
                }),
                St.signal(e, "vim-mode-change", {
                  mode: "visual",
                  subMode: n.visualLine
                    ? "linewise"
                    : n.visualBlock
                    ? "blockwise"
                    : "",
                }),
                re(e),
                we(e, n, "<", W(r, o)),
                we(e, n, ">", V(r, o)));
          },
          reselectLastSelection: function (e, t, n) {
            var o = n.lastSelection;
            if ((n.visualMode && oe(e, n), o)) {
              var i = o.anchorMark.find(),
                r = o.headMark.find();
              if (!i || !r) return;
              (n.sel = {
                anchor: i,
                head: r,
              }),
                (n.visualMode = !0),
                (n.visualLine = o.visualLine),
                (n.visualBlock = o.visualBlock),
                re(e),
                we(e, n, "<", W(i, r)),
                we(e, n, ">", V(i, r)),
                St.signal(e, "vim-mode-change", {
                  mode: "visual",
                  subMode: n.visualLine
                    ? "linewise"
                    : n.visualBlock
                    ? "blockwise"
                    : "",
                });
            }
          },
          joinLines: function (e, t, n) {
            var o, i;
            if (n.visualMode) {
              if (
                ((o = e.getCursor("anchor")), K((i = e.getCursor("head")), o))
              ) {
                var r = i;
                (i = o), (o = r);
              }
              i.ch = Y(e, i.line) - 1;
            } else {
              var a = Math.max(t.repeat, 2);
              (o = e.getCursor()), (i = L(e, $t(o.line + a - 1, 1 / 0)));
            }
            for (var s = 0, l = o.line; l < i.line; l++) {
              s = Y(e, o.line);
              r = $t(o.line + 1, Y(e, o.line + 1));
              var c = e.getRange(o, r);
              (c = c.replace(/\n\s*/g, " ")), e.replaceRange(c, o, r);
            }
            var u = $t(o.line, s);
            n.visualMode && le(e, !1), e.setCursor(u);
          },
          newLineAndEnterInsertMode: function (e, t, n) {
            n.insertMode = !0;
            var o = q(e.getCursor());
            o.line !== e.firstLine() || t.after
              ? ((o.line = t.after ? o.line : o.line - 1),
                (o.ch = Y(e, o.line)),
                e.setCursor(o),
                (
                  St.commands.newlineAndIndentContinueComment ||
                  St.commands.newlineAndIndent
                )(e))
              : (e.replaceRange("\n", $t(e.firstLine(), 0)),
                e.setCursor(e.firstLine(), 0));
            this.enterInsertMode(
              e,
              {
                repeat: t.repeat,
              },
              n
            );
          },
          paste: function (e, t, n) {
            var o = q(e.getCursor()),
              i = Ft.registerController.getRegister(t.registerName);
            if ((h = i.toString())) {
              if (t.matchIndent) {
                var r = e.getOption("tabSize"),
                  a = function (e) {
                    var t = e.split("\t").length - 1,
                      n = e.split(" ").length - 1;
                    return t * r + 1 * n;
                  },
                  s = e.getLine(e.getCursor().line),
                  l = a(s.match(/^\s*/)[0]),
                  c = h.replace(/\n$/, ""),
                  u = h !== c,
                  d = a(h.match(/^\s*/)[0]),
                  h = c.replace(/^\s*/gm, function (t) {
                    var n = l + (a(t) - d);
                    if (n < 0) return "";
                    if (e.getOption("indentWithTabs")) {
                      var o = Math.floor(n / r);
                      return Array(o + 1).join("\t");
                    }
                    return Array(n + 1).join(" ");
                  });
                h += u ? "\n" : "";
              }
              if (t.repeat > 1) h = Array(t.repeat + 1).join(h);
              var p,
                f,
                m = i.linewise,
                g = i.blockwise;
              if (m && !g)
                n.visualMode
                  ? (h = n.visualLine
                      ? h.slice(0, -1)
                      : "\n" + h.slice(0, h.length - 1) + "\n")
                  : t.after
                  ? ((h = "\n" + h.slice(0, h.length - 1)),
                    (o.ch = Y(e, o.line)))
                  : (o.ch = 0);
              else {
                if (g) {
                  h = h.split("\n");
                  for (var v = 0; v < h.length; v++)
                    h[v] = "" == h[v] ? " " : h[v];
                }
                o.ch += t.after ? 1 : 0;
              }
              if (n.visualMode) {
                var b;
                n.lastPastedText = h;
                var y = ne(e, n),
                  w = y[0],
                  _ = y[1],
                  C = e.getSelection(),
                  k = e.listSelections(),
                  S = new Array(k.length).join("1").split("1");
                n.lastSelection && (b = n.lastSelection.headMark.find()),
                  Ft.registerController.unnamedRegister.setText(C),
                  g
                    ? (e.replaceSelections(S),
                      (_ = $t(w.line + h.length - 1, w.ch)),
                      e.setCursor(w),
                      Z(e, _),
                      e.replaceSelections(h),
                      (p = w))
                    : n.visualBlock
                    ? (e.replaceSelections(S),
                      e.setCursor(w),
                      e.replaceRange(h, w, w),
                      (p = w))
                    : (e.replaceRange(h, w, _),
                      (p = e.posFromIndex(e.indexFromPos(w) + h.length - 1))),
                  b && (n.lastSelection.headMark = e.setBookmark(b)),
                  m && (p.ch = 0);
              } else if (g) {
                e.setCursor(o);
                for (v = 0; v < h.length; v++) {
                  var x = o.line + v;
                  x > e.lastLine() && e.replaceRange("\n", $t(x, 0)),
                    Y(e, x) < o.ch && X(e, x, o.ch);
                }
                e.setCursor(o),
                  Z(e, $t(o.line + h.length - 1, o.ch)),
                  e.replaceSelections(h),
                  (p = o);
              } else
                e.replaceRange(h, o),
                  m && t.after
                    ? (p = $t(o.line + 1, de(e.getLine(o.line + 1))))
                    : m && !t.after
                    ? (p = $t(o.line, de(e.getLine(o.line))))
                    : !m && t.after
                    ? ((f = e.indexFromPos(o)),
                      (p = e.posFromIndex(f + h.length - 1)))
                    : ((f = e.indexFromPos(o)),
                      (p = e.posFromIndex(f + h.length)));
              n.visualMode && le(e, !1), e.setCursor(p);
            }
          },
          undo: function (e, t) {
            e.operation(function () {
              U(e, St.commands.undo, t.repeat)(),
                e.setCursor(e.getCursor("anchor"));
            });
          },
          redo: function (e, t) {
            U(e, St.commands.redo, t.repeat)();
          },
          setRegister: function (e, t, n) {
            n.inputState.registerName = t.selectedCharacter;
          },
          setMark: function (e, t, n) {
            we(e, n, t.selectedCharacter, e.getCursor());
          },
          replace: function (e, t, n) {
            var o,
              i,
              r = t.selectedCharacter,
              a = e.getCursor(),
              s = e.listSelections();
            if (n.visualMode)
              (a = e.getCursor("start")), (i = e.getCursor("end"));
            else {
              var l = e.getLine(a.line);
              (o = a.ch + t.repeat) > l.length && (o = l.length),
                (i = $t(a.line, o));
            }
            if ("\n" == r)
              n.visualMode || e.replaceRange("", a, i),
                (
                  St.commands.newlineAndIndentContinueComment ||
                  St.commands.newlineAndIndent
                )(e);
            else {
              var c = e.getRange(a, i);
              if (((c = c.replace(/[^\n]/g, r)), n.visualBlock)) {
                var u = new Array(e.getOption("tabSize") + 1).join(" ");
                (c = (c = e.getSelection())
                  .replace(/\t/g, u)
                  .replace(/[^\n]/g, r)
                  .split("\n")),
                  e.replaceSelections(c);
              } else e.replaceRange(c, a, i);
              n.visualMode
                ? ((a = K(s[0].anchor, s[0].head) ? s[0].anchor : s[0].head),
                  e.setCursor(a),
                  le(e, !1))
                : e.setCursor(N(i, 0, -1));
            }
          },
          incrementNumberToken: function (e, t) {
            for (
              var n,
                o,
                i,
                r,
                a,
                s = e.getCursor(),
                l = e.getLine(s.line),
                c = /-?\d+/g;
              null !== (n = c.exec(l)) &&
              ((a = n[0]), (i = (o = n.index) + a.length), !(s.ch < i));

            );
            if ((t.backtrack || !(i <= s.ch)) && a) {
              var u = t.increase ? 1 : -1,
                d = parseInt(a) + u * t.repeat,
                h = $t(s.line, o),
                p = $t(s.line, i);
              (r = d.toString()),
                e.replaceRange(r, h, p),
                e.setCursor($t(s.line, o + r.length - 1));
            }
          },
          repeatLastEdit: function (e, t, n) {
            if (n.lastEditInputState) {
              var o = t.repeat;
              o && t.repeatIsExplicit
                ? (n.lastEditInputState.repeatOverride = o)
                : (o = n.lastEditInputState.repeatOverride || o),
                st(e, n, o, !1);
            }
          },
          exitInsertMode: Ge,
        },
        Yt = {
          "(": "bracket",
          ")": "bracket",
          "{": "bracket",
          "}": "bracket",
          "[": "section",
          "]": "section",
          "*": "comment",
          "/": "comment",
          m: "method",
          M: "method",
          "#": "preprocess",
        },
        Qt = {
          bracket: {
            isComplete: function (e) {
              if (e.nextCh === e.symb) {
                if ((e.depth++, e.depth >= 1)) return !0;
              } else e.nextCh === e.reverseSymb && e.depth--;
              return !1;
            },
          },
          section: {
            init: function (e) {
              (e.curMoveThrough = !0),
                (e.symb = (e.forward ? "]" : "[") === e.symb ? "{" : "}");
            },
            isComplete: function (e) {
              return 0 === e.index && e.nextCh === e.symb;
            },
          },
          comment: {
            isComplete: function (e) {
              var t = "*" === e.lastCh && "/" === e.nextCh;
              return (e.lastCh = e.nextCh), t;
            },
          },
          method: {
            init: function (e) {
              (e.symb = "m" === e.symb ? "{" : "}"),
                (e.reverseSymb = "{" === e.symb ? "}" : "{");
            },
            isComplete: function (e) {
              return e.nextCh === e.symb;
            },
          },
          preprocess: {
            init: function (e) {
              e.index = 0;
            },
            isComplete: function (e) {
              if ("#" === e.nextCh) {
                var t = e.lineText.match(/#(\w+)/)[1];
                if ("endif" === t) {
                  if (e.forward && 0 === e.depth) return !0;
                  e.depth++;
                } else if ("if" === t) {
                  if (!e.forward && 0 === e.depth) return !0;
                  e.depth--;
                }
                if ("else" === t && 0 === e.depth) return !0;
              }
              return !1;
            },
          },
        };
      y("pcre", !0, "boolean"),
        (xe.prototype = {
          getQuery: function () {
            return Ft.query;
          },
          setQuery: function (e) {
            Ft.query = e;
          },
          getOverlay: function () {
            return this.searchOverlay;
          },
          setOverlay: function (e) {
            this.searchOverlay = e;
          },
          isReversed: function () {
            return Ft.isReversed;
          },
          setReversed: function (e) {
            Ft.isReversed = e;
          },
          getScrollbarAnnotate: function () {
            return this.annotate;
          },
          setScrollbarAnnotate: function (e) {
            this.annotate = e;
          },
        });
      var Jt = {
          "\\n": "\n",
          "\\r": "\r",
          "\\t": "\t",
        },
        Xt = {
          "\\/": "/",
          "\\\\": "\\",
          "\\n": "\n",
          "\\r": "\r",
          "\\t": "\t",
        },
        Zt = "(Javascript regexp)",
        en = function () {
          this.buildCommandMap_();
        };
      en.prototype = {
        processCommand: function (e, t, n) {
          var o = this;
          e.operation(function () {
            (e.curOp.isVimOp = !0), o._processCommand(e, t, n);
          });
        },
        _processCommand: function (e, t, n) {
          var o = e.state.vim,
            i = Ft.registerController.getRegister(":"),
            r = i.toString();
          o.visualMode && le(e);
          var a = new St.StringStream(t);
          i.setText(t);
          var s,
            l,
            c = n || {};
          c.input = t;
          try {
            this.parseInput_(e, a, c);
          } catch (t) {
            throw (De(e, t), t);
          }
          if (c.commandName) {
            if ((s = this.matchCommand_(c.commandName))) {
              if (
                ((l = s.name),
                s.excludeFromCommandHistory && i.setText(r),
                this.parseCommandArgs_(a, c, s),
                "exToKey" == s.type)
              ) {
                for (var u = 0; u < s.toKeys.length; u++)
                  St.Vim.handleKey(e, s.toKeys[u], "mapping");
                return;
              }
              if ("exToEx" == s.type)
                return void this.processCommand(e, s.toInput);
            }
          } else void 0 !== c.line && (l = "move");
          if (l)
            try {
              tn[l](e, c),
                (s && s.possiblyAsync) || !c.callback || c.callback();
            } catch (t) {
              throw (De(e, t), t);
            }
          else De(e, 'Not an editor command ":' + t + '"');
        },
        parseInput_: function (e, t, n) {
          t.eatWhile(":"),
            t.eat("%")
              ? ((n.line = e.firstLine()), (n.lineEnd = e.lastLine()))
              : ((n.line = this.parseLineSpec_(e, t)),
                void 0 !== n.line &&
                  t.eat(",") &&
                  (n.lineEnd = this.parseLineSpec_(e, t, n.line)));
          var o = t.match(/^(\w+)/);
          return (n.commandName = o ? o[1] : t.match(/.*/)[0]), n;
        },
        parseLineSpec_: function (e, t, n) {
          var o = t.match(/^(\d+)/);
          if (o) return parseInt(o[1], 10) - 1;
          switch (t.next()) {
            case ".":
              return e.getCursor().line;
            case "$":
              return e.lastLine();
            case "'":
              var i = e.state.vim.marks[t.next()];
              if (i && i.find()) return i.find().line;
              throw new Error("Mark not set");
            case "+":
              if (n) {
                var r = t.match(/^\d+/);
                if (r) return n + parseInt(r[0], 10);
              }
              throw new Error("Require prevLine");
            default:
              return void t.backUp(1);
          }
        },
        parseCommandArgs_: function (e, t, n) {
          if (!e.eol()) {
            t.argString = e.match(/.*/)[0];
            var o = n.argDelimiter || /\s+/,
              i = Q(t.argString).split(o);
            i.length && i[0] && (t.args = i);
          }
        },
        matchCommand_: function (e) {
          for (var t = e.length; t > 0; t--) {
            var n = e.substring(0, t);
            if (this.commandMap_[n]) {
              var o = this.commandMap_[n];
              if (0 === o.name.indexOf(e)) return o;
            }
          }
          return null;
        },
        buildCommandMap_: function () {
          this.commandMap_ = {};
          for (var e = 0; e < Et.length; e++) {
            var t = Et[e],
              n = t.shortName || t.name;
            this.commandMap_[n] = t;
          }
        },
        map: function (e, t, n) {
          if (":" != e && ":" == e.charAt(0)) {
            if (n) throw Error("Mode not supported for ex mappings");
            var o = e.substring(1);
            ":" != t && ":" == t.charAt(0)
              ? (this.commandMap_[o] = {
                  name: o,
                  type: "exToEx",
                  toInput: t.substring(1),
                  user: !0,
                })
              : (this.commandMap_[o] = {
                  name: o,
                  type: "exToKey",
                  toKeys: t,
                  user: !0,
                });
          } else if (":" != t && ":" == t.charAt(0)) {
            var i = {
              keys: e,
              type: "keyToEx",
              exArgs: {
                input: t.substring(1),
              },
              user: !0,
            };
            n && (i.context = n), xt.unshift(i);
          } else {
            i = {
              keys: e,
              type: "keyToKey",
              toKeys: t,
              user: !0,
            };
            n && (i.context = n), xt.unshift(i);
          }
        },
        unmap: function (e, t) {
          if (":" != e && ":" == e.charAt(0)) {
            if (t) throw Error("Mode not supported for ex mappings");
            var n = e.substring(1);
            if (this.commandMap_[n] && this.commandMap_[n].user)
              return void delete this.commandMap_[n];
          } else
            for (var o = e, i = 0; i < xt.length; i++)
              if (o == xt[i].keys && xt[i].context === t && xt[i].user)
                return void xt.splice(i, 1);
        },
      };
      var tn = {
          colorscheme: function (e, t) {
            !t.args || t.args.length < 1
              ? De(e, e.getOption("theme"))
              : e.setOption("theme", t.args[0]);
          },
          map: function (e, t, n) {
            var o = t.args;
            !o || o.length < 2
              ? e && De(e, "Invalid mapping: " + t.input)
              : nn.map(o[0], o[1], n);
          },
          imap: function (e, t) {
            this.map(e, t, "insert");
          },
          nmap: function (e, t) {
            this.map(e, t, "normal");
          },
          vmap: function (e, t) {
            this.map(e, t, "visual");
          },
          unmap: function (e, t, n) {
            var o = t.args;
            !o || o.length < 1
              ? e && De(e, "No such mapping: " + t.input)
              : nn.unmap(o[0], n);
          },
          move: function (e, t) {
            Kt.processCommand(e, e.state.vim, {
              type: "motion",
              motion: "moveToLineOrEdgeOfDocument",
              motionArgs: {
                forward: !1,
                explicitRepeat: !0,
                linewise: !0,
              },
              repeatOverride: t.line + 1,
            });
          },
          set: function (e, t) {
            var n = t.args,
              o = t.setCfg || {};
            if (!n || n.length < 1) e && De(e, "Invalid mapping: " + t.input);
            else {
              var i = n[0].split("="),
                r = i[0],
                a = i[1],
                s = !1;
              if ("?" == r.charAt(r.length - 1)) {
                if (a) throw Error("Trailing characters: " + t.argString);
                (r = r.substring(0, r.length - 1)), (s = !0);
              }
              void 0 === a &&
                "no" == r.substring(0, 2) &&
                ((r = r.substring(2)), (a = !1));
              var l = Bt[r] && "boolean" == Bt[r].type;
              if ((l && null == a && (a = !0), (!l && void 0 === a) || s)) {
                var c = _(r, e, o);
                De(
                  e,
                  !0 === c || !1 === c
                    ? " " + (c ? "" : "no") + r
                    : "  " + r + "=" + c
                );
              } else w(r, a, e, o);
            }
          },
          setlocal: function (e, t) {
            (t.setCfg = {
              scope: "local",
            }),
              this.set(e, t);
          },
          setglobal: function (e, t) {
            (t.setCfg = {
              scope: "global",
            }),
              this.set(e, t);
          },
          registers: function (e, t) {
            var n = t.args,
              o = Ft.registerController.registers,
              i = "----------Registers----------<br><br>";
            if (n) {
              n = n.join("");
              for (var r = 0; r < n.length; r++) {
                if (
                  ((a = n.charAt(r)), Ft.registerController.isValidRegister(a))
                )
                  i += '"' + a + "    " + (o[a] || new $()).toString() + "<br>";
              }
            } else
              for (var a in o) {
                var s = o[a].toString();
                s.length && (i += '"' + a + "    " + s + "<br>");
              }
            De(e, i);
          },
          sort: function (e, t) {
            function n() {
              if (t.argString) {
                var e = new St.StringStream(t.argString);
                if ((e.eat("!") && (i = !0), e.eol())) return;
                if (!e.eatSpace()) return "Invalid arguments";
                var n = e.match(/[a-z]+/);
                if (n) {
                  (n = n[0]),
                    (r = -1 != n.indexOf("i")),
                    (a = -1 != n.indexOf("u"));
                  var o = -1 != n.indexOf("d") && 1,
                    l = -1 != n.indexOf("x") && 1,
                    c = -1 != n.indexOf("o") && 1;
                  if (o + l + c > 1) return "Invalid arguments";
                  s = (o ? "decimal" : l && "hex") || (c && "octal");
                }
                if (e.match(/\/.*\//)) return "patterns not supported";
              }
            }
            function o(e, t) {
              var n;
              i && ((n = e), (e = t), (t = n));
              r && ((e = e.toLowerCase()), (t = t.toLowerCase()));
              var o = s && f.exec(e),
                a = s && f.exec(t);
              return o
                ? (o = parseInt((o[1] + o[2]).toLowerCase(), m)) -
                    (a = parseInt((a[1] + a[2]).toLowerCase(), m))
                : e < t
                ? -1
                : 1;
            }
            var i,
              r,
              a,
              s,
              l = n();
            if (l) De(e, l + ": " + t.argString);
            else {
              var c = t.line || e.firstLine(),
                u = t.lineEnd || t.line || e.lastLine();
              if (c != u) {
                var d = $t(c, 0),
                  h = $t(u, Y(e, u)),
                  p = e.getRange(d, h).split("\n"),
                  f =
                    "decimal" == s
                      ? /(-?)([\d]+)/
                      : "hex" == s
                      ? /(-?)(?:0x)?([0-9a-f]+)/i
                      : "octal" == s
                      ? /([0-7]+)/
                      : null,
                  m =
                    "decimal" == s
                      ? 10
                      : "hex" == s
                      ? 16
                      : "octal" == s
                      ? 8
                      : null,
                  g = [],
                  v = [];
                if (s)
                  for (var b = 0; b < p.length; b++)
                    f.exec(p[b]) ? g.push(p[b]) : v.push(p[b]);
                else v = p;
                if (
                  (g.sort(o), v.sort(o), (p = i ? g.concat(v) : v.concat(g)), a)
                ) {
                  var y,
                    w = p;
                  p = [];
                  for (b = 0; b < w.length; b++)
                    w[b] != y && p.push(w[b]), (y = w[b]);
                }
                e.replaceRange(p.join("\n"), d, h);
              }
            }
          },
          global: function (e, t) {
            var n = t.argString;
            if (n) {
              var o,
                i = void 0 !== t.line ? t.line : e.firstLine(),
                r = t.lineEnd || t.line || e.lastLine(),
                a = Te(n),
                s = n;
              if (
                (a.length && ((s = a[0]), (o = a.slice(1, a.length).join("/"))),
                s)
              )
                try {
                  Fe(e, s, !0, !0);
                } catch (t) {
                  return void De(e, "Invalid regex: " + s);
                }
              for (
                var l = Ee(e).getQuery(), c = [], u = "", d = i;
                d <= r;
                d++
              ) {
                l.test(e.getLine(d)) &&
                  (c.push(d + 1), (u += e.getLine(d) + "<br>"));
              }
              if (o) {
                var h = 0,
                  p = function () {
                    if (h < c.length) {
                      var t = c[h] + o;
                      nn.processCommand(e, t, {
                        callback: p,
                      });
                    }
                    h++;
                  };
                p();
              } else De(e, u);
            } else De(e, "Regular Expression missing from global");
          },
          substitute: function (e, t) {
            if (!e.getSearchCursor)
              throw new Error(
                "Search feature not available. Requires searchcursor.js or any other getSearchCursor implementation."
              );
            var n,
              o,
              i,
              r,
              a = t.argString,
              s = a ? Me(a, a[0]) : [],
              l = "",
              c = !1,
              u = !1;
            if (s.length)
              (n = s[0]),
                void 0 !== (l = s[1]) &&
                  ((l = _("pcre") ? Pe(l) : Re(l)),
                  (Ft.lastSubstituteReplacePart = l)),
                (o = s[2] ? s[2].split(" ") : []);
            else if (a && a.length)
              return void De(
                e,
                "Substitutions should be of the form :s/pattern/replace/"
              );
            if (
              (o &&
                ((i = o[0]),
                (r = parseInt(o[1])),
                i &&
                  (-1 != i.indexOf("c") && ((c = !0), i.replace("c", "")),
                  -1 != i.indexOf("g") && ((u = !0), i.replace("g", "")),
                  (n = n + "/" + i))),
              n)
            )
              try {
                Fe(e, n, !0, !0);
              } catch (t) {
                return void De(e, "Invalid regex: " + n);
              }
            if (void 0 !== (l = l || Ft.lastSubstituteReplacePart)) {
              var d = Ee(e).getQuery(),
                h = void 0 !== t.line ? t.line : e.getCursor().line,
                p = t.lineEnd || h;
              h == e.firstLine() && p == e.lastLine() && (p = 1 / 0),
                r && (p = (h = p) + r - 1);
              var f = L(e, $t(h, 0)),
                m = e.getSearchCursor(d, f);
              Ve(e, c, u, h, p, m, d, l, t.callback);
            } else De(e, "No previous substitute regular expression");
          },
          redo: St.commands.redo,
          undo: St.commands.undo,
          write: function (e) {
            St.commands.save ? St.commands.save(e) : e.save();
          },
          nohlsearch: function (e) {
            ze(e);
          },
          delmarks: function (e, t) {
            if (t.argString && Q(t.argString))
              for (
                var n = e.state.vim, o = new St.StringStream(Q(t.argString));
                !o.eol();

              ) {
                o.eatSpace();
                var i = o.pos;
                if (!o.match(/[a-zA-Z]/, !1))
                  return void De(
                    e,
                    "Invalid argument: " + t.argString.substring(i)
                  );
                var r = o.next();
                if (o.match("-", !0)) {
                  if (!o.match(/[a-zA-Z]/, !1))
                    return void De(
                      e,
                      "Invalid argument: " + t.argString.substring(i)
                    );
                  var a = r,
                    s = o.next();
                  if (!((p(a) && p(s)) || (g(a) && g(s))))
                    return void De(e, "Invalid argument: " + a + "-");
                  var l = a.charCodeAt(0),
                    c = s.charCodeAt(0);
                  if (l >= c)
                    return void De(
                      e,
                      "Invalid argument: " + t.argString.substring(i)
                    );
                  for (var u = 0; u <= c - l; u++) {
                    var d = String.fromCharCode(l + u);
                    delete n.marks[d];
                  }
                } else delete n.marks[r];
              }
            else De(e, "Argument required");
          },
        },
        nn = new en();
      (St.keyMap.vim = {
        attach: s,
        detach: a,
        call: l,
      }),
        y("insertModeEscKeysTimeout", 200, "number"),
        (St.keyMap["vim-insert"] = {
          "Ctrl-N": "autocomplete",
          "Ctrl-P": "autocomplete",
          Enter: function (e) {
            (
              St.commands.newlineAndIndentContinueComment ||
              St.commands.newlineAndIndent
            )(e);
          },
          fallthrough: ["default"],
          attach: s,
          detach: a,
          call: l,
        }),
        (St.keyMap["vim-replace"] = {
          Backspace: "goCharLeft",
          fallthrough: ["vim-insert"],
          attach: s,
          detach: a,
          call: l,
        }),
        S(),
        (St.Vim = Tt()),
        (Tt = St.Vim);
      var on = {
          return: "CR",
          backspace: "BS",
          delete: "Del",
          esc: "Esc",
          left: "Left",
          right: "Right",
          up: "Up",
          down: "Down",
          space: "Space",
          home: "Home",
          end: "End",
          pageup: "PageUp",
          pagedown: "PageDown",
          enter: "CR",
        },
        rn = Tt.handleKey.bind(Tt);
      (Tt.handleKey = function (e, t, n) {
        return e.operation(function () {
          return rn(e, t, n);
        }, !0);
      }),
        (t.CodeMirror = St);
      var an = Tt.maybeInitVimState_;
      t.handler = {
        $id: "ace/keyboard/vim",
        drawCursor: function (e, t, n, o, i) {
          var r = this.state.vim || {},
            a = n.characterWidth,
            s = n.lineHeight,
            l = t.top,
            c = t.left;
          r.insertMode ||
            (!(o.cursor
              ? pt.comparePoints(o.cursor, o.start) <= 0
              : i.selection.isBackwards() || i.selection.isEmpty()) &&
              c > a &&
              (c -= a));
          !r.insertMode && r.status && (l += s /= 2),
            (e.left = c + "px"),
            (e.top = l + "px"),
            (e.width = a + "px"),
            (e.height = s + "px");
        },
        handleKeyboard: function (e, t, n, o, i) {
          var r = e.editor,
            a = r.state.cm,
            s = an(a);
          if (-1 != o) {
            if (
              (s.insertMode ||
                (-1 == t
                  ? (n.charCodeAt(0) > 255 &&
                      e.inputKey &&
                      (n = e.inputKey) &&
                      4 == e.inputHash &&
                      (n = n.toUpperCase()),
                    (e.inputChar = n))
                  : 4 == t || 0 == t
                  ? e.inputKey == n && e.inputHash == t && e.inputChar
                    ? ((n = e.inputChar), (t = -1))
                    : ((e.inputChar = null),
                      (e.inputKey = n),
                      (e.inputHash = t))
                  : (e.inputChar = e.inputKey = null)),
              "c" == n && 1 == t && !wt.isMac && r.getCopyText())
            )
              return (
                r.once("copy", function () {
                  r.selection.clearSelection();
                }),
                {
                  command: "null",
                  passEvent: !0,
                }
              );
            if (-1 == t || 1 & t || (0 === t && n.length > 1)) {
              var l = s.insertMode,
                c = ct(t, n, i || {});
              null == s.status && (s.status = "");
              var u = dt(a, c, "user");
              if (
                ((s = an(a)),
                u && null != s.status
                  ? (s.status += c)
                  : null == s.status && (s.status = ""),
                a._signal("changeStatus"),
                !u && (-1 != t || l))
              )
                return;
              return {
                command: "null",
                passEvent: !u,
              };
            }
          }
        },
        attach: function (e) {
          function t() {
            var t = an(n).insertMode;
            n.ace.renderer.setStyle("normal-mode", !t),
              e.textInput.setCommandMode(!t),
              (e.renderer.$keepTextAreaAtCursor = t);
          }
          e.state || (e.state = {});
          var n = new St(e);
          (e.state.cm = n),
            (e.$vimModeHandler = this),
            St.keyMap.vim.attach(n),
            (an(n).status = null),
            n.on("vim-command-done", function () {
              n.virtualSelectionMode() ||
                ((an(n).status = null),
                n.ace._signal("changeStatus"),
                n.ace.session.markUndoGroup());
            }),
            n.on("changeStatus", function () {
              n.ace.renderer.updateCursor(), n.ace._signal("changeStatus");
            }),
            n.on("vim-mode-change", function () {
              n.virtualSelectionMode() || (t(), n._signal("changeStatus"));
            }),
            t(),
            (e.renderer.$cursorLayer.drawCursor = this.drawCursor.bind(n)),
            this.updateMacCompositionHandlers(e, !0);
        },
        detach: function (e) {
          var t = e.state.cm;
          St.keyMap.vim.detach(t),
            t.destroy(),
            (e.state.cm = null),
            (e.$vimModeHandler = null),
            (e.renderer.$cursorLayer.drawCursor = null),
            e.renderer.setStyle("normal-mode", !1),
            e.textInput.setCommandMode(!1),
            (e.renderer.$keepTextAreaAtCursor = !0),
            this.updateMacCompositionHandlers(e, !1);
        },
        getStatusText: function (e) {
          var t = e.state.cm,
            n = an(t);
          if (n.insertMode) return "INSERT";
          var o = "";
          return (
            n.visualMode &&
              ((o += "VISUAL"),
              n.visualLine && (o += " LINE"),
              n.visualBlock && (o += " BLOCK")),
            n.status && (o += (o ? " " : "") + n.status),
            o
          );
        },
        updateMacCompositionHandlers: function (e, t) {
          var n = function (t) {
              var n = e.state.cm;
              if (an(n).insertMode) this.onCompositionUpdateOrig(t);
              else {
                var o = this.textInput.getElement();
                o.blur(), o.focus(), (o.value = t);
              }
            },
            o = function (t) {
              var n = e.state.cm;
              an(n).insertMode && this.onCompositionStartOrig(t);
            };
          t
            ? e.onCompositionUpdateOrig ||
              ((e.onCompositionUpdateOrig = e.onCompositionUpdate),
              (e.onCompositionUpdate = n),
              (e.onCompositionStartOrig = e.onCompositionStart),
              (e.onCompositionStart = o))
            : e.onCompositionUpdateOrig &&
              ((e.onCompositionUpdate = e.onCompositionUpdateOrig),
              (e.onCompositionUpdateOrig = null),
              (e.onCompositionStart = e.onCompositionStartOrig),
              (e.onCompositionStartOrig = null));
        },
      };
      Tt.defineOption(
        {
          name: "wrap",
          set: function (e, t) {
            t && t.ace.setOption("wrap", e);
          },
          type: "boolean",
        },
        !1
      ),
        Tt.defineEx("write", "w", function () {
          console.log(":write is not implemented");
        }),
        xt.push(
          {
            keys: "zc",
            type: "action",
            action: "fold",
            actionArgs: {
              open: !1,
            },
          },
          {
            keys: "zC",
            type: "action",
            action: "fold",
            actionArgs: {
              open: !1,
              all: !0,
            },
          },
          {
            keys: "zo",
            type: "action",
            action: "fold",
            actionArgs: {
              open: !0,
            },
          },
          {
            keys: "zO",
            type: "action",
            action: "fold",
            actionArgs: {
              open: !0,
              all: !0,
            },
          },
          {
            keys: "za",
            type: "action",
            action: "fold",
            actionArgs: {
              toggle: !0,
            },
          },
          {
            keys: "zA",
            type: "action",
            action: "fold",
            actionArgs: {
              toggle: !0,
              all: !0,
            },
          },
          {
            keys: "zf",
            type: "action",
            action: "fold",
            actionArgs: {
              open: !0,
              all: !0,
            },
          },
          {
            keys: "zd",
            type: "action",
            action: "fold",
            actionArgs: {
              open: !0,
              all: !0,
            },
          },
          {
            keys: "<C-A-k>",
            type: "action",
            action: "aceCommand",
            actionArgs: {
              name: "addCursorAbove",
            },
          },
          {
            keys: "<C-A-j>",
            type: "action",
            action: "aceCommand",
            actionArgs: {
              name: "addCursorBelow",
            },
          },
          {
            keys: "<C-A-S-k>",
            type: "action",
            action: "aceCommand",
            actionArgs: {
              name: "addCursorAboveSkipCurrent",
            },
          },
          {
            keys: "<C-A-S-j>",
            type: "action",
            action: "aceCommand",
            actionArgs: {
              name: "addCursorBelowSkipCurrent",
            },
          },
          {
            keys: "<C-A-h>",
            type: "action",
            action: "aceCommand",
            actionArgs: {
              name: "selectMoreBefore",
            },
          },
          {
            keys: "<C-A-l>",
            type: "action",
            action: "aceCommand",
            actionArgs: {
              name: "selectMoreAfter",
            },
          },
          {
            keys: "<C-A-S-h>",
            type: "action",
            action: "aceCommand",
            actionArgs: {
              name: "selectNextBefore",
            },
          },
          {
            keys: "<C-A-S-l>",
            type: "action",
            action: "aceCommand",
            actionArgs: {
              name: "selectNextAfter",
            },
          }
        ),
        (Gt.aceCommand = function (e, t) {
          (e.vimCmd = t),
            e.ace.inVirtualSelectionMode
              ? e.ace.on("beforeEndOperation", ht)
              : ht(null, e.ace);
        }),
        (Gt.fold = function (e, t) {
          e.ace.execCommand(
            ["toggleFoldWidget", "toggleFoldWidget", "foldOther", "unfoldall"][
              (t.all ? 2 : 0) + (t.open ? 1 : 0)
            ]
          );
        }),
        (t.handler.defaultKeymap = xt),
        (t.handler.actions = Gt),
        (t.Vim = Tt),
        Tt.map("Y", "yy", "normal");
    }
  ),
  define(
    "ace/occur",
    [
      "require",
      "exports",
      "module",
      "ace/lib/oop",
      "ace/range",
      "ace/search",
      "ace/edit_session",
      "ace/search_highlight",
      "ace/lib/dom",
    ],
    function (e, t) {
      "use strict";
      function n() {}
      var o = e("./lib/oop"),
        i = (e("./range").Range, e("./search").Search),
        r = e("./edit_session").EditSession,
        a = e("./search_highlight").SearchHighlight;
      o.inherits(n, i),
        function () {
          (this.enter = function (e, t) {
            if (!t.needle) return !1;
            var n = e.getCursorPosition();
            this.displayOccurContent(e, t);
            var o = this.originalToOccurPosition(e.session, n);
            return e.moveCursorToPosition(o), !0;
          }),
            (this.exit = function (e, t) {
              var n = t.translatePosition && e.getCursorPosition(),
                o = n && this.occurToOriginalPosition(e.session, n);
              return (
                this.displayOriginalContent(e),
                o && e.moveCursorToPosition(o),
                !0
              );
            }),
            (this.highlight = function (e, t) {
              (e.$occurHighlight =
                e.$occurHighlight ||
                e.addDynamicMarker(
                  new a(null, "ace_occur-highlight", "text")
                )).setRegexp(t),
                e._emit("changeBackMarker");
            }),
            (this.displayOccurContent = function (e, t) {
              this.$originalSession = e.session;
              var n = this.matchingLines(e.session, t),
                o = n.map(function (e) {
                  return e.content;
                }),
                i = new r(o.join("\n"));
              (i.$occur = this),
                (i.$occurMatchingLines = n),
                e.setSession(i),
                (this.$useEmacsStyleLineStart =
                  this.$originalSession.$useEmacsStyleLineStart),
                (i.$useEmacsStyleLineStart = this.$useEmacsStyleLineStart),
                this.highlight(i, t.re),
                i._emit("changeBackMarker");
            }),
            (this.displayOriginalContent = function (e) {
              e.setSession(this.$originalSession),
                (this.$originalSession.$useEmacsStyleLineStart =
                  this.$useEmacsStyleLineStart);
            }),
            (this.originalToOccurPosition = function (e, t) {
              var n = e.$occurMatchingLines,
                o = {
                  row: 0,
                  column: 0,
                };
              if (!n) return o;
              for (var i = 0; i < n.length; i++)
                if (n[i].row === t.row)
                  return {
                    row: i,
                    column: t.column,
                  };
              return o;
            }),
            (this.occurToOriginalPosition = function (e, t) {
              var n = e.$occurMatchingLines;
              return n && n[t.row]
                ? {
                    row: n[t.row].row,
                    column: t.column,
                  }
                : t;
            }),
            (this.matchingLines = function (e, t) {
              if (((t = o.mixin({}, t)), !e || !t.needle)) return [];
              var n = new i();
              return (
                n.set(t),
                n.findAll(e).reduce(function (t, n) {
                  var o = n.start.row,
                    i = t[t.length - 1];
                  return i && i.row === o
                    ? t
                    : t.concat({
                        row: o,
                        content: e.getLine(o),
                      });
                }, [])
              );
            });
        }.call(n.prototype),
        e("./lib/dom").importCssString(
          ".ace_occur-highlight {\n    border-radius: 4px;\n    background-color: rgba(87, 255, 8, 0.25);\n    position: absolute;\n    z-index: 4;\n    box-sizing: border-box;\n    box-shadow: 0 0 4px rgb(91, 255, 50);\n}\n.ace_dark .ace_occur-highlight {\n    background-color: rgb(80, 140, 85);\n    box-shadow: 0 0 4px rgb(60, 120, 70);\n}\n",
          "incremental-occur-highlighting"
        ),
        (t.Occur = n);
    }
  ),
  define(
    "ace/commands/occur_commands",
    [
      "require",
      "exports",
      "module",
      "ace/config",
      "ace/occur",
      "ace/keyboard/hash_handler",
      "ace/lib/oop",
    ],
    function (e, t) {
      function n() {}
      e("../config");
      var o = e("../occur").Occur,
        i = {
          name: "occur",
          exec: function (e, t) {
            var i = !!e.session.$occur;
            new o().enter(e, t) && !i && n.installIn(e);
          },
          readOnly: !0,
        },
        r = [
          {
            name: "occurexit",
            bindKey: "esc|Ctrl-G",
            exec: function (e) {
              var t = e.session.$occur;
              t && (t.exit(e, {}), e.session.$occur || n.uninstallFrom(e));
            },
            readOnly: !0,
          },
          {
            name: "occuraccept",
            bindKey: "enter",
            exec: function (e) {
              var t = e.session.$occur;
              t &&
                (t.exit(e, {
                  translatePosition: !0,
                }),
                e.session.$occur || n.uninstallFrom(e));
            },
            readOnly: !0,
          },
        ],
        a = e("../keyboard/hash_handler").HashHandler;
      e("../lib/oop").inherits(n, a),
        function () {
          (this.isOccurHandler = !0),
            (this.attach = function (e) {
              a.call(this, r, e.commands.platform), (this.$editor = e);
            });
          var e = this.handleKeyboard;
          this.handleKeyboard = function (t, n, o, i) {
            var r = e.call(this, t, n, o, i);
            return r && r.command ? r : void 0;
          };
        }.call(n.prototype),
        (n.installIn = function (e) {
          var t = new this();
          e.keyBinding.addKeyboardHandler(t), e.commands.addCommands(r);
        }),
        (n.uninstallFrom = function (e) {
          e.commands.removeCommands(r);
          var t = e.getKeyboardHandler();
          t.isOccurHandler && e.keyBinding.removeKeyboardHandler(t);
        }),
        (t.occurStartCommand = i);
    }
  ),
  define(
    "ace/commands/incremental_search_commands",
    [
      "require",
      "exports",
      "module",
      "ace/config",
      "ace/lib/oop",
      "ace/keyboard/hash_handler",
      "ace/commands/occur_commands",
    ],
    function (e, t) {
      function n(e) {
        this.$iSearch = e;
      }
      var o = e("../config"),
        i = e("../lib/oop"),
        r = e("../keyboard/hash_handler").HashHandler,
        a = e("./occur_commands").occurStartCommand;
      (t.iSearchStartCommands = [
        {
          name: "iSearch",
          bindKey: {
            win: "Ctrl-F",
            mac: "Command-F",
          },
          exec: function (e, t) {
            o.loadModule(["core", "ace/incremental_search"], function (n) {
              var o = (n.iSearch = n.iSearch || new n.IncrementalSearch());
              o.activate(e, t.backwards), t.jumpToFirstMatch && o.next(t);
            });
          },
          readOnly: !0,
        },
        {
          name: "iSearchBackwards",
          exec: function (e) {
            e.execCommand("iSearch", {
              backwards: !0,
            });
          },
          readOnly: !0,
        },
        {
          name: "iSearchAndGo",
          bindKey: {
            win: "Ctrl-K",
            mac: "Command-G",
          },
          exec: function (e) {
            e.execCommand("iSearch", {
              jumpToFirstMatch: !0,
              useCurrentOrPrevSearch: !0,
            });
          },
          readOnly: !0,
        },
        {
          name: "iSearchBackwardsAndGo",
          bindKey: {
            win: "Ctrl-Shift-K",
            mac: "Command-Shift-G",
          },
          exec: function (e) {
            e.execCommand("iSearch", {
              jumpToFirstMatch: !0,
              backwards: !0,
              useCurrentOrPrevSearch: !0,
            });
          },
          readOnly: !0,
        },
      ]),
        (t.iSearchCommands = [
          {
            name: "restartSearch",
            bindKey: {
              win: "Ctrl-F",
              mac: "Command-F",
            },
            exec: function (e) {
              e.cancelSearch(!0);
            },
          },
          {
            name: "searchForward",
            bindKey: {
              win: "Ctrl-S|Ctrl-K",
              mac: "Ctrl-S|Command-G",
            },
            exec: function (e, t) {
              (t.useCurrentOrPrevSearch = !0), e.next(t);
            },
          },
          {
            name: "searchBackward",
            bindKey: {
              win: "Ctrl-R|Ctrl-Shift-K",
              mac: "Ctrl-R|Command-Shift-G",
            },
            exec: function (e, t) {
              (t.useCurrentOrPrevSearch = !0), (t.backwards = !0), e.next(t);
            },
          },
          {
            name: "extendSearchTerm",
            exec: function (e, t) {
              e.addString(t);
            },
          },
          {
            name: "extendSearchTermSpace",
            bindKey: "space",
            exec: function (e) {
              e.addString(" ");
            },
          },
          {
            name: "shrinkSearchTerm",
            bindKey: "backspace",
            exec: function (e) {
              e.removeChar();
            },
          },
          {
            name: "confirmSearch",
            bindKey: "return",
            exec: function (e) {
              e.deactivate();
            },
          },
          {
            name: "cancelSearch",
            bindKey: "esc|Ctrl-G",
            exec: function (e) {
              e.deactivate(!0);
            },
          },
          {
            name: "occurisearch",
            bindKey: "Ctrl-O",
            exec: function (e) {
              var t = i.mixin({}, e.$options);
              e.deactivate(), a.exec(e.$editor, t);
            },
          },
          {
            name: "yankNextWord",
            bindKey: "Ctrl-w",
            exec: function (e) {
              var t = e.$editor,
                n = t.selection.getRangeOfMovements(function (e) {
                  e.moveCursorWordRight();
                }),
                o = t.session.getTextRange(n);
              e.addString(o);
            },
          },
          {
            name: "yankNextChar",
            bindKey: "Ctrl-Alt-y",
            exec: function (e) {
              var t = e.$editor,
                n = t.selection.getRangeOfMovements(function (e) {
                  e.moveCursorRight();
                }),
                o = t.session.getTextRange(n);
              e.addString(o);
            },
          },
          {
            name: "recenterTopBottom",
            bindKey: "Ctrl-l",
            exec: function (e) {
              e.$editor.execCommand("recenterTopBottom");
            },
          },
          {
            name: "selectAllMatches",
            bindKey: "Ctrl-space",
            exec: function (e) {
              var t = e.$editor,
                n = t.session.$isearchHighlight,
                o =
                  n && n.cache
                    ? n.cache.reduce(function (e, t) {
                        return e.concat(t || []);
                      }, [])
                    : [];
              e.deactivate(!1),
                o.forEach(t.selection.addRange.bind(t.selection));
            },
          },
          {
            name: "searchAsRegExp",
            bindKey: "Alt-r",
            exec: function (e) {
              e.convertNeedleToRegExp();
            },
          },
        ].map(function (e) {
          return (
            (e.readOnly = !0),
            (e.isIncrementalSearchCommand = !0),
            (e.scrollIntoView = "animate-cursor"),
            e
          );
        })),
        i.inherits(n, r),
        function () {
          (this.attach = function (e) {
            var n = this.$iSearch;
            r.call(this, t.iSearchCommands, e.commands.platform),
              (this.$commandExecHandler = e.commands.addEventListener(
                "exec",
                function (t) {
                  if (!t.command.isIncrementalSearchCommand)
                    return n.deactivate();
                  t.stopPropagation(), t.preventDefault();
                  var o = e.session.getScrollTop(),
                    i = t.command.exec(n, t.args || {});
                  return (
                    e.renderer.scrollCursorIntoView(null, 0.5),
                    e.renderer.animateScrolling(o),
                    i
                  );
                }
              ));
          }),
            (this.detach = function (e) {
              this.$commandExecHandler &&
                (e.commands.removeEventListener(
                  "exec",
                  this.$commandExecHandler
                ),
                delete this.$commandExecHandler);
            });
          var e = this.handleKeyboard;
          this.handleKeyboard = function (t, n, o, i) {
            if (((1 === n || 8 === n) && "v" === o) || (1 === n && "y" === o))
              return null;
            var r = e.call(this, t, n, o, i);
            if (r.command) return r;
            if (-1 == n) {
              var a = this.commands.extendSearchTerm;
              if (a)
                return {
                  command: a,
                  args: o,
                };
            }
            return !1;
          };
        }.call(n.prototype),
        (t.IncrementalSearchKeyboardHandler = n);
    }
  ),
  define(
    "ace/incremental_search",
    [
      "require",
      "exports",
      "module",
      "ace/lib/oop",
      "ace/range",
      "ace/search",
      "ace/search_highlight",
      "ace/commands/incremental_search_commands",
      "ace/lib/dom",
      "ace/commands/command_manager",
      "ace/editor",
      "ace/config",
    ],
    function (e, t) {
      "use strict";
      function n() {
        (this.$options = {
          wrap: !1,
          skipCurrent: !1,
        }),
          (this.$keyboardHandler = new h(this));
      }
      function o(e) {
        return e instanceof RegExp;
      }
      function i(e) {
        var t = String(e),
          n = t.indexOf("/"),
          o = t.lastIndexOf("/");
        return {
          expression: t.slice(n + 1, o),
          flags: t.slice(o + 1),
        };
      }
      function r(e, t) {
        try {
          return new RegExp(e, t);
        } catch (t) {
          return e;
        }
      }
      function a(e) {
        return r(e.expression, e.flags);
      }
      var s = e("./lib/oop"),
        l = e("./range").Range,
        c = e("./search").Search,
        u = e("./search_highlight").SearchHighlight,
        d = e("./commands/incremental_search_commands"),
        h = d.IncrementalSearchKeyboardHandler;
      s.inherits(n, c),
        function () {
          (this.activate = function (e, t) {
            (this.$editor = e),
              (this.$startPos = this.$currentPos = e.getCursorPosition()),
              (this.$options.needle = ""),
              (this.$options.backwards = t),
              e.keyBinding.addKeyboardHandler(this.$keyboardHandler),
              (this.$originalEditorOnPaste = e.onPaste),
              (e.onPaste = this.onPaste.bind(this)),
              (this.$mousedownHandler = e.addEventListener(
                "mousedown",
                this.onMouseDown.bind(this)
              )),
              this.selectionFix(e),
              this.statusMessage(!0);
          }),
            (this.deactivate = function (e) {
              this.cancelSearch(e);
              var t = this.$editor;
              t.keyBinding.removeKeyboardHandler(this.$keyboardHandler),
                this.$mousedownHandler &&
                  (t.removeEventListener("mousedown", this.$mousedownHandler),
                  delete this.$mousedownHandler),
                (t.onPaste = this.$originalEditorOnPaste),
                this.message("");
            }),
            (this.selectionFix = function (e) {
              e.selection.isEmpty() &&
                !e.session.$emacsMark &&
                e.clearSelection();
            }),
            (this.highlight = function (e) {
              var t = this.$editor.session;
              (t.$isearchHighlight =
                t.$isearchHighlight ||
                t.addDynamicMarker(
                  new u(null, "ace_isearch-result", "text")
                )).setRegexp(e),
                t._emit("changeBackMarker");
            }),
            (this.cancelSearch = function (e) {
              var t = this.$editor;
              return (
                (this.$prevNeedle = this.$options.needle),
                (this.$options.needle = ""),
                e
                  ? (t.moveCursorToPosition(this.$startPos),
                    (this.$currentPos = this.$startPos))
                  : t.pushEmacsMark && t.pushEmacsMark(this.$startPos, !1),
                this.highlight(null),
                l.fromPoints(this.$currentPos, this.$currentPos)
              );
            }),
            (this.highlightAndFindWithNeedle = function (e, t) {
              if (!this.$editor) return null;
              var n = this.$options;
              if (
                (t && (n.needle = t.call(this, n.needle || "") || ""),
                0 === n.needle.length)
              )
                return this.statusMessage(!0), this.cancelSearch(!0);
              n.start = this.$currentPos;
              var o = this.$editor.session,
                i = this.find(o),
                r = this.$editor.emacsMark
                  ? !!this.$editor.emacsMark()
                  : !this.$editor.selection.isEmpty();
              return (
                i &&
                  (n.backwards && (i = l.fromPoints(i.end, i.start)),
                  this.$editor.selection.setRange(
                    l.fromPoints(r ? this.$startPos : i.end, i.end)
                  ),
                  e && (this.$currentPos = i.end),
                  this.highlight(n.re)),
                this.statusMessage(i),
                i
              );
            }),
            (this.addString = function (e) {
              return this.highlightAndFindWithNeedle(!1, function (t) {
                if (!o(t)) return t + e;
                var n = i(t);
                return (n.expression += e), a(n);
              });
            }),
            (this.removeChar = function () {
              return this.highlightAndFindWithNeedle(!1, function (e) {
                if (!o(e)) return e.substring(0, e.length - 1);
                var t = i(e);
                return (
                  (t.expression = t.expression.substring(
                    0,
                    t.expression.length - 1
                  )),
                  a(t)
                );
              });
            }),
            (this.next = function (e) {
              return (
                (e = e || {}),
                (this.$options.backwards = !!e.backwards),
                (this.$currentPos = this.$editor.getCursorPosition()),
                this.highlightAndFindWithNeedle(!0, function (t) {
                  return e.useCurrentOrPrevSearch && 0 === t.length
                    ? this.$prevNeedle || ""
                    : t;
                })
              );
            }),
            (this.onMouseDown = function () {
              return this.deactivate(), !0;
            }),
            (this.onPaste = function (e) {
              this.addString(e);
            }),
            (this.convertNeedleToRegExp = function () {
              return this.highlightAndFindWithNeedle(!1, function (e) {
                return o(e) ? e : r(e, "ig");
              });
            }),
            (this.convertNeedleToString = function () {
              return this.highlightAndFindWithNeedle(!1, function (e) {
                return o(e) ? i(e).expression : e;
              });
            }),
            (this.statusMessage = function (e) {
              var t = this.$options,
                n = "";
              (n += t.backwards ? "reverse-" : ""),
                (n += "isearch: " + t.needle),
                (n += e ? "" : " (not found)"),
                this.message(n);
            }),
            (this.message = function (e) {
              this.$editor.showCommandLine
                ? (this.$editor.showCommandLine(e), this.$editor.focus())
                : console.log(e);
            });
        }.call(n.prototype),
        (t.IncrementalSearch = n);
      var p = e("./lib/dom");
      p.importCssString &&
        p.importCssString(
          ".ace_marker-layer .ace_isearch-result {  position: absolute;  z-index: 6;  box-sizing: border-box;}div.ace_isearch-result {  border-radius: 4px;  background-color: rgba(255, 200, 0, 0.5);  box-shadow: 0 0 4px rgb(255, 200, 0);}.ace_dark div.ace_isearch-result {  background-color: rgb(100, 110, 160);  box-shadow: 0 0 4px rgb(80, 90, 140);}",
          "incremental-search-highlighting"
        );
      var f = e("./commands/command_manager");
      (function () {
        this.setupIncrementalSearch = function (e, t) {
          if (this.usesIncrementalSearch != t) {
            this.usesIncrementalSearch = t;
            var n = d.iSearchStartCommands;
            this[t ? "addCommands" : "removeCommands"](n);
          }
        };
      }.call(f.CommandManager.prototype));
      var m = e("./editor").Editor;
      e("./config").defineOptions(m.prototype, "editor", {
        useIncrementalSearch: {
          set: function (e) {
            this.keyBinding.$handlers.forEach(function (t) {
              t.setupIncrementalSearch && t.setupIncrementalSearch(this, e);
            }),
              this._emit("incrementalSearchSettingChanged", {
                isEnabled: e,
              });
          },
        },
      });
    }
  ),
  define(
    "ace/keyboard/emacs",
    [
      "require",
      "exports",
      "module",
      "ace/lib/dom",
      "ace/incremental_search",
      "ace/commands/incremental_search_commands",
      "ace/keyboard/hash_handler",
      "ace/lib/keys",
    ],
    function (e, t) {
      "use strict";
      var n = e("../lib/dom");
      e("../incremental_search");
      var o = e("../commands/incremental_search_commands"),
        i = function (e, t) {
          var n = this.scroller.getBoundingClientRect(),
            o = e + this.scrollLeft - n.left - this.$padding,
            i = Math.floor(o / this.characterWidth),
            r = Math.floor((t + this.scrollTop - n.top) / this.lineHeight);
          return this.session.screenToDocumentPosition(r, i, o);
        },
        r = e("./hash_handler").HashHandler;
      (t.handler = new r()),
        (t.handler.isEmacs = !0),
        (t.handler.$id = "ace/keyboard/emacs");
      var a,
        s,
        l = !1;
      (t.handler.attach = function (e) {
        l ||
          ((l = !0),
          n.importCssString(
            "            .emacs-mode .ace_cursor{                border: 1px rgba(50,250,50,0.8) solid!important;                box-sizing: border-box!important;                background-color: rgba(0,250,0,0.9);                opacity: 0.5;            }            .emacs-mode .ace_hidden-cursors .ace_cursor{                opacity: 1;                background-color: transparent;            }            .emacs-mode .ace_overwrite-cursors .ace_cursor {                opacity: 1;                background-color: transparent;                border-width: 0 0 2px 2px !important;            }            .emacs-mode .ace_text-layer {                z-index: 4            }            .emacs-mode .ace_cursor-layer {                z-index: 2            }",
            "emacsMode"
          )),
          (a = e.session.$selectLongWords),
          (e.session.$selectLongWords = !0),
          (s = e.session.$useEmacsStyleLineStart),
          (e.session.$useEmacsStyleLineStart = !0),
          (e.session.$emacsMark = null),
          (e.session.$emacsMarkRing = e.session.$emacsMarkRing || []),
          (e.emacsMark = function () {
            return this.session.$emacsMark;
          }),
          (e.setEmacsMark = function (e) {
            this.session.$emacsMark = e;
          }),
          (e.pushEmacsMark = function (e, t) {
            var n = this.session.$emacsMark;
            n && this.session.$emacsMarkRing.push(n),
              !e || t
                ? this.setEmacsMark(e)
                : this.session.$emacsMarkRing.push(e);
          }),
          (e.popEmacsMark = function () {
            var e = this.emacsMark();
            return e
              ? (this.setEmacsMark(null), e)
              : this.session.$emacsMarkRing.pop();
          }),
          (e.getLastEmacsMark = function () {
            return (
              this.session.$emacsMark ||
              this.session.$emacsMarkRing.slice(-1)[0]
            );
          }),
          (e.emacsMarkForSelection = function (e) {
            var t = this.selection,
              n = this.multiSelect ? this.multiSelect.getAllRanges().length : 1,
              o = t.index || 0,
              i = this.session.$emacsMarkRing,
              r = i.length - (n - o),
              a = i[r] || t.anchor;
            return (
              e && i.splice(r, 1, "row" in e && "column" in e ? e : void 0), a
            );
          }),
          e.on("click", u),
          e.on("changeSession", c),
          (e.renderer.screenToTextCoordinates = i),
          e.setStyle("emacs-mode"),
          e.commands.addCommands(p),
          (t.handler.platform = e.commands.platform),
          (e.$emacsModeHandler = this),
          e.addEventListener("copy", this.onCopy),
          e.addEventListener("paste", this.onPaste);
      }),
        (t.handler.detach = function (e) {
          delete e.renderer.screenToTextCoordinates,
            (e.session.$selectLongWords = a),
            (e.session.$useEmacsStyleLineStart = s),
            e.removeEventListener("click", u),
            e.removeEventListener("changeSession", c),
            e.unsetStyle("emacs-mode"),
            e.commands.removeCommands(p),
            e.removeEventListener("copy", this.onCopy),
            e.removeEventListener("paste", this.onPaste),
            (e.$emacsModeHandler = null);
        });
      var c = function (e) {
          e.oldSession &&
            ((e.oldSession.$selectLongWords = a),
            (e.oldSession.$useEmacsStyleLineStart = s)),
            (a = e.session.$selectLongWords),
            (e.session.$selectLongWords = !0),
            (s = e.session.$useEmacsStyleLineStart),
            (e.session.$useEmacsStyleLineStart = !0),
            e.session.hasOwnProperty("$emacsMark") ||
              (e.session.$emacsMark = null),
            e.session.hasOwnProperty("$emacsMarkRing") ||
              (e.session.$emacsMarkRing = []);
        },
        u = function (e) {
          e.editor.session.$emacsMark = null;
        },
        d = e("../lib/keys").KEY_MODS,
        h = {
          C: "ctrl",
          S: "shift",
          M: "alt",
          CMD: "command",
        };
      [
        "C-S-M-CMD",
        "S-M-CMD",
        "C-M-CMD",
        "C-S-CMD",
        "C-S-M",
        "M-CMD",
        "S-CMD",
        "S-M",
        "C-CMD",
        "C-M",
        "C-S",
        "CMD",
        "M",
        "S",
        "C",
      ].forEach(function (e) {
        var t = 0;
        e.split("-").forEach(function (e) {
          t |= d[h[e]];
        }),
          (h[t] = e.toLowerCase() + "-");
      }),
        (t.handler.onCopy = function (e, n) {
          n.$handlesEmacsOnCopy ||
            ((n.$handlesEmacsOnCopy = !0),
            t.handler.commands.killRingSave.exec(n),
            (n.$handlesEmacsOnCopy = !1));
        }),
        (t.handler.onPaste = function (e, t) {
          t.pushEmacsMark(t.getCursorPosition());
        }),
        (t.handler.bindKey = function (e, t) {
          if (("object" == typeof e && (e = e[this.platform]), e)) {
            var n = this.commandKeyBinding;
            e.split("|").forEach(function (e) {
              (e = e.toLowerCase()),
                (n[e] = t),
                e
                  .split(" ")
                  .slice(0, -1)
                  .reduce(function (e, t, n) {
                    var o = e[n - 1] ? e[n - 1] + " " : "";
                    return e.concat([o + t]);
                  }, [])
                  .forEach(function (e) {
                    n[e] || (n[e] = "null");
                  });
            }, this);
          }
        }),
        (t.handler.getStatusText = function (e, t) {
          var n = "";
          return (
            t.count && (n += t.count), t.keyChain && (n += " " + t.keyChain), n
          );
        }),
        (t.handler.handleKeyboard = function (e, t, n, o) {
          if (-1 !== o) {
            var i = e.editor;
            if (
              (i._signal("changeStatus"),
              -1 == t && (i.pushEmacsMark(), e.count))
            ) {
              var r = new Array(e.count + 1).join(n);
              return (
                (e.count = null),
                {
                  command: "insertstring",
                  args: r,
                }
              );
            }
            var a = h[t];
            if ("c-" == a || e.count)
              if (
                "number" == typeof (c = parseInt(n[n.length - 1])) &&
                !isNaN(c)
              )
                return (
                  (e.count = Math.max(e.count, 0) || 0),
                  (e.count = 10 * e.count + c),
                  {
                    command: "null",
                  }
                );
            a && (n = a + n), e.keyChain && (n = e.keyChain += " " + n);
            var s = this.commandKeyBinding[n];
            if (((e.keyChain = "null" == s ? n : ""), s)) {
              if ("null" === s)
                return {
                  command: "null",
                };
              if ("universalArgument" === s)
                return (
                  (e.count = -4),
                  {
                    command: "null",
                  }
                );
              var l;
              if (
                ("string" != typeof s &&
                  ((l = s.args),
                  s.command && (s = s.command),
                  "goorselect" === s &&
                    ((s = i.emacsMark() ? l[1] : l[0]), (l = null))),
                "string" != typeof s ||
                  (("insertstring" !== s &&
                    "splitline" !== s &&
                    "togglecomment" !== s) ||
                    i.pushEmacsMark(),
                  (s = this.commands[s] || i.commands.commands[s])))
              ) {
                if (
                  (s.readOnly || s.isYank || (e.lastCommand = null),
                  !s.readOnly && i.emacsMark() && i.setEmacsMark(null),
                  e.count)
                ) {
                  var c = e.count;
                  if (((e.count = 0), !s || !s.handlesCount))
                    return {
                      args: l,
                      command: {
                        exec: function (e, t) {
                          for (var n = 0; n < c; n++) s.exec(e, t);
                        },
                        multiSelectAction: s.multiSelectAction,
                      },
                    };
                  l || (l = {}), "object" == typeof l && (l.count = c);
                }
                return {
                  command: s,
                  args: l,
                };
              }
            }
          }
        }),
        (t.emacsKeys = {
          "Up|C-p": {
            command: "goorselect",
            args: ["golineup", "selectup"],
          },
          "Down|C-n": {
            command: "goorselect",
            args: ["golinedown", "selectdown"],
          },
          "Left|C-b": {
            command: "goorselect",
            args: ["gotoleft", "selectleft"],
          },
          "Right|C-f": {
            command: "goorselect",
            args: ["gotoright", "selectright"],
          },
          "C-Left|M-b": {
            command: "goorselect",
            args: ["gotowordleft", "selectwordleft"],
          },
          "C-Right|M-f": {
            command: "goorselect",
            args: ["gotowordright", "selectwordright"],
          },
          "Home|C-a": {
            command: "goorselect",
            args: ["gotolinestart", "selecttolinestart"],
          },
          "End|C-e": {
            command: "goorselect",
            args: ["gotolineend", "selecttolineend"],
          },
          "C-Home|S-M-,": {
            command: "goorselect",
            args: ["gotostart", "selecttostart"],
          },
          "C-End|S-M-.": {
            command: "goorselect",
            args: ["gotoend", "selecttoend"],
          },
          "S-Up|S-C-p": "selectup",
          "S-Down|S-C-n": "selectdown",
          "S-Left|S-C-b": "selectleft",
          "S-Right|S-C-f": "selectright",
          "S-C-Left|S-M-b": "selectwordleft",
          "S-C-Right|S-M-f": "selectwordright",
          "S-Home|S-C-a": "selecttolinestart",
          "S-End|S-C-e": "selecttolineend",
          "S-C-Home": "selecttostart",
          "S-C-End": "selecttoend",
          "C-l": "recenterTopBottom",
          "M-s": "centerselection",
          "M-g": "gotoline",
          "C-x C-p": "selectall",
          "C-Down": {
            command: "goorselect",
            args: ["gotopagedown", "selectpagedown"],
          },
          "C-Up": {
            command: "goorselect",
            args: ["gotopageup", "selectpageup"],
          },
          "PageDown|C-v": {
            command: "goorselect",
            args: ["gotopagedown", "selectpagedown"],
          },
          "PageUp|M-v": {
            command: "goorselect",
            args: ["gotopageup", "selectpageup"],
          },
          "S-C-Down": "selectpagedown",
          "S-C-Up": "selectpageup",
          "C-s": "iSearch",
          "C-r": "iSearchBackwards",
          "M-C-s": "findnext",
          "M-C-r": "findprevious",
          "S-M-5": "replace",
          Backspace: "backspace",
          "Delete|C-d": "del",
          "Return|C-m": {
            command: "insertstring",
            args: "\n",
          },
          "C-o": "splitline",
          "M-d|C-Delete": {
            command: "killWord",
            args: "right",
          },
          "C-Backspace|M-Backspace|M-Delete": {
            command: "killWord",
            args: "left",
          },
          "C-k": "killLine",
          "C-y|S-Delete": "yank",
          "M-y": "yankRotate",
          "C-g": "keyboardQuit",
          "C-w|C-S-W": "killRegion",
          "M-w": "killRingSave",
          "C-Space": "setMark",
          "C-x C-x": "exchangePointAndMark",
          "C-t": "transposeletters",
          "M-u": "touppercase",
          "M-l": "tolowercase",
          "M-/": "autocomplete",
          "C-u": "universalArgument",
          "M-;": "togglecomment",
          "C-/|C-x u|S-C--|C-z": "undo",
          "S-C-/|S-C-x u|C--|S-C-z": "redo",
          "C-x r": "selectRectangularRegion",
          "M-x": {
            command: "focusCommandLine",
            args: "M-x ",
          },
        }),
        t.handler.bindKeys(t.emacsKeys),
        t.handler.addCommands({
          recenterTopBottom: function (e) {
            var t = e.renderer,
              n = t.$cursorLayer.getPixelPosition(),
              o = t.$size.scrollerHeight - t.lineHeight,
              i = t.scrollTop;
            (i =
              Math.abs(n.top - i) < 2
                ? n.top - o
                : Math.abs(n.top - i - 0.5 * o) < 2
                ? n.top
                : n.top - 0.5 * o),
              e.session.setScrollTop(i);
          },
          selectRectangularRegion: function (e) {
            e.multiSelect.toggleBlockSelection();
          },
          setMark: {
            exec: function (e, t) {
              function n() {
                var t = e.popEmacsMark();
                t && e.moveCursorToPosition(t);
              }
              if (t && t.count)
                return (
                  e.inMultiSelectMode ? e.forEachSelection(n) : n(), void n()
                );
              var o = e.emacsMark(),
                i = e.selection.getAllRanges(),
                r = i.map(function (e) {
                  return {
                    row: e.start.row,
                    column: e.start.column,
                  };
                }),
                a = !0,
                s = i.every(function (e) {
                  return e.isEmpty();
                });
              return !a || (!o && s)
                ? o
                  ? void 0
                  : (r.forEach(function (t) {
                      e.pushEmacsMark(t);
                    }),
                    void e.setEmacsMark(r[r.length - 1]))
                : (e.inMultiSelectMode
                    ? e.forEachSelection({
                        exec: e.clearSelection.bind(e),
                      })
                    : e.clearSelection(),
                  void (o && e.pushEmacsMark(null)));
            },
            readOnly: !0,
            handlesCount: !0,
          },
          exchangePointAndMark: {
            exec: function (e, t) {
              var n = e.selection;
              if (t.count || n.isEmpty())
                if (t.count) {
                  var o = {
                    row: n.lead.row,
                    column: n.lead.column,
                  };
                  n.clearSelection(),
                    n.moveCursorToPosition(e.emacsMarkForSelection(o));
                } else n.selectToPosition(e.emacsMarkForSelection());
              else n.setSelectionRange(n.getRange(), !n.isBackwards());
            },
            readOnly: !0,
            handlesCount: !0,
            multiSelectAction: "forEach",
          },
          killWord: {
            exec: function (e, n) {
              e.clearSelection(),
                "left" == n
                  ? e.selection.selectWordLeft()
                  : e.selection.selectWordRight();
              var o = e.getSelectionRange(),
                i = e.session.getTextRange(o);
              t.killRing.add(i), e.session.remove(o), e.clearSelection();
            },
            multiSelectAction: "forEach",
          },
          killLine: function (e) {
            e.pushEmacsMark(null), e.clearSelection();
            var n = e.getSelectionRange(),
              o = e.session.getLine(n.start.row);
            (n.end.column = o.length), (o = o.substr(n.start.column));
            var i = e.session.getFoldLine(n.start.row);
            i && n.end.row != i.end.row && ((n.end.row = i.end.row), (o = "x")),
              /^\s*$/.test(o) &&
                (n.end.row++,
                (o = e.session.getLine(n.end.row)),
                (n.end.column = /^\s*$/.test(o) ? o.length : 0));
            var r = e.session.getTextRange(n);
            e.prevOp.command == this ? t.killRing.append(r) : t.killRing.add(r),
              e.session.remove(n),
              e.clearSelection();
          },
          yank: function (e) {
            e.onPaste(t.killRing.get() || ""),
              (e.keyBinding.$data.lastCommand = "yank");
          },
          yankRotate: function (e) {
            "yank" == e.keyBinding.$data.lastCommand &&
              (e.undo(),
              e.session.$emacsMarkRing.pop(),
              e.onPaste(t.killRing.rotate()),
              (e.keyBinding.$data.lastCommand = "yank"));
          },
          killRegion: {
            exec: function (e) {
              t.killRing.add(e.getCopyText()),
                e.commands.byName.cut.exec(e),
                e.setEmacsMark(null);
            },
            readOnly: !0,
            multiSelectAction: "forEach",
          },
          killRingSave: {
            exec: function (e) {
              e.$handlesEmacsOnCopy = !0;
              var n = e.session.$emacsMarkRing.slice(),
                o = [];
              t.killRing.add(e.getCopyText()),
                setTimeout(function () {
                  function t() {
                    var t = e.selection,
                      n = t.getRange(),
                      i = t.isBackwards() ? n.end : n.start;
                    o.push({
                      row: i.row,
                      column: i.column,
                    }),
                      t.clearSelection();
                  }
                  (e.$handlesEmacsOnCopy = !1),
                    e.inMultiSelectMode
                      ? e.forEachSelection({
                          exec: t,
                        })
                      : t(),
                    (e.session.$emacsMarkRing = n.concat(o.reverse()));
                }, 0);
            },
            readOnly: !0,
          },
          keyboardQuit: function (e) {
            e.selection.clearSelection(),
              e.setEmacsMark(null),
              (e.keyBinding.$data.count = null);
          },
          focusCommandLine: function (e, t) {
            e.showCommandLine && e.showCommandLine(t);
          },
        }),
        t.handler.addCommands(o.iSearchStartCommands);
      var p = t.handler.commands;
      (p.yank.isYank = !0),
        (p.yankRotate.isYank = !0),
        (t.killRing = {
          $data: [],
          add: function (e) {
            e && this.$data.push(e),
              this.$data.length > 30 && this.$data.shift();
          },
          append: function (e) {
            var t = this.$data.length - 1,
              n = this.$data[t] || "";
            e && (n += e), n && (this.$data[t] = n);
          },
          get: function (e) {
            return (
              (e = e || 1),
              this.$data
                .slice(this.$data.length - e, this.$data.length)
                .reverse()
                .join("\n")
            );
          },
          pop: function () {
            return this.$data.length > 1 && this.$data.pop(), this.get();
          },
          rotate: function () {
            return this.$data.unshift(this.$data.pop()), this.get();
          },
        });
    }
  ),
  (function (e) {
    "function" == typeof define && define.amd
      ? define(["jquery"], e)
      : "object" == typeof exports
      ? e(require("jquery"))
      : e(jQuery);
  })(function (e) {
    var t = (function () {
        if (e && e.fn && e.fn.select2 && e.fn.select2.amd)
          var t = e.fn.select2.amd;
        var n;
        return (
          (function () {
            var e, n, o;
            (t && t.requirejs) ||
              (t ? (n = t) : (t = {}),
              (function (t) {
                function i(e, t) {
                  return w.call(e, t);
                }
                function r(e, t) {
                  var n,
                    o,
                    i,
                    r,
                    a,
                    s,
                    l,
                    c,
                    u,
                    d,
                    h,
                    p = t && t.split("/"),
                    f = b.map,
                    m = (f && f["*"]) || {};
                  if (e && "." === e.charAt(0))
                    if (t) {
                      for (
                        a = (e = e.split("/")).length - 1,
                          b.nodeIdCompat &&
                            C.test(e[a]) &&
                            (e[a] = e[a].replace(C, "")),
                          e = p.slice(0, p.length - 1).concat(e),
                          u = 0;
                        u < e.length;
                        u += 1
                      )
                        if ("." === (h = e[u])) e.splice(u, 1), (u -= 1);
                        else if (".." === h) {
                          if (1 === u && (".." === e[2] || ".." === e[0]))
                            break;
                          u > 0 && (e.splice(u - 1, 2), (u -= 2));
                        }
                      e = e.join("/");
                    } else 0 === e.indexOf("./") && (e = e.substring(2));
                  if ((p || m) && f) {
                    for (u = (n = e.split("/")).length; u > 0; u -= 1) {
                      if (((o = n.slice(0, u).join("/")), p))
                        for (d = p.length; d > 0; d -= 1)
                          if ((i = f[p.slice(0, d).join("/")]) && (i = i[o])) {
                            (r = i), (s = u);
                            break;
                          }
                      if (r) break;
                      !l && m && m[o] && ((l = m[o]), (c = u));
                    }
                    !r && l && ((r = l), (s = c)),
                      r && (n.splice(0, s, r), (e = n.join("/")));
                  }
                  return e;
                }
                function a(e, n) {
                  return function () {
                    var o = _.call(arguments, 0);
                    return (
                      "string" != typeof o[0] && 1 === o.length && o.push(null),
                      p.apply(t, o.concat([e, n]))
                    );
                  };
                }
                function s(e) {
                  return function (t) {
                    return r(t, e);
                  };
                }
                function l(e) {
                  return function (t) {
                    g[e] = t;
                  };
                }
                function c(e) {
                  if (i(v, e)) {
                    var n = v[e];
                    delete v[e], (y[e] = !0), h.apply(t, n);
                  }
                  if (!i(g, e) && !i(y, e)) throw new Error("No " + e);
                  return g[e];
                }
                function u(e) {
                  var t,
                    n = e ? e.indexOf("!") : -1;
                  return (
                    n > -1 &&
                      ((t = e.substring(0, n)),
                      (e = e.substring(n + 1, e.length))),
                    [t, e]
                  );
                }
                function d(e) {
                  return function () {
                    return (b && b.config && b.config[e]) || {};
                  };
                }
                var h,
                  p,
                  f,
                  m,
                  g = {},
                  v = {},
                  b = {},
                  y = {},
                  w = Object.prototype.hasOwnProperty,
                  _ = [].slice,
                  C = /\.js$/;
                (f = function (e, t) {
                  var n,
                    o = u(e),
                    i = o[0];
                  return (
                    (e = o[1]),
                    i && (n = c((i = r(i, t)))),
                    i
                      ? (e = n && n.normalize ? n.normalize(e, s(t)) : r(e, t))
                      : ((i = (o = u((e = r(e, t))))[0]),
                        (e = o[1]),
                        i && (n = c(i))),
                    {
                      f: i ? i + "!" + e : e,
                      n: e,
                      pr: i,
                      p: n,
                    }
                  );
                }),
                  (m = {
                    require: function (e) {
                      return a(e);
                    },
                    exports: function (e) {
                      var t = g[e];
                      return void 0 !== t ? t : (g[e] = {});
                    },
                    module: function (e) {
                      return {
                        id: e,
                        uri: "",
                        exports: g[e],
                        config: d(e),
                      };
                    },
                  }),
                  (h = function (e, n, o, r) {
                    var s,
                      u,
                      d,
                      h,
                      p,
                      b,
                      w = [],
                      _ = typeof o;
                    if (((r = r || e), "undefined" === _ || "function" === _)) {
                      for (
                        n =
                          !n.length && o.length
                            ? ["require", "exports", "module"]
                            : n,
                          p = 0;
                        p < n.length;
                        p += 1
                      )
                        if ("require" === (u = (h = f(n[p], r)).f))
                          w[p] = m.require(e);
                        else if ("exports" === u)
                          (w[p] = m.exports(e)), (b = !0);
                        else if ("module" === u) s = w[p] = m.module(e);
                        else if (i(g, u) || i(v, u) || i(y, u)) w[p] = c(u);
                        else {
                          if (!h.p) throw new Error(e + " missing " + u);
                          h.p.load(h.n, a(r, !0), l(u), {}), (w[p] = g[u]);
                        }
                      (d = o ? o.apply(g[e], w) : void 0),
                        e &&
                          (s && s.exports !== t && s.exports !== g[e]
                            ? (g[e] = s.exports)
                            : (d === t && b) || (g[e] = d));
                    } else e && (g[e] = o);
                  }),
                  (e =
                    n =
                    p =
                      function (e, n, o, i, r) {
                        if ("string" == typeof e)
                          return m[e] ? m[e](n) : c(f(e, n).f);
                        if (!e.splice) {
                          if (((b = e).deps && p(b.deps, b.callback), !n))
                            return;
                          n.splice ? ((e = n), (n = o), (o = null)) : (e = t);
                        }
                        return (
                          (n = n || function () {}),
                          "function" == typeof o && ((o = i), (i = r)),
                          i
                            ? h(t, e, n, o)
                            : setTimeout(function () {
                                h(t, e, n, o);
                              }, 4),
                          p
                        );
                      }),
                  (p.config = function (e) {
                    return p(e);
                  }),
                  (e._defined = g),
                  ((o = function (e, t, n) {
                    if ("string" != typeof e)
                      throw new Error(
                        "See almond README: incorrect module build, no module name"
                      );
                    t.splice || ((n = t), (t = [])),
                      i(g, e) || i(v, e) || (v[e] = [e, t, n]);
                  }).amd = {
                    jQuery: !0,
                  });
              })(),
              (t.requirejs = e),
              (t.require = n),
              (t.define = o));
          })(),
          t.define("almond", function () {}),
          t.define("jquery", [], function () {
            var t = e || $;
            return (
              null == t &&
                console &&
                console.error &&
                console.error(
                  "Select2: An instance of jQuery or a jQuery-compatible library was not found. Make sure that you are including jQuery before Select2 on your web page."
                ),
              t
            );
          }),
          t.define("select2/utils", ["jquery"], function (e) {
            function t(e) {
              var t = e.prototype,
                n = [];
              for (var o in t) {
                "function" == typeof t[o] && "constructor" !== o && n.push(o);
              }
              return n;
            }
            var n = {
                Extend: function (e, t) {
                  function n() {
                    this.constructor = e;
                  }
                  var o = {}.hasOwnProperty;
                  for (var i in t) o.call(t, i) && (e[i] = t[i]);
                  return (
                    (n.prototype = t.prototype),
                    (e.prototype = new n()),
                    (e.__super__ = t.prototype),
                    e
                  );
                },
                Decorate: function (e, n) {
                  function o() {
                    var t = Array.prototype.unshift,
                      o = n.prototype.constructor.length,
                      i = e.prototype.constructor;
                    o > 0 &&
                      (t.call(arguments, e.prototype.constructor),
                      (i = n.prototype.constructor)),
                      i.apply(this, arguments);
                  }
                  function i() {
                    this.constructor = o;
                  }
                  var r = t(n),
                    a = t(e);
                  (n.displayName = e.displayName), (o.prototype = new i());
                  for (var s = 0; s < a.length; s++) {
                    var l = a[s];
                    o.prototype[l] = e.prototype[l];
                  }
                  for (
                    var c = function (e) {
                        var t = function () {};
                        (e in o.prototype) && (t = o.prototype[e]);
                        var i = n.prototype[e];
                        return function () {
                          return (
                            Array.prototype.unshift.call(arguments, t),
                            i.apply(this, arguments)
                          );
                        };
                      },
                      u = 0;
                    u < r.length;
                    u++
                  ) {
                    var d = r[u];
                    o.prototype[d] = c(d);
                  }
                  return o;
                },
              },
              o = function () {
                this.listeners = {};
              };
            return (
              (o.prototype.on = function (e, t) {
                (this.listeners = this.listeners || {}),
                  e in this.listeners
                    ? this.listeners[e].push(t)
                    : (this.listeners[e] = [t]);
              }),
              (o.prototype.trigger = function (e) {
                var t = Array.prototype.slice,
                  n = t.call(arguments, 1);
                (this.listeners = this.listeners || {}),
                  null == n && (n = []),
                  0 === n.length && n.push({}),
                  (n[0]._type = e),
                  e in this.listeners &&
                    this.invoke(this.listeners[e], t.call(arguments, 1)),
                  "*" in this.listeners &&
                    this.invoke(this.listeners["*"], arguments);
              }),
              (o.prototype.invoke = function (e, t) {
                for (var n = 0, o = e.length; n < o; n++) e[n].apply(this, t);
              }),
              (n.Observable = o),
              (n.generateChars = function (e) {
                for (var t = "", n = 0; n < e; n++) {
                  t += Math.floor(36 * Math.random()).toString(36);
                }
                return t;
              }),
              (n.bind = function (e, t) {
                return function () {
                  e.apply(t, arguments);
                };
              }),
              (n._convertData = function (e) {
                for (var t in e) {
                  var n = t.split("-"),
                    o = e;
                  if (1 !== n.length) {
                    for (var i = 0; i < n.length; i++) {
                      var r = n[i];
                      (r = r.substring(0, 1).toLowerCase() + r.substring(1)) in
                        o || (o[r] = {}),
                        i == n.length - 1 && (o[r] = e[t]),
                        (o = o[r]);
                    }
                    delete e[t];
                  }
                }
                return e;
              }),
              (n.hasScroll = function (t, n) {
                var o = e(n),
                  i = n.style.overflowX,
                  r = n.style.overflowY;
                return (
                  (i !== r || ("hidden" !== r && "visible" !== r)) &&
                  ("scroll" === i ||
                    "scroll" === r ||
                    o.innerHeight() < n.scrollHeight ||
                    o.innerWidth() < n.scrollWidth)
                );
              }),
              (n.escapeMarkup = function (e) {
                var t = {
                  "\\": "&#92;",
                  "&": "&amp;",
                  "<": "&lt;",
                  ">": "&gt;",
                  '"': "&quot;",
                  "'": "&#39;",
                  "/": "&#47;",
                };
                return "string" != typeof e
                  ? e
                  : String(e).replace(/[&<>"'\/\\]/g, function (e) {
                      return t[e];
                    });
              }),
              (n.appendMany = function (t, n) {
                if ("1.7" === e.fn.jquery.substr(0, 3)) {
                  var o = e();
                  e.map(n, function (e) {
                    o = o.add(e);
                  }),
                    (n = o);
                }
                t.append(n);
              }),
              n
            );
          }),
          t.define("select2/results", ["jquery", "./utils"], function (e, t) {
            function n(e, t, o) {
              (this.$element = e),
                (this.data = o),
                (this.options = t),
                n.__super__.constructor.call(this);
            }
            return (
              t.Extend(n, t.Observable),
              (n.prototype.render = function () {
                var t = e(
                  '<ul class="select2-results__options" role="tree"></ul>'
                );
                return (
                  this.options.get("multiple") &&
                    t.attr("aria-multiselectable", "true"),
                  (this.$results = t),
                  t
                );
              }),
              (n.prototype.clear = function () {
                this.$results.empty();
              }),
              (n.prototype.displayMessage = function (t) {
                var n = this.options.get("escapeMarkup");
                this.clear(), this.hideLoading();
                var o = e(
                    '<li role="treeitem" aria-live="assertive" class="select2-results__option"></li>'
                  ),
                  i = this.options.get("translations").get(t.message);
                o.append(n(i(t.args))),
                  (o[0].className += " select2-results__message"),
                  this.$results.append(o);
              }),
              (n.prototype.hideMessages = function () {
                this.$results.find(".select2-results__message").remove();
              }),
              (n.prototype.append = function (e) {
                this.hideLoading();
                var t = [];
                if (null != e.results && 0 !== e.results.length) {
                  e.results = this.sort(e.results);
                  for (var n = 0; n < e.results.length; n++) {
                    var o = e.results[n],
                      i = this.option(o);
                    t.push(i);
                  }
                  this.$results.append(t);
                } else
                  0 === this.$results.children().length &&
                    this.trigger("results:message", {
                      message: "noResults",
                    });
              }),
              (n.prototype.position = function (e, t) {
                t.find(".select2-results").append(e);
              }),
              (n.prototype.sort = function (e) {
                return this.options.get("sorter")(e);
              }),
              (n.prototype.highlightFirstItem = function () {
                var e = this.$results.find(
                    ".select2-results__option[aria-selected]"
                  ),
                  t = e.filter("[aria-selected=true]");
                t.length > 0
                  ? t.first().trigger("mouseenter")
                  : e.first().trigger("mouseenter"),
                  this.ensureHighlightVisible();
              }),
              (n.prototype.setClasses = function () {
                var t = this;
                this.data.current(function (n) {
                  var o = e.map(n, function (e) {
                    return e.id.toString();
                  });
                  t.$results
                    .find(".select2-results__option[aria-selected]")
                    .each(function () {
                      var t = e(this),
                        n = e.data(this, "data"),
                        i = "" + n.id;
                      (null != n.element && n.element.selected) ||
                      (null == n.element && e.inArray(i, o) > -1)
                        ? t.attr("aria-selected", "true")
                        : t.attr("aria-selected", "false");
                    });
                });
              }),
              (n.prototype.showLoading = function (e) {
                this.hideLoading();
                var t = {
                    disabled: !0,
                    loading: !0,
                    text: this.options.get("translations").get("searching")(e),
                  },
                  n = this.option(t);
                (n.className += " loading-results"), this.$results.prepend(n);
              }),
              (n.prototype.hideLoading = function () {
                this.$results.find(".loading-results").remove();
              }),
              (n.prototype.option = function (t) {
                var n = document.createElement("li");
                n.className = "select2-results__option";
                var o = {
                  role: "treeitem",
                  "aria-selected": "false",
                };
                for (var i in (t.disabled &&
                  (delete o["aria-selected"], (o["aria-disabled"] = "true")),
                null == t.id && delete o["aria-selected"],
                null != t._resultId && (n.id = t._resultId),
                t.title && (n.title = t.title),
                t.children &&
                  ((o.role = "group"),
                  (o["aria-label"] = t.text),
                  delete o["aria-selected"]),
                o)) {
                  var r = o[i];
                  n.setAttribute(i, r);
                }
                if (t.children) {
                  var a = e(n),
                    s = document.createElement("strong");
                  s.className = "select2-results__group";
                  e(s);
                  this.template(t, s);
                  for (var l = [], c = 0; c < t.children.length; c++) {
                    var u = t.children[c],
                      d = this.option(u);
                    l.push(d);
                  }
                  var h = e("<ul></ul>", {
                    class:
                      "select2-results__options select2-results__options--nested",
                  });
                  h.append(l), a.append(s), a.append(h);
                } else this.template(t, n);
                return e.data(n, "data", t), n;
              }),
              (n.prototype.bind = function (t) {
                var n = this,
                  o = t.id + "-results";
                this.$results.attr("id", o),
                  t.on("results:all", function (e) {
                    n.clear(),
                      n.append(e.data),
                      t.isOpen() && (n.setClasses(), n.highlightFirstItem());
                  }),
                  t.on("results:append", function (e) {
                    n.append(e.data), t.isOpen() && n.setClasses();
                  }),
                  t.on("query", function (e) {
                    n.hideMessages(), n.showLoading(e);
                  }),
                  t.on("select", function () {
                    t.isOpen() && (n.setClasses(), n.highlightFirstItem());
                  }),
                  t.on("unselect", function () {
                    t.isOpen() && (n.setClasses(), n.highlightFirstItem());
                  }),
                  t.on("open", function () {
                    n.$results.attr("aria-expanded", "true"),
                      n.$results.attr("aria-hidden", "false"),
                      n.setClasses(),
                      n.ensureHighlightVisible();
                  }),
                  t.on("close", function () {
                    n.$results.attr("aria-expanded", "false"),
                      n.$results.attr("aria-hidden", "true"),
                      n.$results.removeAttr("aria-activedescendant");
                  }),
                  t.on("results:toggle", function () {
                    var e = n.getHighlightedResults();
                    0 !== e.length && e.trigger("mouseup");
                  }),
                  t.on("results:select", function () {
                    var e = n.getHighlightedResults();
                    if (0 !== e.length) {
                      var t = e.data("data");
                      "true" == e.attr("aria-selected")
                        ? n.trigger("close", {})
                        : n.trigger("select", {
                            data: t,
                          });
                    }
                  }),
                  t.on("results:previous", function () {
                    var e = n.getHighlightedResults(),
                      t = n.$results.find("[aria-selected]"),
                      o = t.index(e);
                    if (0 !== o) {
                      var i = o - 1;
                      0 === e.length && (i = 0);
                      var r = t.eq(i);
                      r.trigger("mouseenter");
                      var a = n.$results.offset().top,
                        s = r.offset().top,
                        l = n.$results.scrollTop() + (s - a);
                      0 === i
                        ? n.$results.scrollTop(0)
                        : s - a < 0 && n.$results.scrollTop(l);
                    }
                  }),
                  t.on("results:next", function () {
                    var e = n.getHighlightedResults(),
                      t = n.$results.find("[aria-selected]"),
                      o = t.index(e) + 1;
                    if (!(o >= t.length)) {
                      var i = t.eq(o);
                      i.trigger("mouseenter");
                      var r =
                          n.$results.offset().top + n.$results.outerHeight(!1),
                        a = i.offset().top + i.outerHeight(!1),
                        s = n.$results.scrollTop() + a - r;
                      0 === o
                        ? n.$results.scrollTop(0)
                        : a > r && n.$results.scrollTop(s);
                    }
                  }),
                  t.on("results:focus", function (e) {
                    e.element.addClass("select2-results__option--highlighted");
                  }),
                  t.on("results:message", function (e) {
                    n.displayMessage(e);
                  }),
                  e.fn.mousewheel &&
                    this.$results.on("mousewheel", function (e) {
                      var t = n.$results.scrollTop(),
                        o = n.$results.get(0).scrollHeight - t + e.deltaY,
                        i = e.deltaY > 0 && t - e.deltaY <= 0,
                        r = e.deltaY < 0 && o <= n.$results.height();
                      i
                        ? (n.$results.scrollTop(0),
                          e.preventDefault(),
                          e.stopPropagation())
                        : r &&
                          (n.$results.scrollTop(
                            n.$results.get(0).scrollHeight - n.$results.height()
                          ),
                          e.preventDefault(),
                          e.stopPropagation());
                    }),
                  this.$results.on(
                    "mouseup",
                    ".select2-results__option[aria-selected]",
                    function (t) {
                      var o = e(this),
                        i = o.data("data");
                      "true" !== o.attr("aria-selected")
                        ? n.trigger("select", {
                            originalEvent: t,
                            data: i,
                          })
                        : n.options.get("multiple")
                        ? n.trigger("unselect", {
                            originalEvent: t,
                            data: i,
                          })
                        : n.trigger("close", {});
                    }
                  ),
                  this.$results.on(
                    "mouseenter",
                    ".select2-results__option[aria-selected]",
                    function () {
                      var t = e(this).data("data");
                      n
                        .getHighlightedResults()
                        .removeClass("select2-results__option--highlighted"),
                        n.trigger("results:focus", {
                          data: t,
                          element: e(this),
                        });
                    }
                  );
              }),
              (n.prototype.getHighlightedResults = function () {
                return this.$results.find(
                  ".select2-results__option--highlighted"
                );
              }),
              (n.prototype.destroy = function () {
                this.$results.remove();
              }),
              (n.prototype.ensureHighlightVisible = function () {
                var e = this.getHighlightedResults();
                if (0 !== e.length) {
                  var t = this.$results.find("[aria-selected]").index(e),
                    n = this.$results.offset().top,
                    o = e.offset().top,
                    i = this.$results.scrollTop() + (o - n),
                    r = o - n;
                  (i -= 2 * e.outerHeight(!1)),
                    t <= 2
                      ? this.$results.scrollTop(0)
                      : (r > this.$results.outerHeight() || r < 0) &&
                        this.$results.scrollTop(i);
                }
              }),
              (n.prototype.template = function (t, n) {
                var o = this.options.get("templateResult"),
                  i = this.options.get("escapeMarkup"),
                  r = o(t, n);
                null == r
                  ? (n.style.display = "none")
                  : "string" == typeof r
                  ? (n.innerHTML = i(r))
                  : e(n).append(r);
              }),
              n
            );
          }),
          t.define("select2/keys", [], function () {
            return {
              BACKSPACE: 8,
              TAB: 9,
              ENTER: 13,
              SHIFT: 16,
              CTRL: 17,
              ALT: 18,
              ESC: 27,
              SPACE: 32,
              PAGE_UP: 33,
              PAGE_DOWN: 34,
              END: 35,
              HOME: 36,
              LEFT: 37,
              UP: 38,
              RIGHT: 39,
              DOWN: 40,
              DELETE: 46,
            };
          }),
          t.define(
            "select2/selection/base",
            ["jquery", "../utils", "../keys"],
            function (e, t, n) {
              function o(e, t) {
                (this.$element = e),
                  (this.options = t),
                  o.__super__.constructor.call(this);
              }
              return (
                t.Extend(o, t.Observable),
                (o.prototype.render = function () {
                  var t = e(
                    '<span class="select2-selection" role="combobox"  aria-haspopup="true" aria-expanded="false"></span>'
                  );
                  return (
                    (this._tabindex = 0),
                    null != this.$element.data("old-tabindex")
                      ? (this._tabindex = this.$element.data("old-tabindex"))
                      : null != this.$element.attr("tabindex") &&
                        (this._tabindex = this.$element.attr("tabindex")),
                    t.attr("title", this.$element.attr("title")),
                    t.attr("tabindex", this._tabindex),
                    (this.$selection = t),
                    t
                  );
                }),
                (o.prototype.bind = function (e) {
                  var t = this,
                    o = (e.id, e.id + "-results");
                  (this.container = e),
                    this.$selection.on("focus", function (e) {
                      t.trigger("focus", e);
                    }),
                    this.$selection.on("blur", function (e) {
                      t._handleBlur(e);
                    }),
                    this.$selection.on("keydown", function (e) {
                      t.trigger("keypress", e),
                        e.which === n.SPACE && e.preventDefault();
                    }),
                    e.on("results:focus", function (e) {
                      t.$selection.attr(
                        "aria-activedescendant",
                        e.data._resultId
                      );
                    }),
                    e.on("selection:update", function (e) {
                      t.update(e.data);
                    }),
                    e.on("open", function () {
                      t.$selection.attr("aria-expanded", "true"),
                        t.$selection.attr("aria-owns", o),
                        t._attachCloseHandler(e);
                    }),
                    e.on("close", function () {
                      t.$selection.attr("aria-expanded", "false"),
                        t.$selection.removeAttr("aria-activedescendant"),
                        t.$selection.removeAttr("aria-owns"),
                        t.$selection.focus(),
                        t._detachCloseHandler(e);
                    }),
                    e.on("enable", function () {
                      t.$selection.attr("tabindex", t._tabindex);
                    }),
                    e.on("disable", function () {
                      t.$selection.attr("tabindex", "-1");
                    });
                }),
                (o.prototype._handleBlur = function (t) {
                  var n = this;
                  window.setTimeout(function () {
                    document.activeElement == n.$selection[0] ||
                      e.contains(n.$selection[0], document.activeElement) ||
                      n.trigger("blur", t);
                  }, 1);
                }),
                (o.prototype._attachCloseHandler = function (t) {
                  e(document.body).on(
                    "mousedown.select2." + t.id,
                    function (t) {
                      var n = e(t.target).closest(".select2");
                      e(".select2.select2-container--open").each(function () {
                        var t = e(this);
                        this != n[0] && t.data("element").select2("close");
                      });
                    }
                  );
                }),
                (o.prototype._detachCloseHandler = function (t) {
                  e(document.body).off("mousedown.select2." + t.id);
                }),
                (o.prototype.position = function (e, t) {
                  t.find(".selection").append(e);
                }),
                (o.prototype.destroy = function () {
                  this._detachCloseHandler(this.container);
                }),
                (o.prototype.update = function () {
                  throw new Error(
                    "The `update` method must be defined in child classes."
                  );
                }),
                o
              );
            }
          ),
          t.define(
            "select2/selection/single",
            ["jquery", "./base", "../utils", "../keys"],
            function (e, t, n) {
              function o() {
                o.__super__.constructor.apply(this, arguments);
              }
              return (
                n.Extend(o, t),
                (o.prototype.render = function () {
                  var e = o.__super__.render.call(this);
                  return (
                    e.addClass("select2-selection--single"),
                    e.html(
                      '<span class="select2-selection__rendered"></span><span class="select2-selection__arrow" role="presentation"><b role="presentation"></b></span>'
                    ),
                    e
                  );
                }),
                (o.prototype.bind = function (e, t) {
                  var n = this;
                  o.__super__.bind.apply(this, arguments);
                  var i = e.id + "-container";
                  this.$selection
                    .find(".select2-selection__rendered")
                    .attr("id", i),
                    this.$selection.attr("aria-labelledby", i),
                    this.$selection.on("mousedown", function (e) {
                      1 === e.which &&
                        n.trigger("toggle", {
                          originalEvent: e,
                        });
                    }),
                    this.$selection.on("focus", function () {}),
                    this.$selection.on("blur", function () {}),
                    e.on("focus", function () {
                      e.isOpen() || n.$selection.focus();
                    }),
                    e.on("selection:update", function (e) {
                      n.update(e.data);
                    });
                }),
                (o.prototype.clear = function () {
                  this.$selection.find(".select2-selection__rendered").empty();
                }),
                (o.prototype.display = function (e, t) {
                  var n = this.options.get("templateSelection");
                  return this.options.get("escapeMarkup")(n(e, t));
                }),
                (o.prototype.selectionContainer = function () {
                  return e("<span></span>");
                }),
                (o.prototype.update = function (e) {
                  if (0 !== e.length) {
                    var t = e[0],
                      n = this.$selection.find(".select2-selection__rendered"),
                      o = this.display(t, n);
                    n.empty().append(o), n.prop("title", t.title || t.text);
                  } else this.clear();
                }),
                o
              );
            }
          ),
          t.define(
            "select2/selection/multiple",
            ["jquery", "./base", "../utils"],
            function (e, t, n) {
              function o(e, t) {
                o.__super__.constructor.apply(this, arguments);
              }
              return (
                n.Extend(o, t),
                (o.prototype.render = function () {
                  var e = o.__super__.render.call(this);
                  return (
                    e.addClass("select2-selection--multiple"),
                    e.html('<ul class="select2-selection__rendered"></ul>'),
                    e
                  );
                }),
                (o.prototype.bind = function (t, n) {
                  var i = this;
                  o.__super__.bind.apply(this, arguments),
                    this.$selection.on("click", function (e) {
                      i.trigger("toggle", {
                        originalEvent: e,
                      });
                    }),
                    this.$selection.on(
                      "click",
                      ".select2-selection__choice__remove",
                      function (t) {
                        if (!i.options.get("disabled")) {
                          var n = e(this).parent().data("data");
                          i.trigger("unselect", {
                            originalEvent: t,
                            data: n,
                          });
                        }
                      }
                    );
                }),
                (o.prototype.clear = function () {
                  this.$selection.find(".select2-selection__rendered").empty();
                }),
                (o.prototype.display = function (e, t) {
                  var n = this.options.get("templateSelection");
                  return this.options.get("escapeMarkup")(n(e, t));
                }),
                (o.prototype.selectionContainer = function () {
                  return e(
                    '<li class="select2-selection__choice"><span class="select2-selection__choice__remove" role="presentation">&times;</span></li>'
                  );
                }),
                (o.prototype.update = function (e) {
                  if ((this.clear(), 0 !== e.length)) {
                    for (var t = [], o = 0; o < e.length; o++) {
                      var i = e[o],
                        r = this.selectionContainer(),
                        a = this.display(i, r);
                      r.append(a),
                        r.prop("title", i.title || i.text),
                        r.data("data", i),
                        t.push(r);
                    }
                    var s = this.$selection.find(
                      ".select2-selection__rendered"
                    );
                    n.appendMany(s, t);
                  }
                }),
                o
              );
            }
          ),
          t.define("select2/selection/placeholder", ["../utils"], function () {
            function e(e, t, n) {
              (this.placeholder = this.normalizePlaceholder(
                n.get("placeholder")
              )),
                e.call(this, t, n);
            }
            return (
              (e.prototype.normalizePlaceholder = function (e, t) {
                return (
                  "string" == typeof t &&
                    (t = {
                      id: "",
                      text: t,
                    }),
                  t
                );
              }),
              (e.prototype.createPlaceholder = function (e, t) {
                var n = this.selectionContainer();
                return (
                  n.html(this.display(t)),
                  n
                    .addClass("select2-selection__placeholder")
                    .removeClass("select2-selection__choice"),
                  n
                );
              }),
              (e.prototype.update = function (e, t) {
                var n = 1 == t.length && t[0].id != this.placeholder.id;
                if (t.length > 1 || n) return e.call(this, t);
                this.clear();
                var o = this.createPlaceholder(this.placeholder);
                this.$selection.find(".select2-selection__rendered").append(o);
              }),
              e
            );
          }),
          t.define(
            "select2/selection/allowClear",
            ["jquery", "../keys"],
            function (e, t) {
              function n() {}
              return (
                (n.prototype.bind = function (e, t, n) {
                  var o = this;
                  e.call(this, t, n),
                    null == this.placeholder &&
                      this.options.get("debug") &&
                      window.console &&
                      console.error &&
                      console.error(
                        "Select2: The `allowClear` option should be used in combination with the `placeholder` option."
                      ),
                    this.$selection.on(
                      "mousedown",
                      ".select2-selection__clear",
                      function (e) {
                        o._handleClear(e);
                      }
                    ),
                    t.on("keypress", function (e) {
                      o._handleKeyboardClear(e, t);
                    });
                }),
                (n.prototype._handleClear = function (e, t) {
                  if (!this.options.get("disabled")) {
                    var n = this.$selection.find(".select2-selection__clear");
                    if (0 !== n.length) {
                      t.stopPropagation();
                      for (var o = n.data("data"), i = 0; i < o.length; i++) {
                        var r = {
                          data: o[i],
                        };
                        if ((this.trigger("unselect", r), r.prevented)) return;
                      }
                      this.$element.val(this.placeholder.id).trigger("change"),
                        this.trigger("toggle", {});
                    }
                  }
                }),
                (n.prototype._handleKeyboardClear = function (e, n, o) {
                  o.isOpen() ||
                    (n.which != t.DELETE && n.which != t.BACKSPACE) ||
                    this._handleClear(n);
                }),
                (n.prototype.update = function (t, n) {
                  if (
                    (t.call(this, n),
                    !(
                      this.$selection.find(".select2-selection__placeholder")
                        .length > 0 || 0 === n.length
                    ))
                  ) {
                    var o = e(
                      '<span class="select2-selection__clear">&times;</span>'
                    );
                    o.data("data", n),
                      this.$selection
                        .find(".select2-selection__rendered")
                        .prepend(o);
                  }
                }),
                n
              );
            }
          ),
          t.define(
            "select2/selection/search",
            ["jquery", "../utils", "../keys"],
            function (e, t, n) {
              function o(e, t, n) {
                e.call(this, t, n);
              }
              return (
                (o.prototype.render = function (t) {
                  var n = e(
                    '<li class="select2-search select2-search--inline"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" role="textbox" aria-autocomplete="list" /></li>'
                  );
                  (this.$searchContainer = n), (this.$search = n.find("input"));
                  var o = t.call(this);
                  return this._transferTabIndex(), o;
                }),
                (o.prototype.bind = function (e, t, o) {
                  var i = this;
                  e.call(this, t, o),
                    t.on("open", function () {
                      i.$search.trigger("focus");
                    }),
                    t.on("close", function () {
                      i.$search.val(""),
                        i.$search.removeAttr("aria-activedescendant"),
                        i.$search.trigger("focus");
                    }),
                    t.on("enable", function () {
                      i.$search.prop("disabled", !1), i._transferTabIndex();
                    }),
                    t.on("disable", function () {
                      i.$search.prop("disabled", !0);
                    }),
                    t.on("focus", function () {
                      i.$search.trigger("focus");
                    }),
                    t.on("results:focus", function (e) {
                      i.$search.attr("aria-activedescendant", e.id);
                    }),
                    this.$selection.on(
                      "focusin",
                      ".select2-search--inline",
                      function (e) {
                        i.trigger("focus", e);
                      }
                    ),
                    this.$selection.on(
                      "focusout",
                      ".select2-search--inline",
                      function (e) {
                        i._handleBlur(e);
                      }
                    ),
                    this.$selection.on(
                      "keydown",
                      ".select2-search--inline",
                      function (e) {
                        if (
                          (e.stopPropagation(),
                          i.trigger("keypress", e),
                          (i._keyUpPrevented = e.isDefaultPrevented()),
                          e.which === n.BACKSPACE && "" === i.$search.val())
                        ) {
                          var t = i.$searchContainer.prev(
                            ".select2-selection__choice"
                          );
                          if (t.length > 0) {
                            var o = t.data("data");
                            i.searchRemoveChoice(o), e.preventDefault();
                          }
                        }
                      }
                    );
                  var r = document.documentMode,
                    a = r && r <= 11;
                  this.$selection.on(
                    "input.searchcheck",
                    ".select2-search--inline",
                    function () {
                      a
                        ? i.$selection.off("input.search input.searchcheck")
                        : i.$selection.off("keyup.search");
                    }
                  ),
                    this.$selection.on(
                      "keyup.search input.search",
                      ".select2-search--inline",
                      function (e) {
                        if (a && "input" === e.type)
                          i.$selection.off("input.search input.searchcheck");
                        else {
                          var t = e.which;
                          t != n.SHIFT &&
                            t != n.CTRL &&
                            t != n.ALT &&
                            t != n.TAB &&
                            i.handleSearch(e);
                        }
                      }
                    );
                }),
                (o.prototype._transferTabIndex = function () {
                  this.$search.attr(
                    "tabindex",
                    this.$selection.attr("tabindex")
                  ),
                    this.$selection.attr("tabindex", "-1");
                }),
                (o.prototype.createPlaceholder = function (e, t) {
                  this.$search.attr("placeholder", t.text);
                }),
                (o.prototype.update = function (e, t) {
                  var n = this.$search[0] == document.activeElement;
                  this.$search.attr("placeholder", ""),
                    e.call(this, t),
                    this.$selection
                      .find(".select2-selection__rendered")
                      .append(this.$searchContainer),
                    this.resizeSearch(),
                    n && this.$search.focus();
                }),
                (o.prototype.handleSearch = function () {
                  if ((this.resizeSearch(), !this._keyUpPrevented)) {
                    var e = this.$search.val();
                    this.trigger("query", {
                      term: e,
                    });
                  }
                  this._keyUpPrevented = !1;
                }),
                (o.prototype.searchRemoveChoice = function (e, t) {
                  this.trigger("unselect", {
                    data: t,
                  }),
                    this.$search.val(t.text),
                    this.handleSearch();
                }),
                (o.prototype.resizeSearch = function () {
                  this.$search.css("width", "25px");
                  var e = "";
                  "" !== this.$search.attr("placeholder")
                    ? (e = this.$selection
                        .find(".select2-selection__rendered")
                        .innerWidth())
                    : (e = 0.75 * (this.$search.val().length + 1) + "em");
                  this.$search.css("width", e);
                }),
                o
              );
            }
          ),
          t.define("select2/selection/eventRelay", ["jquery"], function (e) {
            function t() {}
            return (
              (t.prototype.bind = function (t, n, o) {
                var i = this,
                  r = [
                    "open",
                    "opening",
                    "close",
                    "closing",
                    "select",
                    "selecting",
                    "unselect",
                    "unselecting",
                  ],
                  a = ["opening", "closing", "selecting", "unselecting"];
                t.call(this, n, o),
                  n.on("*", function (t, n) {
                    if (-1 !== e.inArray(t, r)) {
                      n = n || {};
                      var o = e.Event("select2:" + t, {
                        params: n,
                      });
                      i.$element.trigger(o),
                        -1 !== e.inArray(t, a) &&
                          (n.prevented = o.isDefaultPrevented());
                    }
                  });
              }),
              t
            );
          }),
          t.define(
            "select2/translation",
            ["jquery", "require"],
            function (e, t) {
              function n(e) {
                this.dict = e || {};
              }
              return (
                (n.prototype.all = function () {
                  return this.dict;
                }),
                (n.prototype.get = function (e) {
                  return this.dict[e];
                }),
                (n.prototype.extend = function (t) {
                  this.dict = e.extend({}, t.all(), this.dict);
                }),
                (n._cache = {}),
                (n.loadPath = function (e) {
                  if (!(e in n._cache)) {
                    var o = t(e);
                    n._cache[e] = o;
                  }
                  return new n(n._cache[e]);
                }),
                n
              );
            }
          ),
          t.define("select2/diacritics", [], function () {
            return {
              "\u24b6": "A",
              "\uff21": "A",
              "\xc0": "A",
              "\xc1": "A",
              "\xc2": "A",
              "\u1ea6": "A",
              "\u1ea4": "A",
              "\u1eaa": "A",
              "\u1ea8": "A",
              "\xc3": "A",
              "\u0100": "A",
              "\u0102": "A",
              "\u1eb0": "A",
              "\u1eae": "A",
              "\u1eb4": "A",
              "\u1eb2": "A",
              "\u0226": "A",
              "\u01e0": "A",
              "\xc4": "A",
              "\u01de": "A",
              "\u1ea2": "A",
              "\xc5": "A",
              "\u01fa": "A",
              "\u01cd": "A",
              "\u0200": "A",
              "\u0202": "A",
              "\u1ea0": "A",
              "\u1eac": "A",
              "\u1eb6": "A",
              "\u1e00": "A",
              "\u0104": "A",
              "\u023a": "A",
              "\u2c6f": "A",
              "\ua732": "AA",
              "\xc6": "AE",
              "\u01fc": "AE",
              "\u01e2": "AE",
              "\ua734": "AO",
              "\ua736": "AU",
              "\ua738": "AV",
              "\ua73a": "AV",
              "\ua73c": "AY",
              "\u24b7": "B",
              "\uff22": "B",
              "\u1e02": "B",
              "\u1e04": "B",
              "\u1e06": "B",
              "\u0243": "B",
              "\u0182": "B",
              "\u0181": "B",
              "\u24b8": "C",
              "\uff23": "C",
              "\u0106": "C",
              "\u0108": "C",
              "\u010a": "C",
              "\u010c": "C",
              "\xc7": "C",
              "\u1e08": "C",
              "\u0187": "C",
              "\u023b": "C",
              "\ua73e": "C",
              "\u24b9": "D",
              "\uff24": "D",
              "\u1e0a": "D",
              "\u010e": "D",
              "\u1e0c": "D",
              "\u1e10": "D",
              "\u1e12": "D",
              "\u1e0e": "D",
              "\u0110": "D",
              "\u018b": "D",
              "\u018a": "D",
              "\u0189": "D",
              "\ua779": "D",
              "\u01f1": "DZ",
              "\u01c4": "DZ",
              "\u01f2": "Dz",
              "\u01c5": "Dz",
              "\u24ba": "E",
              "\uff25": "E",
              "\xc8": "E",
              "\xc9": "E",
              "\xca": "E",
              "\u1ec0": "E",
              "\u1ebe": "E",
              "\u1ec4": "E",
              "\u1ec2": "E",
              "\u1ebc": "E",
              "\u0112": "E",
              "\u1e14": "E",
              "\u1e16": "E",
              "\u0114": "E",
              "\u0116": "E",
              "\xcb": "E",
              "\u1eba": "E",
              "\u011a": "E",
              "\u0204": "E",
              "\u0206": "E",
              "\u1eb8": "E",
              "\u1ec6": "E",
              "\u0228": "E",
              "\u1e1c": "E",
              "\u0118": "E",
              "\u1e18": "E",
              "\u1e1a": "E",
              "\u0190": "E",
              "\u018e": "E",
              "\u24bb": "F",
              "\uff26": "F",
              "\u1e1e": "F",
              "\u0191": "F",
              "\ua77b": "F",
              "\u24bc": "G",
              "\uff27": "G",
              "\u01f4": "G",
              "\u011c": "G",
              "\u1e20": "G",
              "\u011e": "G",
              "\u0120": "G",
              "\u01e6": "G",
              "\u0122": "G",
              "\u01e4": "G",
              "\u0193": "G",
              "\ua7a0": "G",
              "\ua77d": "G",
              "\ua77e": "G",
              "\u24bd": "H",
              "\uff28": "H",
              "\u0124": "H",
              "\u1e22": "H",
              "\u1e26": "H",
              "\u021e": "H",
              "\u1e24": "H",
              "\u1e28": "H",
              "\u1e2a": "H",
              "\u0126": "H",
              "\u2c67": "H",
              "\u2c75": "H",
              "\ua78d": "H",
              "\u24be": "I",
              "\uff29": "I",
              "\xcc": "I",
              "\xcd": "I",
              "\xce": "I",
              "\u0128": "I",
              "\u012a": "I",
              "\u012c": "I",
              "\u0130": "I",
              "\xcf": "I",
              "\u1e2e": "I",
              "\u1ec8": "I",
              "\u01cf": "I",
              "\u0208": "I",
              "\u020a": "I",
              "\u1eca": "I",
              "\u012e": "I",
              "\u1e2c": "I",
              "\u0197": "I",
              "\u24bf": "J",
              "\uff2a": "J",
              "\u0134": "J",
              "\u0248": "J",
              "\u24c0": "K",
              "\uff2b": "K",
              "\u1e30": "K",
              "\u01e8": "K",
              "\u1e32": "K",
              "\u0136": "K",
              "\u1e34": "K",
              "\u0198": "K",
              "\u2c69": "K",
              "\ua740": "K",
              "\ua742": "K",
              "\ua744": "K",
              "\ua7a2": "K",
              "\u24c1": "L",
              "\uff2c": "L",
              "\u013f": "L",
              "\u0139": "L",
              "\u013d": "L",
              "\u1e36": "L",
              "\u1e38": "L",
              "\u013b": "L",
              "\u1e3c": "L",
              "\u1e3a": "L",
              "\u0141": "L",
              "\u023d": "L",
              "\u2c62": "L",
              "\u2c60": "L",
              "\ua748": "L",
              "\ua746": "L",
              "\ua780": "L",
              "\u01c7": "LJ",
              "\u01c8": "Lj",
              "\u24c2": "M",
              "\uff2d": "M",
              "\u1e3e": "M",
              "\u1e40": "M",
              "\u1e42": "M",
              "\u2c6e": "M",
              "\u019c": "M",
              "\u24c3": "N",
              "\uff2e": "N",
              "\u01f8": "N",
              "\u0143": "N",
              "\xd1": "N",
              "\u1e44": "N",
              "\u0147": "N",
              "\u1e46": "N",
              "\u0145": "N",
              "\u1e4a": "N",
              "\u1e48": "N",
              "\u0220": "N",
              "\u019d": "N",
              "\ua790": "N",
              "\ua7a4": "N",
              "\u01ca": "NJ",
              "\u01cb": "Nj",
              "\u24c4": "O",
              "\uff2f": "O",
              "\xd2": "O",
              "\xd3": "O",
              "\xd4": "O",
              "\u1ed2": "O",
              "\u1ed0": "O",
              "\u1ed6": "O",
              "\u1ed4": "O",
              "\xd5": "O",
              "\u1e4c": "O",
              "\u022c": "O",
              "\u1e4e": "O",
              "\u014c": "O",
              "\u1e50": "O",
              "\u1e52": "O",
              "\u014e": "O",
              "\u022e": "O",
              "\u0230": "O",
              "\xd6": "O",
              "\u022a": "O",
              "\u1ece": "O",
              "\u0150": "O",
              "\u01d1": "O",
              "\u020c": "O",
              "\u020e": "O",
              "\u01a0": "O",
              "\u1edc": "O",
              "\u1eda": "O",
              "\u1ee0": "O",
              "\u1ede": "O",
              "\u1ee2": "O",
              "\u1ecc": "O",
              "\u1ed8": "O",
              "\u01ea": "O",
              "\u01ec": "O",
              "\xd8": "O",
              "\u01fe": "O",
              "\u0186": "O",
              "\u019f": "O",
              "\ua74a": "O",
              "\ua74c": "O",
              "\u01a2": "OI",
              "\ua74e": "OO",
              "\u0222": "OU",
              "\u24c5": "P",
              "\uff30": "P",
              "\u1e54": "P",
              "\u1e56": "P",
              "\u01a4": "P",
              "\u2c63": "P",
              "\ua750": "P",
              "\ua752": "P",
              "\ua754": "P",
              "\u24c6": "Q",
              "\uff31": "Q",
              "\ua756": "Q",
              "\ua758": "Q",
              "\u024a": "Q",
              "\u24c7": "R",
              "\uff32": "R",
              "\u0154": "R",
              "\u1e58": "R",
              "\u0158": "R",
              "\u0210": "R",
              "\u0212": "R",
              "\u1e5a": "R",
              "\u1e5c": "R",
              "\u0156": "R",
              "\u1e5e": "R",
              "\u024c": "R",
              "\u2c64": "R",
              "\ua75a": "R",
              "\ua7a6": "R",
              "\ua782": "R",
              "\u24c8": "S",
              "\uff33": "S",
              "\u1e9e": "S",
              "\u015a": "S",
              "\u1e64": "S",
              "\u015c": "S",
              "\u1e60": "S",
              "\u0160": "S",
              "\u1e66": "S",
              "\u1e62": "S",
              "\u1e68": "S",
              "\u0218": "S",
              "\u015e": "S",
              "\u2c7e": "S",
              "\ua7a8": "S",
              "\ua784": "S",
              "\u24c9": "T",
              "\uff34": "T",
              "\u1e6a": "T",
              "\u0164": "T",
              "\u1e6c": "T",
              "\u021a": "T",
              "\u0162": "T",
              "\u1e70": "T",
              "\u1e6e": "T",
              "\u0166": "T",
              "\u01ac": "T",
              "\u01ae": "T",
              "\u023e": "T",
              "\ua786": "T",
              "\ua728": "TZ",
              "\u24ca": "U",
              "\uff35": "U",
              "\xd9": "U",
              "\xda": "U",
              "\xdb": "U",
              "\u0168": "U",
              "\u1e78": "U",
              "\u016a": "U",
              "\u1e7a": "U",
              "\u016c": "U",
              "\xdc": "U",
              "\u01db": "U",
              "\u01d7": "U",
              "\u01d5": "U",
              "\u01d9": "U",
              "\u1ee6": "U",
              "\u016e": "U",
              "\u0170": "U",
              "\u01d3": "U",
              "\u0214": "U",
              "\u0216": "U",
              "\u01af": "U",
              "\u1eea": "U",
              "\u1ee8": "U",
              "\u1eee": "U",
              "\u1eec": "U",
              "\u1ef0": "U",
              "\u1ee4": "U",
              "\u1e72": "U",
              "\u0172": "U",
              "\u1e76": "U",
              "\u1e74": "U",
              "\u0244": "U",
              "\u24cb": "V",
              "\uff36": "V",
              "\u1e7c": "V",
              "\u1e7e": "V",
              "\u01b2": "V",
              "\ua75e": "V",
              "\u0245": "V",
              "\ua760": "VY",
              "\u24cc": "W",
              "\uff37": "W",
              "\u1e80": "W",
              "\u1e82": "W",
              "\u0174": "W",
              "\u1e86": "W",
              "\u1e84": "W",
              "\u1e88": "W",
              "\u2c72": "W",
              "\u24cd": "X",
              "\uff38": "X",
              "\u1e8a": "X",
              "\u1e8c": "X",
              "\u24ce": "Y",
              "\uff39": "Y",
              "\u1ef2": "Y",
              "\xdd": "Y",
              "\u0176": "Y",
              "\u1ef8": "Y",
              "\u0232": "Y",
              "\u1e8e": "Y",
              "\u0178": "Y",
              "\u1ef6": "Y",
              "\u1ef4": "Y",
              "\u01b3": "Y",
              "\u024e": "Y",
              "\u1efe": "Y",
              "\u24cf": "Z",
              "\uff3a": "Z",
              "\u0179": "Z",
              "\u1e90": "Z",
              "\u017b": "Z",
              "\u017d": "Z",
              "\u1e92": "Z",
              "\u1e94": "Z",
              "\u01b5": "Z",
              "\u0224": "Z",
              "\u2c7f": "Z",
              "\u2c6b": "Z",
              "\ua762": "Z",
              "\u24d0": "a",
              "\uff41": "a",
              "\u1e9a": "a",
              "\xe0": "a",
              "\xe1": "a",
              "\xe2": "a",
              "\u1ea7": "a",
              "\u1ea5": "a",
              "\u1eab": "a",
              "\u1ea9": "a",
              "\xe3": "a",
              "\u0101": "a",
              "\u0103": "a",
              "\u1eb1": "a",
              "\u1eaf": "a",
              "\u1eb5": "a",
              "\u1eb3": "a",
              "\u0227": "a",
              "\u01e1": "a",
              "\xe4": "a",
              "\u01df": "a",
              "\u1ea3": "a",
              "\xe5": "a",
              "\u01fb": "a",
              "\u01ce": "a",
              "\u0201": "a",
              "\u0203": "a",
              "\u1ea1": "a",
              "\u1ead": "a",
              "\u1eb7": "a",
              "\u1e01": "a",
              "\u0105": "a",
              "\u2c65": "a",
              "\u0250": "a",
              "\ua733": "aa",
              "\xe6": "ae",
              "\u01fd": "ae",
              "\u01e3": "ae",
              "\ua735": "ao",
              "\ua737": "au",
              "\ua739": "av",
              "\ua73b": "av",
              "\ua73d": "ay",
              "\u24d1": "b",
              "\uff42": "b",
              "\u1e03": "b",
              "\u1e05": "b",
              "\u1e07": "b",
              "\u0180": "b",
              "\u0183": "b",
              "\u0253": "b",
              "\u24d2": "c",
              "\uff43": "c",
              "\u0107": "c",
              "\u0109": "c",
              "\u010b": "c",
              "\u010d": "c",
              "\xe7": "c",
              "\u1e09": "c",
              "\u0188": "c",
              "\u023c": "c",
              "\ua73f": "c",
              "\u2184": "c",
              "\u24d3": "d",
              "\uff44": "d",
              "\u1e0b": "d",
              "\u010f": "d",
              "\u1e0d": "d",
              "\u1e11": "d",
              "\u1e13": "d",
              "\u1e0f": "d",
              "\u0111": "d",
              "\u018c": "d",
              "\u0256": "d",
              "\u0257": "d",
              "\ua77a": "d",
              "\u01f3": "dz",
              "\u01c6": "dz",
              "\u24d4": "e",
              "\uff45": "e",
              "\xe8": "e",
              "\xe9": "e",
              "\xea": "e",
              "\u1ec1": "e",
              "\u1ebf": "e",
              "\u1ec5": "e",
              "\u1ec3": "e",
              "\u1ebd": "e",
              "\u0113": "e",
              "\u1e15": "e",
              "\u1e17": "e",
              "\u0115": "e",
              "\u0117": "e",
              "\xeb": "e",
              "\u1ebb": "e",
              "\u011b": "e",
              "\u0205": "e",
              "\u0207": "e",
              "\u1eb9": "e",
              "\u1ec7": "e",
              "\u0229": "e",
              "\u1e1d": "e",
              "\u0119": "e",
              "\u1e19": "e",
              "\u1e1b": "e",
              "\u0247": "e",
              "\u025b": "e",
              "\u01dd": "e",
              "\u24d5": "f",
              "\uff46": "f",
              "\u1e1f": "f",
              "\u0192": "f",
              "\ua77c": "f",
              "\u24d6": "g",
              "\uff47": "g",
              "\u01f5": "g",
              "\u011d": "g",
              "\u1e21": "g",
              "\u011f": "g",
              "\u0121": "g",
              "\u01e7": "g",
              "\u0123": "g",
              "\u01e5": "g",
              "\u0260": "g",
              "\ua7a1": "g",
              "\u1d79": "g",
              "\ua77f": "g",
              "\u24d7": "h",
              "\uff48": "h",
              "\u0125": "h",
              "\u1e23": "h",
              "\u1e27": "h",
              "\u021f": "h",
              "\u1e25": "h",
              "\u1e29": "h",
              "\u1e2b": "h",
              "\u1e96": "h",
              "\u0127": "h",
              "\u2c68": "h",
              "\u2c76": "h",
              "\u0265": "h",
              "\u0195": "hv",
              "\u24d8": "i",
              "\uff49": "i",
              "\xec": "i",
              "\xed": "i",
              "\xee": "i",
              "\u0129": "i",
              "\u012b": "i",
              "\u012d": "i",
              "\xef": "i",
              "\u1e2f": "i",
              "\u1ec9": "i",
              "\u01d0": "i",
              "\u0209": "i",
              "\u020b": "i",
              "\u1ecb": "i",
              "\u012f": "i",
              "\u1e2d": "i",
              "\u0268": "i",
              "\u0131": "i",
              "\u24d9": "j",
              "\uff4a": "j",
              "\u0135": "j",
              "\u01f0": "j",
              "\u0249": "j",
              "\u24da": "k",
              "\uff4b": "k",
              "\u1e31": "k",
              "\u01e9": "k",
              "\u1e33": "k",
              "\u0137": "k",
              "\u1e35": "k",
              "\u0199": "k",
              "\u2c6a": "k",
              "\ua741": "k",
              "\ua743": "k",
              "\ua745": "k",
              "\ua7a3": "k",
              "\u24db": "l",
              "\uff4c": "l",
              "\u0140": "l",
              "\u013a": "l",
              "\u013e": "l",
              "\u1e37": "l",
              "\u1e39": "l",
              "\u013c": "l",
              "\u1e3d": "l",
              "\u1e3b": "l",
              "\u017f": "l",
              "\u0142": "l",
              "\u019a": "l",
              "\u026b": "l",
              "\u2c61": "l",
              "\ua749": "l",
              "\ua781": "l",
              "\ua747": "l",
              "\u01c9": "lj",
              "\u24dc": "m",
              "\uff4d": "m",
              "\u1e3f": "m",
              "\u1e41": "m",
              "\u1e43": "m",
              "\u0271": "m",
              "\u026f": "m",
              "\u24dd": "n",
              "\uff4e": "n",
              "\u01f9": "n",
              "\u0144": "n",
              "\xf1": "n",
              "\u1e45": "n",
              "\u0148": "n",
              "\u1e47": "n",
              "\u0146": "n",
              "\u1e4b": "n",
              "\u1e49": "n",
              "\u019e": "n",
              "\u0272": "n",
              "\u0149": "n",
              "\ua791": "n",
              "\ua7a5": "n",
              "\u01cc": "nj",
              "\u24de": "o",
              "\uff4f": "o",
              "\xf2": "o",
              "\xf3": "o",
              "\xf4": "o",
              "\u1ed3": "o",
              "\u1ed1": "o",
              "\u1ed7": "o",
              "\u1ed5": "o",
              "\xf5": "o",
              "\u1e4d": "o",
              "\u022d": "o",
              "\u1e4f": "o",
              "\u014d": "o",
              "\u1e51": "o",
              "\u1e53": "o",
              "\u014f": "o",
              "\u022f": "o",
              "\u0231": "o",
              "\xf6": "o",
              "\u022b": "o",
              "\u1ecf": "o",
              "\u0151": "o",
              "\u01d2": "o",
              "\u020d": "o",
              "\u020f": "o",
              "\u01a1": "o",
              "\u1edd": "o",
              "\u1edb": "o",
              "\u1ee1": "o",
              "\u1edf": "o",
              "\u1ee3": "o",
              "\u1ecd": "o",
              "\u1ed9": "o",
              "\u01eb": "o",
              "\u01ed": "o",
              "\xf8": "o",
              "\u01ff": "o",
              "\u0254": "o",
              "\ua74b": "o",
              "\ua74d": "o",
              "\u0275": "o",
              "\u01a3": "oi",
              "\u0223": "ou",
              "\ua74f": "oo",
              "\u24df": "p",
              "\uff50": "p",
              "\u1e55": "p",
              "\u1e57": "p",
              "\u01a5": "p",
              "\u1d7d": "p",
              "\ua751": "p",
              "\ua753": "p",
              "\ua755": "p",
              "\u24e0": "q",
              "\uff51": "q",
              "\u024b": "q",
              "\ua757": "q",
              "\ua759": "q",
              "\u24e1": "r",
              "\uff52": "r",
              "\u0155": "r",
              "\u1e59": "r",
              "\u0159": "r",
              "\u0211": "r",
              "\u0213": "r",
              "\u1e5b": "r",
              "\u1e5d": "r",
              "\u0157": "r",
              "\u1e5f": "r",
              "\u024d": "r",
              "\u027d": "r",
              "\ua75b": "r",
              "\ua7a7": "r",
              "\ua783": "r",
              "\u24e2": "s",
              "\uff53": "s",
              "\xdf": "s",
              "\u015b": "s",
              "\u1e65": "s",
              "\u015d": "s",
              "\u1e61": "s",
              "\u0161": "s",
              "\u1e67": "s",
              "\u1e63": "s",
              "\u1e69": "s",
              "\u0219": "s",
              "\u015f": "s",
              "\u023f": "s",
              "\ua7a9": "s",
              "\ua785": "s",
              "\u1e9b": "s",
              "\u24e3": "t",
              "\uff54": "t",
              "\u1e6b": "t",
              "\u1e97": "t",
              "\u0165": "t",
              "\u1e6d": "t",
              "\u021b": "t",
              "\u0163": "t",
              "\u1e71": "t",
              "\u1e6f": "t",
              "\u0167": "t",
              "\u01ad": "t",
              "\u0288": "t",
              "\u2c66": "t",
              "\ua787": "t",
              "\ua729": "tz",
              "\u24e4": "u",
              "\uff55": "u",
              "\xf9": "u",
              "\xfa": "u",
              "\xfb": "u",
              "\u0169": "u",
              "\u1e79": "u",
              "\u016b": "u",
              "\u1e7b": "u",
              "\u016d": "u",
              "\xfc": "u",
              "\u01dc": "u",
              "\u01d8": "u",
              "\u01d6": "u",
              "\u01da": "u",
              "\u1ee7": "u",
              "\u016f": "u",
              "\u0171": "u",
              "\u01d4": "u",
              "\u0215": "u",
              "\u0217": "u",
              "\u01b0": "u",
              "\u1eeb": "u",
              "\u1ee9": "u",
              "\u1eef": "u",
              "\u1eed": "u",
              "\u1ef1": "u",
              "\u1ee5": "u",
              "\u1e73": "u",
              "\u0173": "u",
              "\u1e77": "u",
              "\u1e75": "u",
              "\u0289": "u",
              "\u24e5": "v",
              "\uff56": "v",
              "\u1e7d": "v",
              "\u1e7f": "v",
              "\u028b": "v",
              "\ua75f": "v",
              "\u028c": "v",
              "\ua761": "vy",
              "\u24e6": "w",
              "\uff57": "w",
              "\u1e81": "w",
              "\u1e83": "w",
              "\u0175": "w",
              "\u1e87": "w",
              "\u1e85": "w",
              "\u1e98": "w",
              "\u1e89": "w",
              "\u2c73": "w",
              "\u24e7": "x",
              "\uff58": "x",
              "\u1e8b": "x",
              "\u1e8d": "x",
              "\u24e8": "y",
              "\uff59": "y",
              "\u1ef3": "y",
              "\xfd": "y",
              "\u0177": "y",
              "\u1ef9": "y",
              "\u0233": "y",
              "\u1e8f": "y",
              "\xff": "y",
              "\u1ef7": "y",
              "\u1e99": "y",
              "\u1ef5": "y",
              "\u01b4": "y",
              "\u024f": "y",
              "\u1eff": "y",
              "\u24e9": "z",
              "\uff5a": "z",
              "\u017a": "z",
              "\u1e91": "z",
              "\u017c": "z",
              "\u017e": "z",
              "\u1e93": "z",
              "\u1e95": "z",
              "\u01b6": "z",
              "\u0225": "z",
              "\u0240": "z",
              "\u2c6c": "z",
              "\ua763": "z",
              "\u0386": "\u0391",
              "\u0388": "\u0395",
              "\u0389": "\u0397",
              "\u038a": "\u0399",
              "\u03aa": "\u0399",
              "\u038c": "\u039f",
              "\u038e": "\u03a5",
              "\u03ab": "\u03a5",
              "\u038f": "\u03a9",
              "\u03ac": "\u03b1",
              "\u03ad": "\u03b5",
              "\u03ae": "\u03b7",
              "\u03af": "\u03b9",
              "\u03ca": "\u03b9",
              "\u0390": "\u03b9",
              "\u03cc": "\u03bf",
              "\u03cd": "\u03c5",
              "\u03cb": "\u03c5",
              "\u03b0": "\u03c5",
              "\u03c9": "\u03c9",
              "\u03c2": "\u03c3",
            };
          }),
          t.define("select2/data/base", ["../utils"], function (e) {
            function t() {
              t.__super__.constructor.call(this);
            }
            return (
              e.Extend(t, e.Observable),
              (t.prototype.current = function () {
                throw new Error(
                  "The `current` method must be defined in child classes."
                );
              }),
              (t.prototype.query = function () {
                throw new Error(
                  "The `query` method must be defined in child classes."
                );
              }),
              (t.prototype.bind = function () {}),
              (t.prototype.destroy = function () {}),
              (t.prototype.generateResultId = function (t, n) {
                var o = t.id + "-result-";
                return (
                  (o += e.generateChars(4)),
                  null != n.id
                    ? (o += "-" + n.id.toString())
                    : (o += "-" + e.generateChars(4)),
                  o
                );
              }),
              t
            );
          }),
          t.define(
            "select2/data/select",
            ["./base", "../utils", "jquery"],
            function (e, t, n) {
              function o(e, t) {
                (this.$element = e),
                  (this.options = t),
                  o.__super__.constructor.call(this);
              }
              return (
                t.Extend(o, e),
                (o.prototype.current = function (e) {
                  var t = [],
                    o = this;
                  this.$element.find(":selected").each(function () {
                    var e = n(this),
                      i = o.item(e);
                    t.push(i);
                  }),
                    e(t);
                }),
                (o.prototype.select = function (e) {
                  var t = this;
                  if (((e.selected = !0), n(e.element).is("option")))
                    return (
                      (e.element.selected = !0),
                      void this.$element.trigger("change")
                    );
                  if (this.$element.prop("multiple"))
                    this.current(function (o) {
                      var i = [];
                      (e = [e]).push.apply(e, o);
                      for (var r = 0; r < e.length; r++) {
                        var a = e[r].id;
                        -1 === n.inArray(a, i) && i.push(a);
                      }
                      t.$element.val(i), t.$element.trigger("change");
                    });
                  else {
                    var o = e.id;
                    this.$element.val(o), this.$element.trigger("change");
                  }
                }),
                (o.prototype.unselect = function (e) {
                  var t = this;
                  if (this.$element.prop("multiple")) {
                    if (((e.selected = !1), n(e.element).is("option")))
                      return (
                        (e.element.selected = !1),
                        void this.$element.trigger("change")
                      );
                    this.current(function (o) {
                      for (var i = [], r = 0; r < o.length; r++) {
                        var a = o[r].id;
                        a !== e.id && -1 === n.inArray(a, i) && i.push(a);
                      }
                      t.$element.val(i), t.$element.trigger("change");
                    });
                  }
                }),
                (o.prototype.bind = function (e) {
                  var t = this;
                  (this.container = e),
                    e.on("select", function (e) {
                      t.select(e.data);
                    }),
                    e.on("unselect", function (e) {
                      t.unselect(e.data);
                    });
                }),
                (o.prototype.destroy = function () {
                  this.$element.find("*").each(function () {
                    n.removeData(this, "data");
                  });
                }),
                (o.prototype.query = function (e, t) {
                  var o = [],
                    i = this;
                  this.$element.children().each(function () {
                    var t = n(this);
                    if (t.is("option") || t.is("optgroup")) {
                      var r = i.item(t),
                        a = i.matches(e, r);
                      null !== a && o.push(a);
                    }
                  }),
                    t({
                      results: o,
                    });
                }),
                (o.prototype.addOptions = function (e) {
                  t.appendMany(this.$element, e);
                }),
                (o.prototype.option = function (e) {
                  var t;
                  e.children
                    ? ((t = document.createElement("optgroup")).label = e.text)
                    : void 0 !==
                      (t = document.createElement("option")).textContent
                    ? (t.textContent = e.text)
                    : (t.innerText = e.text),
                    e.id && (t.value = e.id),
                    e.disabled && (t.disabled = !0),
                    e.selected && (t.selected = !0),
                    e.title && (t.title = e.title);
                  var o = n(t),
                    i = this._normalizeItem(e);
                  return (i.element = t), n.data(t, "data", i), o;
                }),
                (o.prototype.item = function (e) {
                  var t = {};
                  if (null != (t = n.data(e[0], "data"))) return t;
                  if (e.is("option"))
                    t = {
                      id: e.val(),
                      text: e.text(),
                      disabled: e.prop("disabled"),
                      selected: e.prop("selected"),
                      title: e.prop("title"),
                    };
                  else if (e.is("optgroup")) {
                    t = {
                      text: e.prop("label"),
                      children: [],
                      title: e.prop("title"),
                    };
                    for (
                      var o = e.children("option"), i = [], r = 0;
                      r < o.length;
                      r++
                    ) {
                      var a = n(o[r]),
                        s = this.item(a);
                      i.push(s);
                    }
                    t.children = i;
                  }
                  return (
                    ((t = this._normalizeItem(t)).element = e[0]),
                    n.data(e[0], "data", t),
                    t
                  );
                }),
                (o.prototype._normalizeItem = function (e) {
                  n.isPlainObject(e) ||
                    (e = {
                      id: e,
                      text: e,
                    });
                  var t = {
                    selected: !1,
                    disabled: !1,
                  };
                  return (
                    null !=
                      (e = n.extend(
                        {},
                        {
                          text: "",
                        },
                        e
                      )).id && (e.id = e.id.toString()),
                    null != e.text && (e.text = e.text.toString()),
                    null == e._resultId &&
                      e.id &&
                      null != this.container &&
                      (e._resultId = this.generateResultId(this.container, e)),
                    n.extend({}, t, e)
                  );
                }),
                (o.prototype.matches = function (e, t) {
                  return this.options.get("matcher")(e, t);
                }),
                o
              );
            }
          ),
          t.define(
            "select2/data/array",
            ["./select", "../utils", "jquery"],
            function (e, t, n) {
              function o(e, t) {
                var n = t.get("data") || [];
                o.__super__.constructor.call(this, e, t),
                  this.addOptions(this.convertToOptions(n));
              }
              return (
                t.Extend(o, e),
                (o.prototype.select = function (e) {
                  var t = this.$element.find("option").filter(function (t, n) {
                    return n.value == e.id.toString();
                  });
                  0 === t.length && ((t = this.option(e)), this.addOptions(t)),
                    o.__super__.select.call(this, e);
                }),
                (o.prototype.convertToOptions = function (e) {
                  function o(e) {
                    return function () {
                      return n(this).val() == e.id;
                    };
                  }
                  for (
                    var i = this,
                      r = this.$element.find("option"),
                      a = r
                        .map(function () {
                          return i.item(n(this)).id;
                        })
                        .get(),
                      s = [],
                      l = 0;
                    l < e.length;
                    l++
                  ) {
                    var c = this._normalizeItem(e[l]);
                    if (n.inArray(c.id, a) >= 0) {
                      var u = r.filter(o(c)),
                        d = this.item(u),
                        h = n.extend(!0, {}, c, d),
                        p = this.option(h);
                      u.replaceWith(p);
                    } else {
                      var f = this.option(c);
                      if (c.children) {
                        var m = this.convertToOptions(c.children);
                        t.appendMany(f, m);
                      }
                      s.push(f);
                    }
                  }
                  return s;
                }),
                o
              );
            }
          ),
          t.define(
            "select2/data/ajax",
            ["./array", "../utils", "jquery"],
            function (e, t, n) {
              function o(e, t) {
                (this.ajaxOptions = this._applyDefaults(t.get("ajax"))),
                  null != this.ajaxOptions.processResults &&
                    (this.processResults = this.ajaxOptions.processResults),
                  o.__super__.constructor.call(this, e, t);
              }
              return (
                t.Extend(o, e),
                (o.prototype._applyDefaults = function (e) {
                  var t = {
                    data: function (e) {
                      return n.extend({}, e, {
                        q: e.term,
                      });
                    },
                    transport: function (e, t, o) {
                      var i = n.ajax(e);
                      return i.then(t), i.fail(o), i;
                    },
                  };
                  return n.extend({}, t, e, !0);
                }),
                (o.prototype.processResults = function (e) {
                  return e;
                }),
                (o.prototype.query = function (e, t) {
                  function o() {
                    var o = r.transport(
                      r,
                      function (o) {
                        var r = i.processResults(o, e);
                        i.options.get("debug") &&
                          window.console &&
                          console.error &&
                          ((r && r.results && n.isArray(r.results)) ||
                            console.error(
                              "Select2: The AJAX results did not return an array in the `results` key of the response."
                            )),
                          t(r);
                      },
                      function () {
                        (o.status && "0" === o.status) ||
                          i.trigger("results:message", {
                            message: "errorLoading",
                          });
                      }
                    );
                    i._request = o;
                  }
                  var i = this;
                  null != this._request &&
                    (n.isFunction(this._request.abort) && this._request.abort(),
                    (this._request = null));
                  var r = n.extend(
                    {
                      type: "GET",
                    },
                    this.ajaxOptions
                  );
                  "function" == typeof r.url &&
                    (r.url = r.url.call(this.$element, e)),
                    "function" == typeof r.data &&
                      (r.data = r.data.call(this.$element, e)),
                    this.ajaxOptions.delay && null != e.term
                      ? (this._queryTimeout &&
                          window.clearTimeout(this._queryTimeout),
                        (this._queryTimeout = window.setTimeout(
                          o,
                          this.ajaxOptions.delay
                        )))
                      : o();
                }),
                o
              );
            }
          ),
          t.define("select2/data/tags", ["jquery"], function (e) {
            function t(t, n, o) {
              var i = o.get("tags"),
                r = o.get("createTag");
              void 0 !== r && (this.createTag = r);
              var a = o.get("insertTag");
              if (
                (void 0 !== a && (this.insertTag = a),
                t.call(this, n, o),
                e.isArray(i))
              )
                for (var s = 0; s < i.length; s++) {
                  var l = i[s],
                    c = this._normalizeItem(l),
                    u = this.option(c);
                  this.$element.append(u);
                }
            }
            return (
              (t.prototype.query = function (e, t, n) {
                function o(e, r) {
                  for (var a = e.results, s = 0; s < a.length; s++) {
                    var l = a[s],
                      c =
                        null != l.children &&
                        !o(
                          {
                            results: l.children,
                          },
                          !0
                        );
                    if (l.text === t.term || c)
                      return !r && ((e.data = a), void n(e));
                  }
                  if (r) return !0;
                  var u = i.createTag(t);
                  if (null != u) {
                    var d = i.option(u);
                    d.attr("data-select2-tag", !0),
                      i.addOptions([d]),
                      i.insertTag(a, u);
                  }
                  (e.results = a), n(e);
                }
                var i = this;
                this._removeOldTags(),
                  null != t.term && null == t.page
                    ? e.call(this, t, o)
                    : e.call(this, t, n);
              }),
              (t.prototype.createTag = function (t, n) {
                var o = e.trim(n.term);
                return "" === o
                  ? null
                  : {
                      id: o,
                      text: o,
                    };
              }),
              (t.prototype.insertTag = function (e, t, n) {
                t.unshift(n);
              }),
              (t.prototype._removeOldTags = function () {
                this._lastTag;
                this.$element
                  .find("option[data-select2-tag]")
                  .each(function () {
                    this.selected || e(this).remove();
                  });
              }),
              t
            );
          }),
          t.define("select2/data/tokenizer", ["jquery"], function (e) {
            function t(e, t, n) {
              var o = n.get("tokenizer");
              void 0 !== o && (this.tokenizer = o), e.call(this, t, n);
            }
            return (
              (t.prototype.bind = function (e, t, n) {
                e.call(this, t, n),
                  (this.$search =
                    t.dropdown.$search ||
                    t.selection.$search ||
                    n.find(".select2-search__field"));
              }),
              (t.prototype.query = function (t, n, o) {
                function i(t) {
                  var n = a._normalizeItem(t);
                  if (
                    !a.$element.find("option").filter(function () {
                      return e(this).val() === n.id;
                    }).length
                  ) {
                    var o = a.option(n);
                    o.attr("data-select2-tag", !0),
                      a._removeOldTags(),
                      a.addOptions([o]);
                  }
                  r(n);
                }
                function r(e) {
                  a.trigger("select", {
                    data: e,
                  });
                }
                var a = this;
                n.term = n.term || "";
                var s = this.tokenizer(n, this.options, i);
                s.term !== n.term &&
                  (this.$search.length &&
                    (this.$search.val(s.term), this.$search.focus()),
                  (n.term = s.term)),
                  t.call(this, n, o);
              }),
              (t.prototype.tokenizer = function (t, n, o, i) {
                for (
                  var r = o.get("tokenSeparators") || [],
                    a = n.term,
                    s = 0,
                    l =
                      this.createTag ||
                      function (e) {
                        return {
                          id: e.term,
                          text: e.term,
                        };
                      };
                  s < a.length;

                ) {
                  var c = a[s];
                  if (-1 !== e.inArray(c, r)) {
                    var u = a.substr(0, s),
                      d = l(
                        e.extend({}, n, {
                          term: u,
                        })
                      );
                    null != d
                      ? (i(d), (a = a.substr(s + 1) || ""), (s = 0))
                      : s++;
                  } else s++;
                }
                return {
                  term: a,
                };
              }),
              t
            );
          }),
          t.define("select2/data/minimumInputLength", [], function () {
            function e(e, t, n) {
              (this.minimumInputLength = n.get("minimumInputLength")),
                e.call(this, t, n);
            }
            return (
              (e.prototype.query = function (e, t, n) {
                (t.term = t.term || ""),
                  t.term.length < this.minimumInputLength
                    ? this.trigger("results:message", {
                        message: "inputTooShort",
                        args: {
                          minimum: this.minimumInputLength,
                          input: t.term,
                          params: t,
                        },
                      })
                    : e.call(this, t, n);
              }),
              e
            );
          }),
          t.define("select2/data/maximumInputLength", [], function () {
            function e(e, t, n) {
              (this.maximumInputLength = n.get("maximumInputLength")),
                e.call(this, t, n);
            }
            return (
              (e.prototype.query = function (e, t, n) {
                (t.term = t.term || ""),
                  this.maximumInputLength > 0 &&
                  t.term.length > this.maximumInputLength
                    ? this.trigger("results:message", {
                        message: "inputTooLong",
                        args: {
                          maximum: this.maximumInputLength,
                          input: t.term,
                          params: t,
                        },
                      })
                    : e.call(this, t, n);
              }),
              e
            );
          }),
          t.define("select2/data/maximumSelectionLength", [], function () {
            function e(e, t, n) {
              (this.maximumSelectionLength = n.get("maximumSelectionLength")),
                e.call(this, t, n);
            }
            return (
              (e.prototype.query = function (e, t, n) {
                var o = this;
                this.current(function (i) {
                  var r = null != i ? i.length : 0;
                  o.maximumSelectionLength > 0 && r >= o.maximumSelectionLength
                    ? o.trigger("results:message", {
                        message: "maximumSelected",
                        args: {
                          maximum: o.maximumSelectionLength,
                        },
                      })
                    : e.call(o, t, n);
                });
              }),
              e
            );
          }),
          t.define("select2/dropdown", ["jquery", "./utils"], function (e, t) {
            function n(e, t) {
              (this.$element = e),
                (this.options = t),
                n.__super__.constructor.call(this);
            }
            return (
              t.Extend(n, t.Observable),
              (n.prototype.render = function () {
                var t = e(
                  '<span class="select2-dropdown"><span class="select2-results"></span></span>'
                );
                return (
                  t.attr("dir", this.options.get("dir")),
                  (this.$dropdown = t),
                  t
                );
              }),
              (n.prototype.bind = function () {}),
              (n.prototype.position = function () {}),
              (n.prototype.destroy = function () {
                this.$dropdown.remove();
              }),
              n
            );
          }),
          t.define(
            "select2/dropdown/search",
            ["jquery", "../utils"],
            function (e) {
              function t() {}
              return (
                (t.prototype.render = function (t) {
                  var n = t.call(this),
                    o = e(
                      '<span class="select2-search select2-search--dropdown"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" role="textbox" /></span>'
                    );
                  return (
                    (this.$searchContainer = o),
                    (this.$search = o.find("input")),
                    n.prepend(o),
                    n
                  );
                }),
                (t.prototype.bind = function (t, n, o) {
                  var i = this;
                  t.call(this, n, o),
                    this.$search.on("keydown", function (e) {
                      i.trigger("keypress", e),
                        (i._keyUpPrevented = e.isDefaultPrevented());
                    }),
                    this.$search.on("input", function () {
                      e(this).off("keyup");
                    }),
                    this.$search.on("keyup input", function (e) {
                      i.handleSearch(e);
                    }),
                    n.on("open", function () {
                      i.$search.attr("tabindex", 0),
                        i.$search.focus(),
                        window.setTimeout(function () {
                          i.$search.focus();
                        }, 0);
                    }),
                    n.on("close", function () {
                      i.$search.attr("tabindex", -1), i.$search.val("");
                    }),
                    n.on("focus", function () {
                      n.isOpen() && i.$search.focus();
                    }),
                    n.on("results:all", function (e) {
                      (null != e.query.term && "" !== e.query.term) ||
                        (i.showSearch(e)
                          ? i.$searchContainer.removeClass(
                              "select2-search--hide"
                            )
                          : i.$searchContainer.addClass(
                              "select2-search--hide"
                            ));
                    });
                }),
                (t.prototype.handleSearch = function () {
                  if (!this._keyUpPrevented) {
                    var e = this.$search.val();
                    this.trigger("query", {
                      term: e,
                    });
                  }
                  this._keyUpPrevented = !1;
                }),
                (t.prototype.showSearch = function () {
                  return !0;
                }),
                t
              );
            }
          ),
          t.define("select2/dropdown/hidePlaceholder", [], function () {
            function e(e, t, n, o) {
              (this.placeholder = this.normalizePlaceholder(
                n.get("placeholder")
              )),
                e.call(this, t, n, o);
            }
            return (
              (e.prototype.append = function (e, t) {
                (t.results = this.removePlaceholder(t.results)),
                  e.call(this, t);
              }),
              (e.prototype.normalizePlaceholder = function (e, t) {
                return (
                  "string" == typeof t &&
                    (t = {
                      id: "",
                      text: t,
                    }),
                  t
                );
              }),
              (e.prototype.removePlaceholder = function (e, t) {
                for (var n = t.slice(0), o = t.length - 1; o >= 0; o--) {
                  var i = t[o];
                  this.placeholder.id === i.id && n.splice(o, 1);
                }
                return n;
              }),
              e
            );
          }),
          t.define("select2/dropdown/infiniteScroll", ["jquery"], function (e) {
            function t(e, t, n, o) {
              (this.lastParams = {}),
                e.call(this, t, n, o),
                (this.$loadingMore = this.createLoadingMore()),
                (this.loading = !1);
            }
            return (
              (t.prototype.append = function (e, t) {
                this.$loadingMore.remove(),
                  (this.loading = !1),
                  e.call(this, t),
                  this.showLoadingMore(t) &&
                    this.$results.append(this.$loadingMore);
              }),
              (t.prototype.bind = function (t, n, o) {
                var i = this;
                t.call(this, n, o),
                  n.on("query", function (e) {
                    (i.lastParams = e), (i.loading = !0);
                  }),
                  n.on("query:append", function (e) {
                    (i.lastParams = e), (i.loading = !0);
                  }),
                  this.$results.on("scroll", function () {
                    var t = e.contains(
                      document.documentElement,
                      i.$loadingMore[0]
                    );
                    !i.loading &&
                      t &&
                      i.$results.offset().top +
                        i.$results.outerHeight(!1) +
                        50 >=
                        i.$loadingMore.offset().top +
                          i.$loadingMore.outerHeight(!1) &&
                      i.loadMore();
                  });
              }),
              (t.prototype.loadMore = function () {
                this.loading = !0;
                var t = e.extend(
                  {},
                  {
                    page: 1,
                  },
                  this.lastParams
                );
                t.page++, this.trigger("query:append", t);
              }),
              (t.prototype.showLoadingMore = function (e, t) {
                return t.pagination && t.pagination.more;
              }),
              (t.prototype.createLoadingMore = function () {
                var t = e(
                    '<li class="select2-results__option select2-results__option--load-more"role="treeitem" aria-disabled="true"></li>'
                  ),
                  n = this.options.get("translations").get("loadingMore");
                return t.html(n(this.lastParams)), t;
              }),
              t
            );
          }),
          t.define(
            "select2/dropdown/attachBody",
            ["jquery", "../utils"],
            function (e, t) {
              function n(t, n, o) {
                (this.$dropdownParent =
                  o.get("dropdownParent") || e(document.body)),
                  t.call(this, n, o);
              }
              return (
                (n.prototype.bind = function (e, t, n) {
                  var o = this,
                    i = !1;
                  e.call(this, t, n),
                    t.on("open", function () {
                      o._showDropdown(),
                        o._attachPositioningHandler(t),
                        i ||
                          ((i = !0),
                          t.on("results:all", function () {
                            o._positionDropdown(), o._resizeDropdown();
                          }),
                          t.on("results:append", function () {
                            o._positionDropdown(), o._resizeDropdown();
                          }));
                    }),
                    t.on("close", function () {
                      o._hideDropdown(), o._detachPositioningHandler(t);
                    }),
                    this.$dropdownContainer.on("mousedown", function (e) {
                      e.stopPropagation();
                    });
                }),
                (n.prototype.destroy = function (e) {
                  e.call(this), this.$dropdownContainer.remove();
                }),
                (n.prototype.position = function (e, t, n) {
                  t.attr("class", n.attr("class")),
                    t.removeClass("select2"),
                    t.addClass("select2-container--open"),
                    t.css({
                      position: "absolute",
                      top: -999999,
                    }),
                    (this.$container = n);
                }),
                (n.prototype.render = function (t) {
                  var n = e("<span></span>"),
                    o = t.call(this);
                  return n.append(o), (this.$dropdownContainer = n), n;
                }),
                (n.prototype._hideDropdown = function () {
                  this.$dropdownContainer.detach();
                }),
                (n.prototype._attachPositioningHandler = function (n, o) {
                  var i = this,
                    r = "scroll.select2." + o.id,
                    a = "resize.select2." + o.id,
                    s = "orientationchange.select2." + o.id,
                    l = this.$container.parents().filter(t.hasScroll);
                  l.each(function () {
                    e(this).data("select2-scroll-position", {
                      x: e(this).scrollLeft(),
                      y: e(this).scrollTop(),
                    });
                  }),
                    l.on(r, function () {
                      var t = e(this).data("select2-scroll-position");
                      e(this).scrollTop(t.y);
                    }),
                    e(window).on(r + " " + a + " " + s, function () {
                      i._positionDropdown(), i._resizeDropdown();
                    });
                }),
                (n.prototype._detachPositioningHandler = function (n, o) {
                  var i = "scroll.select2." + o.id,
                    r = "resize.select2." + o.id,
                    a = "orientationchange.select2." + o.id;
                  this.$container.parents().filter(t.hasScroll).off(i),
                    e(window).off(i + " " + r + " " + a);
                }),
                (n.prototype._positionDropdown = function () {
                  var t = e(window),
                    n = this.$dropdown.hasClass("select2-dropdown--above"),
                    o = this.$dropdown.hasClass("select2-dropdown--below"),
                    i = null,
                    r = this.$container.offset();
                  r.bottom = r.top + this.$container.outerHeight(!1);
                  var a = {
                    height: this.$container.outerHeight(!1),
                  };
                  (a.top = r.top), (a.bottom = r.top + a.height);
                  var s = {
                      height: this.$dropdown.outerHeight(!1),
                    },
                    l = {
                      top: t.scrollTop(),
                      bottom: t.scrollTop() + t.height(),
                    },
                    c = l.top < r.top - s.height,
                    u = l.bottom > r.bottom + s.height,
                    d = {
                      left: r.left,
                      top: a.bottom,
                    },
                    h = this.$dropdownParent;
                  "static" === h.css("position") && (h = h.offsetParent());
                  var p = h.offset();
                  (d.top -= p.top),
                    (d.left -= p.left),
                    n || o || (i = "below"),
                    u || !c || n
                      ? !c && u && n && (i = "below")
                      : (i = "above"),
                    ("above" == i || (n && "below" !== i)) &&
                      (d.top = a.top - p.top - s.height),
                    null != i &&
                      (this.$dropdown
                        .removeClass(
                          "select2-dropdown--below select2-dropdown--above"
                        )
                        .addClass("select2-dropdown--" + i),
                      this.$container
                        .removeClass(
                          "select2-container--below select2-container--above"
                        )
                        .addClass("select2-container--" + i)),
                    this.$dropdownContainer.css(d);
                }),
                (n.prototype._resizeDropdown = function () {
                  var e = {
                    width: this.$container.outerWidth(!1) + "px",
                  };
                  this.options.get("dropdownAutoWidth") &&
                    ((e.minWidth = e.width),
                    (e.position = "relative"),
                    (e.width = "auto")),
                    this.$dropdown.css(e);
                }),
                (n.prototype._showDropdown = function () {
                  this.$dropdownContainer.appendTo(this.$dropdownParent),
                    this._positionDropdown(),
                    this._resizeDropdown();
                }),
                n
              );
            }
          ),
          t.define("select2/dropdown/minimumResultsForSearch", [], function () {
            function e(t) {
              for (var n = 0, o = 0; o < t.length; o++) {
                var i = t[o];
                i.children ? (n += e(i.children)) : n++;
              }
              return n;
            }
            function t(e, t, n, o) {
              (this.minimumResultsForSearch = n.get("minimumResultsForSearch")),
                this.minimumResultsForSearch < 0 &&
                  (this.minimumResultsForSearch = 1 / 0),
                e.call(this, t, n, o);
            }
            return (
              (t.prototype.showSearch = function (t, n) {
                return (
                  !(e(n.data.results) < this.minimumResultsForSearch) &&
                  t.call(this, n)
                );
              }),
              t
            );
          }),
          t.define("select2/dropdown/selectOnClose", [], function () {
            function e() {}
            return (
              (e.prototype.bind = function (e, t, n) {
                var o = this;
                e.call(this, t, n),
                  t.on("close", function (e) {
                    o._handleSelectOnClose(e);
                  });
              }),
              (e.prototype._handleSelectOnClose = function (e, t) {
                if (t && null != t.originalSelect2Event) {
                  var n = t.originalSelect2Event;
                  if ("select" === n._type || "unselect" === n._type) return;
                }
                var o = this.getHighlightedResults();
                if (!(o.length < 1)) {
                  var i = o.data("data");
                  (null != i.element && i.element.selected) ||
                    (null == i.element && i.selected) ||
                    this.trigger("select", {
                      data: i,
                    });
                }
              }),
              e
            );
          }),
          t.define("select2/dropdown/closeOnSelect", [], function () {
            function e() {}
            return (
              (e.prototype.bind = function (e, t, n) {
                var o = this;
                e.call(this, t, n),
                  t.on("select", function (e) {
                    o._selectTriggered(e);
                  }),
                  t.on("unselect", function (e) {
                    o._selectTriggered(e);
                  });
              }),
              (e.prototype._selectTriggered = function (e, t) {
                var n = t.originalEvent;
                (n && n.ctrlKey) ||
                  this.trigger("close", {
                    originalEvent: n,
                    originalSelect2Event: t,
                  });
              }),
              e
            );
          }),
          t.define("select2/i18n/en", [], function () {
            return {
              errorLoading: function () {
                return "The results could not be loaded.";
              },
              inputTooLong: function (e) {
                var t = e.input.length - e.maximum,
                  n = "Please delete " + t + " character";
                return 1 != t && (n += "s"), n;
              },
              inputTooShort: function (e) {
                return (
                  "Please enter " +
                  (e.minimum - e.input.length) +
                  " or more characters"
                );
              },
              loadingMore: function () {
                return "Loading more results\u2026";
              },
              maximumSelected: function (e) {
                var t = "You can only select " + e.maximum + " item";
                return 1 != e.maximum && (t += "s"), t;
              },
              noResults: function () {
                return "No results found";
              },
              searching: function () {
                return "Searching\u2026";
              },
            };
          }),
          t.define(
            "select2/defaults",
            [
              "jquery",
              "require",
              "./results",
              "./selection/single",
              "./selection/multiple",
              "./selection/placeholder",
              "./selection/allowClear",
              "./selection/search",
              "./selection/eventRelay",
              "./utils",
              "./translation",
              "./diacritics",
              "./data/select",
              "./data/array",
              "./data/ajax",
              "./data/tags",
              "./data/tokenizer",
              "./data/minimumInputLength",
              "./data/maximumInputLength",
              "./data/maximumSelectionLength",
              "./dropdown",
              "./dropdown/search",
              "./dropdown/hidePlaceholder",
              "./dropdown/infiniteScroll",
              "./dropdown/attachBody",
              "./dropdown/minimumResultsForSearch",
              "./dropdown/selectOnClose",
              "./dropdown/closeOnSelect",
              "./i18n/en",
            ],
            function (
              e,
              t,
              n,
              o,
              i,
              r,
              a,
              s,
              l,
              c,
              u,
              d,
              h,
              p,
              f,
              m,
              g,
              v,
              b,
              y,
              w,
              _,
              C,
              k,
              S,
              x,
              E,
              $,
              T
            ) {
              function A() {
                this.reset();
              }
              return (
                (A.prototype.apply = function (d) {
                  if (
                    null == (d = e.extend(!0, {}, this.defaults, d)).dataAdapter
                  ) {
                    if (
                      (null != d.ajax
                        ? (d.dataAdapter = f)
                        : null != d.data
                        ? (d.dataAdapter = p)
                        : (d.dataAdapter = h),
                      d.minimumInputLength > 0 &&
                        (d.dataAdapter = c.Decorate(d.dataAdapter, v)),
                      d.maximumInputLength > 0 &&
                        (d.dataAdapter = c.Decorate(d.dataAdapter, b)),
                      d.maximumSelectionLength > 0 &&
                        (d.dataAdapter = c.Decorate(d.dataAdapter, y)),
                      d.tags && (d.dataAdapter = c.Decorate(d.dataAdapter, m)),
                      (null == d.tokenSeparators && null == d.tokenizer) ||
                        (d.dataAdapter = c.Decorate(d.dataAdapter, g)),
                      null != d.query)
                    ) {
                      var T = t(d.amdBase + "compat/query");
                      d.dataAdapter = c.Decorate(d.dataAdapter, T);
                    }
                    if (null != d.initSelection) {
                      var A = t(d.amdBase + "compat/initSelection");
                      d.dataAdapter = c.Decorate(d.dataAdapter, A);
                    }
                  }
                  if (
                    (null == d.resultsAdapter &&
                      ((d.resultsAdapter = n),
                      null != d.ajax &&
                        (d.resultsAdapter = c.Decorate(d.resultsAdapter, k)),
                      null != d.placeholder &&
                        (d.resultsAdapter = c.Decorate(d.resultsAdapter, C)),
                      d.selectOnClose &&
                        (d.resultsAdapter = c.Decorate(d.resultsAdapter, E))),
                    null == d.dropdownAdapter)
                  ) {
                    if (d.multiple) d.dropdownAdapter = w;
                    else {
                      var M = c.Decorate(w, _);
                      d.dropdownAdapter = M;
                    }
                    if (
                      (0 !== d.minimumResultsForSearch &&
                        (d.dropdownAdapter = c.Decorate(d.dropdownAdapter, x)),
                      d.closeOnSelect &&
                        (d.dropdownAdapter = c.Decorate(d.dropdownAdapter, $)),
                      null != d.dropdownCssClass ||
                        null != d.dropdownCss ||
                        null != d.adaptDropdownCssClass)
                    ) {
                      var O = t(d.amdBase + "compat/dropdownCss");
                      d.dropdownAdapter = c.Decorate(d.dropdownAdapter, O);
                    }
                    d.dropdownAdapter = c.Decorate(d.dropdownAdapter, S);
                  }
                  if (null == d.selectionAdapter) {
                    if (
                      (d.multiple
                        ? (d.selectionAdapter = i)
                        : (d.selectionAdapter = o),
                      null != d.placeholder &&
                        (d.selectionAdapter = c.Decorate(
                          d.selectionAdapter,
                          r
                        )),
                      d.allowClear &&
                        (d.selectionAdapter = c.Decorate(
                          d.selectionAdapter,
                          a
                        )),
                      d.multiple &&
                        (d.selectionAdapter = c.Decorate(
                          d.selectionAdapter,
                          s
                        )),
                      null != d.containerCssClass ||
                        null != d.containerCss ||
                        null != d.adaptContainerCssClass)
                    ) {
                      var I = t(d.amdBase + "compat/containerCss");
                      d.selectionAdapter = c.Decorate(d.selectionAdapter, I);
                    }
                    d.selectionAdapter = c.Decorate(d.selectionAdapter, l);
                  }
                  if ("string" == typeof d.language)
                    if (d.language.indexOf("-") > 0) {
                      var R = d.language.split("-")[0];
                      d.language = [d.language, R];
                    } else d.language = [d.language];
                  if (e.isArray(d.language)) {
                    var P = new u();
                    d.language.push("en");
                    for (var L = d.language, D = 0; D < L.length; D++) {
                      var N = L[D],
                        H = {};
                      try {
                        H = u.loadPath(N);
                      } catch (e) {
                        try {
                          (N = this.defaults.amdLanguageBase + N),
                            (H = u.loadPath(N));
                        } catch (e) {
                          d.debug &&
                            window.console &&
                            console.warn &&
                            console.warn(
                              'Select2: The language file for "' +
                                N +
                                '" could not be automatically loaded. A fallback will be used instead.'
                            );
                          continue;
                        }
                      }
                      P.extend(H);
                    }
                    d.translations = P;
                  } else {
                    var B = u.loadPath(this.defaults.amdLanguageBase + "en"),
                      F = new u(d.language);
                    F.extend(B), (d.translations = F);
                  }
                  return d;
                }),
                (A.prototype.reset = function () {
                  function t(e) {
                    function t(e) {
                      return d[e] || e;
                    }
                    return e.replace(/[^\u0000-\u007E]/g, t);
                  }
                  function n(o, i) {
                    if ("" === e.trim(o.term)) return i;
                    if (i.children && i.children.length > 0) {
                      for (
                        var r = e.extend(!0, {}, i), a = i.children.length - 1;
                        a >= 0;
                        a--
                      ) {
                        null == n(o, i.children[a]) && r.children.splice(a, 1);
                      }
                      return r.children.length > 0 ? r : n(o, r);
                    }
                    var s = t(i.text).toUpperCase(),
                      l = t(o.term).toUpperCase();
                    return s.indexOf(l) > -1 ? i : null;
                  }
                  this.defaults = {
                    amdBase: "./",
                    amdLanguageBase: "./i18n/",
                    closeOnSelect: !0,
                    debug: !1,
                    dropdownAutoWidth: !1,
                    escapeMarkup: c.escapeMarkup,
                    language: T,
                    matcher: n,
                    minimumInputLength: 0,
                    maximumInputLength: 0,
                    maximumSelectionLength: 0,
                    minimumResultsForSearch: 0,
                    selectOnClose: !1,
                    sorter: function (e) {
                      return e;
                    },
                    templateResult: function (e) {
                      return e.text;
                    },
                    templateSelection: function (e) {
                      return e.text;
                    },
                    theme: "default",
                    width: "resolve",
                  };
                }),
                (A.prototype.set = function (t, n) {
                  var o = {};
                  o[e.camelCase(t)] = n;
                  var i = c._convertData(o);
                  e.extend(this.defaults, i);
                }),
                new A()
              );
            }
          ),
          t.define(
            "select2/options",
            ["require", "jquery", "./defaults", "./utils"],
            function (e, t, n, o) {
              function i(t, i) {
                if (
                  ((this.options = t),
                  null != i && this.fromElement(i),
                  (this.options = n.apply(this.options)),
                  i && i.is("input"))
                ) {
                  var r = e(this.get("amdBase") + "compat/inputData");
                  this.options.dataAdapter = o.Decorate(
                    this.options.dataAdapter,
                    r
                  );
                }
              }
              return (
                (i.prototype.fromElement = function (e) {
                  var n = ["select2"];
                  null == this.options.multiple &&
                    (this.options.multiple = e.prop("multiple")),
                    null == this.options.disabled &&
                      (this.options.disabled = e.prop("disabled")),
                    null == this.options.language &&
                      (e.prop("lang")
                        ? (this.options.language = e.prop("lang").toLowerCase())
                        : e.closest("[lang]").prop("lang") &&
                          (this.options.language = e
                            .closest("[lang]")
                            .prop("lang"))),
                    null == this.options.dir &&
                      (e.prop("dir")
                        ? (this.options.dir = e.prop("dir"))
                        : e.closest("[dir]").prop("dir")
                        ? (this.options.dir = e.closest("[dir]").prop("dir"))
                        : (this.options.dir = "ltr")),
                    e.prop("disabled", this.options.disabled),
                    e.prop("multiple", this.options.multiple),
                    e.data("select2Tags") &&
                      (this.options.debug &&
                        window.console &&
                        console.warn &&
                        console.warn(
                          'Select2: The `data-select2-tags` attribute has been changed to use the `data-data` and `data-tags="true"` attributes and will be removed in future versions of Select2.'
                        ),
                      e.data("data", e.data("select2Tags")),
                      e.data("tags", !0)),
                    e.data("ajaxUrl") &&
                      (this.options.debug &&
                        window.console &&
                        console.warn &&
                        console.warn(
                          "Select2: The `data-ajax-url` attribute has been changed to `data-ajax--url` and support for the old attribute will be removed in future versions of Select2."
                        ),
                      e.attr("ajax--url", e.data("ajaxUrl")),
                      e.data("ajax--url", e.data("ajaxUrl")));
                  var i = {};
                  i =
                    t.fn.jquery &&
                    "1." == t.fn.jquery.substr(0, 2) &&
                    e[0].dataset
                      ? t.extend(!0, {}, e[0].dataset, e.data())
                      : e.data();
                  var r = t.extend(!0, {}, i);
                  for (var a in (r = o._convertData(r)))
                    t.inArray(a, n) > -1 ||
                      (t.isPlainObject(this.options[a])
                        ? t.extend(this.options[a], r[a])
                        : (this.options[a] = r[a]));
                  return this;
                }),
                (i.prototype.get = function (e) {
                  return this.options[e];
                }),
                (i.prototype.set = function (e, t) {
                  this.options[e] = t;
                }),
                i
              );
            }
          ),
          t.define(
            "select2/core",
            ["jquery", "./options", "./utils", "./keys"],
            function (e, t, n, o) {
              var i = function (e, n) {
                null != e.data("select2") && e.data("select2").destroy(),
                  (this.$element = e),
                  (this.id = this._generateId(e)),
                  (n = n || {}),
                  (this.options = new t(n, e)),
                  i.__super__.constructor.call(this);
                var o = e.attr("tabindex") || 0;
                e.data("old-tabindex", o), e.attr("tabindex", "-1");
                var r = this.options.get("dataAdapter");
                this.dataAdapter = new r(e, this.options);
                var a = this.render();
                this._placeContainer(a);
                var s = this.options.get("selectionAdapter");
                (this.selection = new s(e, this.options)),
                  (this.$selection = this.selection.render()),
                  this.selection.position(this.$selection, a);
                var l = this.options.get("dropdownAdapter");
                (this.dropdown = new l(e, this.options)),
                  (this.$dropdown = this.dropdown.render()),
                  this.dropdown.position(this.$dropdown, a);
                var c = this.options.get("resultsAdapter");
                (this.results = new c(e, this.options, this.dataAdapter)),
                  (this.$results = this.results.render()),
                  this.results.position(this.$results, this.$dropdown);
                var u = this;
                this._bindAdapters(),
                  this._registerDomEvents(),
                  this._registerDataEvents(),
                  this._registerSelectionEvents(),
                  this._registerDropdownEvents(),
                  this._registerResultsEvents(),
                  this._registerEvents(),
                  this.dataAdapter.current(function (e) {
                    u.trigger("selection:update", {
                      data: e,
                    });
                  }),
                  e.addClass("select2-hidden-accessible"),
                  e.attr("aria-hidden", "true"),
                  this._syncAttributes(),
                  e.data("select2", this);
              };
              return (
                n.Extend(i, n.Observable),
                (i.prototype._generateId = function (e) {
                  return (
                    "select2-" +
                    (null != e.attr("id")
                      ? e.attr("id")
                      : null != e.attr("name")
                      ? e.attr("name") + "-" + n.generateChars(2)
                      : n.generateChars(4)
                    ).replace(/(:|\.|\[|\]|,)/g, "")
                  );
                }),
                (i.prototype._placeContainer = function (e) {
                  e.insertAfter(this.$element);
                  var t = this._resolveWidth(
                    this.$element,
                    this.options.get("width")
                  );
                  null != t && e.css("width", t);
                }),
                (i.prototype._resolveWidth = function (e, t) {
                  var n =
                    /^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;
                  if ("resolve" == t) {
                    var o = this._resolveWidth(e, "style");
                    return null != o ? o : this._resolveWidth(e, "element");
                  }
                  if ("element" == t) {
                    var i = e.outerWidth(!1);
                    return i <= 0 ? "auto" : i + "px";
                  }
                  if ("style" == t) {
                    var r = e.attr("style");
                    if ("string" != typeof r) return null;
                    for (
                      var a = r.split(";"), s = 0, l = a.length;
                      s < l;
                      s += 1
                    ) {
                      var c = a[s].replace(/\s/g, "").match(n);
                      if (null !== c && c.length >= 1) return c[1];
                    }
                    return null;
                  }
                  return t;
                }),
                (i.prototype._bindAdapters = function () {
                  this.dataAdapter.bind(this, this.$container),
                    this.selection.bind(this, this.$container),
                    this.dropdown.bind(this, this.$container),
                    this.results.bind(this, this.$container);
                }),
                (i.prototype._registerDomEvents = function () {
                  var t = this;
                  this.$element.on("change.select2", function () {
                    t.dataAdapter.current(function (e) {
                      t.trigger("selection:update", {
                        data: e,
                      });
                    });
                  }),
                    this.$element.on("focus.select2", function (e) {
                      t.trigger("focus", e);
                    }),
                    (this._syncA = n.bind(this._syncAttributes, this)),
                    (this._syncS = n.bind(this._syncSubtree, this)),
                    this.$element[0].attachEvent &&
                      this.$element[0].attachEvent(
                        "onpropertychange",
                        this._syncA
                      );
                  var o =
                    window.MutationObserver ||
                    window.WebKitMutationObserver ||
                    window.MozMutationObserver;
                  null != o
                    ? ((this._observer = new o(function (n) {
                        e.each(n, t._syncA), e.each(n, t._syncS);
                      })),
                      this._observer.observe(this.$element[0], {
                        attributes: !0,
                        childList: !0,
                        subtree: !1,
                      }))
                    : this.$element[0].addEventListener &&
                      (this.$element[0].addEventListener(
                        "DOMAttrModified",
                        t._syncA,
                        !1
                      ),
                      this.$element[0].addEventListener(
                        "DOMNodeInserted",
                        t._syncS,
                        !1
                      ),
                      this.$element[0].addEventListener(
                        "DOMNodeRemoved",
                        t._syncS,
                        !1
                      ));
                }),
                (i.prototype._registerDataEvents = function () {
                  var e = this;
                  this.dataAdapter.on("*", function (t, n) {
                    e.trigger(t, n);
                  });
                }),
                (i.prototype._registerSelectionEvents = function () {
                  var t = this,
                    n = ["toggle", "focus"];
                  this.selection.on("toggle", function () {
                    t.toggleDropdown();
                  }),
                    this.selection.on("focus", function (e) {
                      t.focus(e);
                    }),
                    this.selection.on("*", function (o, i) {
                      -1 === e.inArray(o, n) && t.trigger(o, i);
                    });
                }),
                (i.prototype._registerDropdownEvents = function () {
                  var e = this;
                  this.dropdown.on("*", function (t, n) {
                    e.trigger(t, n);
                  });
                }),
                (i.prototype._registerResultsEvents = function () {
                  var e = this;
                  this.results.on("*", function (t, n) {
                    e.trigger(t, n);
                  });
                }),
                (i.prototype._registerEvents = function () {
                  var e = this;
                  this.on("open", function () {
                    e.$container.addClass("select2-container--open");
                  }),
                    this.on("close", function () {
                      e.$container.removeClass("select2-container--open");
                    }),
                    this.on("enable", function () {
                      e.$container.removeClass("select2-container--disabled");
                    }),
                    this.on("disable", function () {
                      e.$container.addClass("select2-container--disabled");
                    }),
                    this.on("blur", function () {
                      e.$container.removeClass("select2-container--focus");
                    }),
                    this.on("query", function (t) {
                      e.isOpen() || e.trigger("open", {}),
                        this.dataAdapter.query(t, function (n) {
                          e.trigger("results:all", {
                            data: n,
                            query: t,
                          });
                        });
                    }),
                    this.on("query:append", function (t) {
                      this.dataAdapter.query(t, function (n) {
                        e.trigger("results:append", {
                          data: n,
                          query: t,
                        });
                      });
                    }),
                    this.on("keypress", function (t) {
                      var n = t.which;
                      e.isOpen()
                        ? n === o.ESC || n === o.TAB || (n === o.UP && t.altKey)
                          ? (e.close(), t.preventDefault())
                          : n === o.ENTER
                          ? (e.trigger("results:select", {}),
                            t.preventDefault())
                          : n === o.SPACE && t.ctrlKey
                          ? (e.trigger("results:toggle", {}),
                            t.preventDefault())
                          : n === o.UP
                          ? (e.trigger("results:previous", {}),
                            t.preventDefault())
                          : n === o.DOWN &&
                            (e.trigger("results:next", {}), t.preventDefault())
                        : (n === o.ENTER ||
                            n === o.SPACE ||
                            (n === o.DOWN && t.altKey)) &&
                          (e.open(), t.preventDefault());
                    });
                }),
                (i.prototype._syncAttributes = function () {
                  this.options.set("disabled", this.$element.prop("disabled")),
                    this.options.get("disabled")
                      ? (this.isOpen() && this.close(),
                        this.trigger("disable", {}))
                      : this.trigger("enable", {});
                }),
                (i.prototype._syncSubtree = function (e, t) {
                  var n = !1,
                    o = this;
                  if (
                    !e ||
                    !e.target ||
                    "OPTION" === e.target.nodeName ||
                    "OPTGROUP" === e.target.nodeName
                  ) {
                    if (t)
                      if (t.addedNodes && t.addedNodes.length > 0)
                        for (var i = 0; i < t.addedNodes.length; i++) {
                          t.addedNodes[i].selected && (n = !0);
                        }
                      else
                        t.removedNodes && t.removedNodes.length > 0 && (n = !0);
                    else n = !0;
                    n &&
                      this.dataAdapter.current(function (e) {
                        o.trigger("selection:update", {
                          data: e,
                        });
                      });
                  }
                }),
                (i.prototype.trigger = function (e, t) {
                  var n = i.__super__.trigger,
                    o = {
                      open: "opening",
                      close: "closing",
                      select: "selecting",
                      unselect: "unselecting",
                    };
                  if ((void 0 === t && (t = {}), e in o)) {
                    var r = o[e],
                      a = {
                        prevented: !1,
                        name: e,
                        args: t,
                      };
                    if ((n.call(this, r, a), a.prevented))
                      return void (t.prevented = !0);
                  }
                  n.call(this, e, t);
                }),
                (i.prototype.toggleDropdown = function () {
                  this.options.get("disabled") ||
                    (this.isOpen() ? this.close() : this.open());
                }),
                (i.prototype.open = function () {
                  this.isOpen() || this.trigger("query", {});
                }),
                (i.prototype.close = function () {
                  this.isOpen() && this.trigger("close", {});
                }),
                (i.prototype.isOpen = function () {
                  return this.$container.hasClass("select2-container--open");
                }),
                (i.prototype.hasFocus = function () {
                  return this.$container.hasClass("select2-container--focus");
                }),
                (i.prototype.focus = function () {
                  this.hasFocus() ||
                    (this.$container.addClass("select2-container--focus"),
                    this.trigger("focus", {}));
                }),
                (i.prototype.enable = function (e) {
                  this.options.get("debug") &&
                    window.console &&
                    console.warn &&
                    console.warn(
                      'Select2: The `select2("enable")` method has been deprecated and will be removed in later Select2 versions. Use $element.prop("disabled") instead.'
                    ),
                    (null != e && 0 !== e.length) || (e = [!0]);
                  var t = !e[0];
                  this.$element.prop("disabled", t);
                }),
                (i.prototype.data = function () {
                  this.options.get("debug") &&
                    arguments.length > 0 &&
                    window.console &&
                    console.warn &&
                    console.warn(
                      'Select2: Data can no longer be set using `select2("data")`. You should consider setting the value instead using `$element.val()`.'
                    );
                  var e = [];
                  return (
                    this.dataAdapter.current(function (t) {
                      e = t;
                    }),
                    e
                  );
                }),
                (i.prototype.val = function (t) {
                  if (
                    (this.options.get("debug") &&
                      window.console &&
                      console.warn &&
                      console.warn(
                        'Select2: The `select2("val")` method has been deprecated and will be removed in later Select2 versions. Use $element.val() instead.'
                      ),
                    null == t || 0 === t.length)
                  )
                    return this.$element.val();
                  var n = t[0];
                  e.isArray(n) &&
                    (n = e.map(n, function (e) {
                      return e.toString();
                    })),
                    this.$element.val(n).trigger("change");
                }),
                (i.prototype.destroy = function () {
                  this.$container.remove(),
                    this.$element[0].detachEvent &&
                      this.$element[0].detachEvent(
                        "onpropertychange",
                        this._syncA
                      ),
                    null != this._observer
                      ? (this._observer.disconnect(), (this._observer = null))
                      : this.$element[0].removeEventListener &&
                        (this.$element[0].removeEventListener(
                          "DOMAttrModified",
                          this._syncA,
                          !1
                        ),
                        this.$element[0].removeEventListener(
                          "DOMNodeInserted",
                          this._syncS,
                          !1
                        ),
                        this.$element[0].removeEventListener(
                          "DOMNodeRemoved",
                          this._syncS,
                          !1
                        )),
                    (this._syncA = null),
                    (this._syncS = null),
                    this.$element.off(".select2"),
                    this.$element.attr(
                      "tabindex",
                      this.$element.data("old-tabindex")
                    ),
                    this.$element.removeClass("select2-hidden-accessible"),
                    this.$element.attr("aria-hidden", "false"),
                    this.$element.removeData("select2"),
                    this.dataAdapter.destroy(),
                    this.selection.destroy(),
                    this.dropdown.destroy(),
                    this.results.destroy(),
                    (this.dataAdapter = null),
                    (this.selection = null),
                    (this.dropdown = null),
                    (this.results = null);
                }),
                (i.prototype.render = function () {
                  var t = e(
                    '<span class="select2 select2-container"><span class="selection"></span><span class="dropdown-wrapper" aria-hidden="true"></span></span>'
                  );
                  return (
                    t.attr("dir", this.options.get("dir")),
                    (this.$container = t),
                    this.$container.addClass(
                      "select2-container--" + this.options.get("theme")
                    ),
                    t.data("element", this.$element),
                    t
                  );
                }),
                i
              );
            }
          ),
          t.define("select2/compat/utils", ["jquery"], function (e) {
            function t(t, n, o) {
              var i,
                r,
                a = [];
              (i = e.trim(t.attr("class"))) &&
                e((i = "" + i).split(/\s+/)).each(function () {
                  0 === this.indexOf("select2-") && a.push(this);
                }),
                (i = e.trim(n.attr("class"))) &&
                  e((i = "" + i).split(/\s+/)).each(function () {
                    0 !== this.indexOf("select2-") &&
                      null != (r = o(this)) &&
                      a.push(r);
                  }),
                t.attr("class", a.join(" "));
            }
            return {
              syncCssClasses: t,
            };
          }),
          t.define(
            "select2/compat/containerCss",
            ["jquery", "./utils"],
            function (e, t) {
              function n() {
                return null;
              }
              function o() {}
              return (
                (o.prototype.render = function (o) {
                  var i = o.call(this),
                    r = this.options.get("containerCssClass") || "";
                  e.isFunction(r) && (r = r(this.$element));
                  var a = this.options.get("adaptContainerCssClass");
                  if (((a = a || n), -1 !== r.indexOf(":all:"))) {
                    r = r.replace(":all:", "");
                    var s = a;
                    a = function (e) {
                      var t = s(e);
                      return null != t ? t + " " + e : e;
                    };
                  }
                  var l = this.options.get("containerCss") || {};
                  return (
                    e.isFunction(l) && (l = l(this.$element)),
                    t.syncCssClasses(i, this.$element, a),
                    i.css(l),
                    i.addClass(r),
                    i
                  );
                }),
                o
              );
            }
          ),
          t.define(
            "select2/compat/dropdownCss",
            ["jquery", "./utils"],
            function (e, t) {
              function n() {
                return null;
              }
              function o() {}
              return (
                (o.prototype.render = function (o) {
                  var i = o.call(this),
                    r = this.options.get("dropdownCssClass") || "";
                  e.isFunction(r) && (r = r(this.$element));
                  var a = this.options.get("adaptDropdownCssClass");
                  if (((a = a || n), -1 !== r.indexOf(":all:"))) {
                    r = r.replace(":all:", "");
                    var s = a;
                    a = function (e) {
                      var t = s(e);
                      return null != t ? t + " " + e : e;
                    };
                  }
                  var l = this.options.get("dropdownCss") || {};
                  return (
                    e.isFunction(l) && (l = l(this.$element)),
                    t.syncCssClasses(i, this.$element, a),
                    i.css(l),
                    i.addClass(r),
                    i
                  );
                }),
                o
              );
            }
          ),
          t.define("select2/compat/initSelection", ["jquery"], function (e) {
            function t(e, t, n) {
              n.get("debug") &&
                window.console &&
                console.warn &&
                console.warn(
                  "Select2: The `initSelection` option has been deprecated in favor of a custom data adapter that overrides the `current` method. This method is now called multiple times instead of a single time when the instance is initialized. Support will be removed for the `initSelection` option in future versions of Select2"
                ),
                (this.initSelection = n.get("initSelection")),
                (this._isInitialized = !1),
                e.call(this, t, n);
            }
            return (
              (t.prototype.current = function (t, n) {
                var o = this;
                this._isInitialized
                  ? t.call(this, n)
                  : this.initSelection.call(null, this.$element, function (t) {
                      (o._isInitialized = !0), e.isArray(t) || (t = [t]), n(t);
                    });
              }),
              t
            );
          }),
          t.define("select2/compat/inputData", ["jquery"], function (e) {
            function t(e, t, n) {
              (this._currentData = []),
                (this._valueSeparator = n.get("valueSeparator") || ","),
                "hidden" === t.prop("type") &&
                  n.get("debug") &&
                  console &&
                  console.warn &&
                  console.warn(
                    "Select2: Using a hidden input with Select2 is no longer supported and may stop working in the future. It is recommended to use a `<select>` element instead."
                  ),
                e.call(this, t, n);
            }
            return (
              (t.prototype.current = function (t, n) {
                function o(t, n) {
                  var i = [];
                  return (
                    t.selected || -1 !== e.inArray(t.id, n)
                      ? ((t.selected = !0), i.push(t))
                      : (t.selected = !1),
                    t.children && i.push.apply(i, o(t.children, n)),
                    i
                  );
                }
                for (var i = [], r = 0; r < this._currentData.length; r++) {
                  var a = this._currentData[r];
                  i.push.apply(
                    i,
                    o(a, this.$element.val().split(this._valueSeparator))
                  );
                }
                n(i);
              }),
              (t.prototype.select = function (t, n) {
                if (this.options.get("multiple")) {
                  var o = this.$element.val();
                  (o += this._valueSeparator + n.id),
                    this.$element.val(o),
                    this.$element.trigger("change");
                } else
                  this.current(function (t) {
                    e.map(t, function (e) {
                      e.selected = !1;
                    });
                  }),
                    this.$element.val(n.id),
                    this.$element.trigger("change");
              }),
              (t.prototype.unselect = function (e, t) {
                var n = this;
                (t.selected = !1),
                  this.current(function (e) {
                    for (var o = [], i = 0; i < e.length; i++) {
                      var r = e[i];
                      t.id != r.id && o.push(r.id);
                    }
                    n.$element.val(o.join(n._valueSeparator)),
                      n.$element.trigger("change");
                  });
              }),
              (t.prototype.query = function (e, t, n) {
                for (var o = [], i = 0; i < this._currentData.length; i++) {
                  var r = this._currentData[i],
                    a = this.matches(t, r);
                  null !== a && o.push(a);
                }
                n({
                  results: o,
                });
              }),
              (t.prototype.addOptions = function (t, n) {
                var o = e.map(n, function (t) {
                  return e.data(t[0], "data");
                });
                this._currentData.push.apply(this._currentData, o);
              }),
              t
            );
          }),
          t.define("select2/compat/matcher", ["jquery"], function (e) {
            function t(t) {
              function n(n, o) {
                var i = e.extend(!0, {}, o);
                if (null == n.term || "" === e.trim(n.term)) return i;
                if (o.children) {
                  for (var r = o.children.length - 1; r >= 0; r--) {
                    var a = o.children[r];
                    t(n.term, a.text, a) || i.children.splice(r, 1);
                  }
                  if (i.children.length > 0) return i;
                }
                return t(n.term, o.text, o) ? i : null;
              }
              return n;
            }
            return t;
          }),
          t.define("select2/compat/query", [], function () {
            function e(e, t, n) {
              n.get("debug") &&
                window.console &&
                console.warn &&
                console.warn(
                  "Select2: The `query` option has been deprecated in favor of a custom data adapter that overrides the `query` method. Support will be removed for the `query` option in future versions of Select2."
                ),
                e.call(this, t, n);
            }
            return (
              (e.prototype.query = function (e, t, n) {
                (t.callback = n), this.options.get("query").call(null, t);
              }),
              e
            );
          }),
          t.define("select2/dropdown/attachContainer", [], function () {
            function e(e, t, n) {
              e.call(this, t, n);
            }
            return (
              (e.prototype.position = function (e, t, n) {
                n.find(".dropdown-wrapper").append(t),
                  t.addClass("select2-dropdown--below"),
                  n.addClass("select2-container--below");
              }),
              e
            );
          }),
          t.define("select2/dropdown/stopPropagation", [], function () {
            function e() {}
            return (
              (e.prototype.bind = function (e, t, n) {
                e.call(this, t, n);
                var o = [
                  "blur",
                  "change",
                  "click",
                  "dblclick",
                  "focus",
                  "focusin",
                  "focusout",
                  "input",
                  "keydown",
                  "keyup",
                  "keypress",
                  "mousedown",
                  "mouseenter",
                  "mouseleave",
                  "mousemove",
                  "mouseover",
                  "mouseup",
                  "search",
                  "touchend",
                  "touchstart",
                ];
                this.$dropdown.on(o.join(" "), function (e) {
                  e.stopPropagation();
                });
              }),
              e
            );
          }),
          t.define("select2/selection/stopPropagation", [], function () {
            function e() {}
            return (
              (e.prototype.bind = function (e, t, n) {
                e.call(this, t, n);
                var o = [
                  "blur",
                  "change",
                  "click",
                  "dblclick",
                  "focus",
                  "focusin",
                  "focusout",
                  "input",
                  "keydown",
                  "keyup",
                  "keypress",
                  "mousedown",
                  "mouseenter",
                  "mouseleave",
                  "mousemove",
                  "mouseover",
                  "mouseup",
                  "search",
                  "touchend",
                  "touchstart",
                ];
                this.$selection.on(o.join(" "), function (e) {
                  e.stopPropagation();
                });
              }),
              e
            );
          }),
          (n = function (e) {
            function t(t) {
              var a = t || window.event,
                s = l.call(arguments, 1),
                c = 0,
                d = 0,
                h = 0,
                p = 0,
                f = 0,
                m = 0;
              if (
                (((t = e.event.fix(a)).type = "mousewheel"),
                "detail" in a && (h = -1 * a.detail),
                "wheelDelta" in a && (h = a.wheelDelta),
                "wheelDeltaY" in a && (h = a.wheelDeltaY),
                "wheelDeltaX" in a && (d = -1 * a.wheelDeltaX),
                "axis" in a &&
                  a.axis === a.HORIZONTAL_AXIS &&
                  ((d = -1 * h), (h = 0)),
                (c = 0 === h ? d : h),
                "deltaY" in a && (c = h = -1 * a.deltaY),
                "deltaX" in a && ((d = a.deltaX), 0 === h && (c = -1 * d)),
                0 !== h || 0 !== d)
              ) {
                if (1 === a.deltaMode) {
                  var g = e.data(this, "mousewheel-line-height");
                  (c *= g), (h *= g), (d *= g);
                } else if (2 === a.deltaMode) {
                  var v = e.data(this, "mousewheel-page-height");
                  (c *= v), (h *= v), (d *= v);
                }
                if (
                  ((p = Math.max(Math.abs(h), Math.abs(d))),
                  (!r || p < r) && ((r = p), o(a, p) && (r /= 40)),
                  o(a, p) && ((c /= 40), (d /= 40), (h /= 40)),
                  (c = Math[c >= 1 ? "floor" : "ceil"](c / r)),
                  (d = Math[d >= 1 ? "floor" : "ceil"](d / r)),
                  (h = Math[h >= 1 ? "floor" : "ceil"](h / r)),
                  u.settings.normalizeOffset && this.getBoundingClientRect)
                ) {
                  var b = this.getBoundingClientRect();
                  (f = t.clientX - b.left), (m = t.clientY - b.top);
                }
                return (
                  (t.deltaX = d),
                  (t.deltaY = h),
                  (t.deltaFactor = r),
                  (t.offsetX = f),
                  (t.offsetY = m),
                  (t.deltaMode = 0),
                  s.unshift(t, c, d, h),
                  i && clearTimeout(i),
                  (i = setTimeout(n, 200)),
                  (e.event.dispatch || e.event.handle).apply(this, s)
                );
              }
            }
            function n() {
              r = null;
            }
            function o(e, t) {
              return (
                u.settings.adjustOldDeltas &&
                "mousewheel" === e.type &&
                t % 120 == 0
              );
            }
            var i,
              r,
              a = [
                "wheel",
                "mousewheel",
                "DOMMouseScroll",
                "MozMousePixelScroll",
              ],
              s =
                "onwheel" in document || document.documentMode >= 9
                  ? ["wheel"]
                  : ["mousewheel", "DomMouseScroll", "MozMousePixelScroll"],
              l = Array.prototype.slice;
            if (e.event.fixHooks)
              for (var c = a.length; c; )
                e.event.fixHooks[a[--c]] = e.event.mouseHooks;
            var u = (e.event.special.mousewheel = {
              version: "3.1.12",
              setup: function () {
                if (this.addEventListener)
                  for (var n = s.length; n; )
                    this.addEventListener(s[--n], t, !1);
                else this.onmousewheel = t;
                e.data(this, "mousewheel-line-height", u.getLineHeight(this)),
                  e.data(this, "mousewheel-page-height", u.getPageHeight(this));
              },
              teardown: function () {
                if (this.removeEventListener)
                  for (var n = s.length; n; )
                    this.removeEventListener(s[--n], t, !1);
                else this.onmousewheel = null;
                e.removeData(this, "mousewheel-line-height"),
                  e.removeData(this, "mousewheel-page-height");
              },
              getLineHeight: function (t) {
                var n = e(t),
                  o = n["offsetParent" in e.fn ? "offsetParent" : "parent"]();
                return (
                  o.length || (o = e("body")),
                  parseInt(o.css("fontSize"), 10) ||
                    parseInt(n.css("fontSize"), 10) ||
                    16
                );
              },
              getPageHeight: function (t) {
                return e(t).height();
              },
              settings: {
                adjustOldDeltas: !0,
                normalizeOffset: !0,
              },
            });
            e.fn.extend({
              mousewheel: function (e) {
                return e
                  ? this.bind("mousewheel", e)
                  : this.trigger("mousewheel");
              },
              unmousewheel: function (e) {
                return this.unbind("mousewheel", e);
              },
            });
          }),
          "function" == typeof t.define && t.define.amd
            ? t.define("jquery-mousewheel", ["jquery"], n)
            : "object" == typeof exports
            ? (module.exports = n)
            : n(e),
          t.define(
            "jquery.select2",
            [
              "jquery",
              "jquery-mousewheel",
              "./select2/core",
              "./select2/defaults",
            ],
            function (e, t, n, o) {
              if (null == e.fn.select2) {
                var i = ["open", "close", "destroy"];
                e.fn.select2 = function (t) {
                  if ("object" == typeof (t = t || {}))
                    return (
                      this.each(function () {
                        var o = e.extend(!0, {}, t);
                        new n(e(this), o);
                      }),
                      this
                    );
                  if ("string" == typeof t) {
                    var o,
                      r = Array.prototype.slice.call(arguments, 1);
                    return (
                      this.each(function () {
                        var n = e(this).data("select2");
                        null == n &&
                          window.console &&
                          console.error &&
                          console.error(
                            "The select2('" +
                              t +
                              "') method was called on an element that is not using Select2."
                          ),
                          (o = n[t].apply(n, r));
                      }),
                      e.inArray(t, i) > -1 ? this : o
                    );
                  }
                  throw new Error("Invalid arguments for Select2: " + t);
                };
              }
              return (
                null == e.fn.select2.defaults && (e.fn.select2.defaults = o), n
              );
            }
          ),
          {
            define: t.define,
            require: t.require,
          }
        );
      })(),
      n = t.require("jquery.select2");
    return (e.fn.select2.amd = t), n;
  });
var sanitize_user_input = function (e) {
    return $.trim(e)
      .replace(/<.*>/, "")
      .replace(/<.*/, "")
      .replace(/.*>/, "")
      .replace(/&.*;/, "");
  },
  sanitize_list = function (e) {
    if (0 === e.length) return [];
    var t = Object.keys(e[0]);
    return e.map(function (e) {
      return (
        t.forEach(function (t) {
          e[t] = sanitize_user_input(e[t]);
        }),
        e
      );
    });
  },
  defaultTemplateSelection = function (e) {
    return e.loading
      ? e.text
      : "<div class='select2-result-repository clearfix'><div class='select2-result-repository__meta'><div class='select2-result-repository__title'>" +
          sanitize_user_input(e.text) +
          "</div></div>";
  },
  defaultTemplateResult = function (e) {
    return e.text;
  },
  ib_select2 = function (e, t, n, o) {
    void 0 === o && (o = {});
    var i = void 0 === o.minInputLength ? 3 : o.minInputLength,
      r = void 0 === o.forceEntry || o.forceEntry,
      a = void 0 === o.createTags ? !r : o.createTags,
      s =
        void 0 === o.templateResult ? defaultTemplateResult : o.templateResult,
      l =
        void 0 === o.templateSelection
          ? defaultTemplateSelection
          : o.templateSelection;
    return (
      e.select2({
        width: "100%",
        placeholder: n,
        ajax: {
          url: t,
          dataType: "json",
          delay: 250,
          data: function (e) {
            return {
              q: sanitize_user_input(e.term),
              page: e.page,
            };
          },
          processResults: function (e, t) {
            var n;
            if (r && e.items.length < 5) {
              var o = sanitize_user_input(t.term);
              return (
                (n =
                  -1 ===
                  e.items
                    .map(function (e) {
                      return e.text;
                    })
                    .indexOf(o)
                    ? e.items.concat([
                        {
                          text: o,
                          id: o,
                        },
                      ])
                    : e.items),
                {
                  results: sanitize_list(n),
                }
              );
            }
            return (
              (n = e.items),
              (t.page = t.page || 1),
              {
                results: sanitize_list(n),
                pagination: {
                  more: 30 * t.page < e.total_count,
                },
              }
            );
          },
          cache: !0,
        },
        tags: a,
        createTag: function (e) {
          return {
            text: sanitize_user_input(e.term),
            id: sanitize_user_input(e.term),
            newOption: !0,
          };
        },
        escapeMarkup: function (e) {
          return e;
        },
        minimumInputLength: i,
        templateResult: s,
        templateSelection: l,
        dropdownParent: o.parent,
      }),
      e
    );
  };
!(function () {
  "use strict";
  var e = {
      backspace: 8,
      tab: 9,
      enter: 13,
      escape: 27,
      space: 32,
      up: 38,
      down: 40,
      left: 37,
      right: 39,
      delete: 46,
      comma: 188,
    },
    t = 9007199254740991,
    n = ["text", "email", "url"],
    o = angular.module("ngTagsInput", []);
  o.directive("tagsInput", [
    "$timeout",
    "$document",
    "$window",
    "$q",
    "tagsInputConfig",
    "tiUtil",
    function (o, i, r, a, s, l) {
      function c(e, t, n, o) {
        var i,
          r,
          s,
          c,
          u = {};
        return (
          (i = function (t) {
            return l.safeToString(t[e.displayProperty]);
          }),
          (r = function (t, n) {
            t[e.displayProperty] = n;
          }),
          (s = function (t) {
            var o = i(t),
              r =
                o &&
                o.length >= e.minLength &&
                o.length <= e.maxLength &&
                e.allowedTagsPattern.test(o) &&
                !l.findInObjectArray(
                  u.items,
                  t,
                  e.keyProperty || e.displayProperty
                );
            return a
              .when(
                r &&
                  n({
                    $tag: t,
                  })
              )
              .then(l.promisifyValue);
          }),
          (c = function (e) {
            return a
              .when(
                o({
                  $tag: e,
                })
              )
              .then(l.promisifyValue);
          }),
          (u.items = []),
          (u.addText = function (e) {
            var t = {};
            return r(t, e), u.add(t);
          }),
          (u.add = function (n) {
            var o = i(n);
            return (
              e.replaceSpacesWithDashes && (o = l.replaceSpacesWithDashes(o)),
              r(n, o),
              s(n)
                .then(function () {
                  u.items.push(n),
                    t.trigger("tag-added", {
                      $tag: n,
                    });
                })
                .catch(function () {
                  o &&
                    t.trigger("invalid-tag", {
                      $tag: n,
                    });
                })
            );
          }),
          (u.remove = function (e) {
            var n = u.items[e];
            return c(n).then(function () {
              return (
                u.items.splice(e, 1),
                u.clearSelection(),
                t.trigger("tag-removed", {
                  $tag: n,
                }),
                n
              );
            });
          }),
          (u.select = function (e) {
            e < 0 ? (e = u.items.length - 1) : e >= u.items.length && (e = 0),
              (u.index = e),
              (u.selected = u.items[e]);
          }),
          (u.selectPrior = function () {
            u.select(--u.index);
          }),
          (u.selectNext = function () {
            u.select(++u.index);
          }),
          (u.removeSelected = function () {
            return u.remove(u.index);
          }),
          (u.clearSelection = function () {
            (u.selected = null), (u.index = -1);
          }),
          (u.getItems = function () {
            return e.useStrings ? u.items.map(i) : u.items;
          }),
          u.clearSelection(),
          u
        );
      }
      function u(e) {
        return -1 !== n.indexOf(e);
      }
      return {
        restrict: "E",
        require: "ngModel",
        scope: {
          tags: "=ngModel",
          text: "=?",
          templateScope: "=?",
          tagClass: "&",
          onTagAdding: "&",
          onTagAdded: "&",
          onInvalidTag: "&",
          onTagRemoving: "&",
          onTagRemoved: "&",
          onTagClicked: "&",
        },
        replace: !1,
        transclude: !0,
        templateUrl: "ngTagsInput/tags-input.html",
        controller: [
          "$scope",
          "$attrs",
          "$element",
          function (e, n, o) {
            (e.events = l.simplePubSub()),
              s.load("tagsInput", e, n, {
                template: [String, "ngTagsInput/tag-item.html"],
                type: [String, "text", u],
                placeholder: [String, "Add a tag"],
                tabindex: [Number, null],
                removeTagSymbol: [String, String.fromCharCode(215)],
                replaceSpacesWithDashes: [Boolean, !0],
                minLength: [Number, 3],
                maxLength: [Number, t],
                addOnEnter: [Boolean, !0],
                addOnSpace: [Boolean, !1],
                addOnComma: [Boolean, !0],
                addOnBlur: [Boolean, !0],
                addOnPaste: [Boolean, !1],
                pasteSplitPattern: [RegExp, /,/],
                allowedTagsPattern: [RegExp, /.+/],
                enableEditingLastTag: [Boolean, !1],
                minTags: [Number, 0],
                maxTags: [Number, t],
                displayProperty: [String, "text"],
                keyProperty: [String, ""],
                allowLeftoverText: [Boolean, !1],
                addFromAutocompleteOnly: [Boolean, !1],
                spellcheck: [Boolean, !0],
                useStrings: [Boolean, !1],
              }),
              (e.tagList = new c(
                e.options,
                e.events,
                l.handleUndefinedResult(e.onTagAdding, !0),
                l.handleUndefinedResult(e.onTagRemoving, !0)
              )),
              (this.registerAutocomplete = function () {
                o.find("input");
                return {
                  addTag: function (t) {
                    return e.tagList.add(t);
                  },
                  getTags: function () {
                    return e.tagList.items;
                  },
                  getCurrentTagText: function () {
                    return e.newTag.text();
                  },
                  getOptions: function () {
                    return e.options;
                  },
                  getTemplateScope: function () {
                    return e.templateScope;
                  },
                  on: function (t, n) {
                    return e.events.on(t, n, !0), this;
                  },
                };
              }),
              (this.registerTagItem = function () {
                return {
                  getOptions: function () {
                    return e.options;
                  },
                  removeTag: function (t) {
                    e.disabled || e.tagList.remove(t);
                  },
                };
              });
          },
        ],
        link: function (t, n, a, s) {
          var c,
            u,
            d = [
              e.enter,
              e.comma,
              e.space,
              e.backspace,
              e.delete,
              e.left,
              e.right,
            ],
            h = t.tagList,
            p = t.events,
            f = t.options,
            m = n.find("input"),
            g = ["minTags", "maxTags", "allowLeftoverText"];
          (c = function () {
            s.$setValidity("maxTags", h.items.length <= f.maxTags),
              s.$setValidity("minTags", h.items.length >= f.minTags),
              s.$setValidity(
                "leftoverText",
                !(!t.hasFocus && !f.allowLeftoverText) || !t.newTag.text()
              );
          }),
            (u = function () {
              o(function () {
                m[0].focus();
              });
            }),
            (s.$isEmpty = function (e) {
              return !e || !e.length;
            }),
            (t.newTag = {
              text: function (e) {
                if (!angular.isDefined(e)) return t.text || "";
                (t.text = e), p.trigger("input-change", e);
              },
              invalid: null,
            }),
            (t.track = function (e) {
              return e[f.keyProperty || f.displayProperty];
            }),
            (t.getTagClass = function (e, n) {
              var o = e === h.selected;
              return [
                t.tagClass({
                  $tag: e,
                  $index: n,
                  $selected: o,
                }),
                {
                  selected: o,
                },
              ];
            }),
            t.$watch("tags", function (e) {
              if (e) {
                if (
                  ((h.items = l.makeObjectArray(e, f.displayProperty)),
                  f.useStrings)
                )
                  return;
                t.tags = h.items;
              } else h.items = [];
            }),
            t.$watch("tags.length", function () {
              c(), s.$validate();
            }),
            a.$observe("disabled", function (e) {
              t.disabled = e;
            }),
            (t.eventHandlers = {
              input: {
                keydown: function (e) {
                  p.trigger("input-keydown", e);
                },
                focus: function () {
                  t.hasFocus || ((t.hasFocus = !0), p.trigger("input-focus"));
                },
                blur: function () {
                  o(function () {
                    var e = i.prop("activeElement"),
                      o = e === m[0],
                      r = n[0].contains(e);
                    (!o && r) || ((t.hasFocus = !1), p.trigger("input-blur"));
                  });
                },
                paste: function (e) {
                  (e.getTextData = function () {
                    var t =
                      e.clipboardData ||
                      (e.originalEvent && e.originalEvent.clipboardData);
                    return t
                      ? t.getData("text/plain")
                      : r.clipboardData.getData("Text");
                  }),
                    p.trigger("input-paste", e);
                },
              },
              host: {
                click: function () {
                  t.disabled || u();
                },
              },
              tag: {
                click: function (e) {
                  p.trigger("tag-clicked", {
                    $tag: e,
                  });
                },
              },
            }),
            p
              .on("tag-added", t.onTagAdded)
              .on("invalid-tag", t.onInvalidTag)
              .on("tag-removed", t.onTagRemoved)
              .on("tag-clicked", t.onTagClicked)
              .on("tag-added", function () {
                t.newTag.text("");
              })
              .on("tag-added tag-removed", function () {
                (t.tags = h.getItems()), s.$setDirty(), u();
              })
              .on("invalid-tag", function () {
                t.newTag.invalid = !0;
              })
              .on("option-change", function (e) {
                -1 !== g.indexOf(e.name) && c();
              })
              .on("input-change", function () {
                h.clearSelection(), (t.newTag.invalid = null);
              })
              .on("input-focus", function () {
                n.triggerHandler("focus"), s.$setValidity("leftoverText", !0);
              })
              .on("input-blur", function () {
                f.addOnBlur &&
                  !f.addFromAutocompleteOnly &&
                  h.addText(t.newTag.text()),
                  n.triggerHandler("blur"),
                  c();
              })
              .on("input-keydown", function (n) {
                var o,
                  i,
                  r,
                  a,
                  s = n.keyCode,
                  c = {};
                l.isModifierOn(n) ||
                  -1 === d.indexOf(s) ||
                  ((c[e.enter] = f.addOnEnter),
                  (c[e.comma] = f.addOnComma),
                  (c[e.space] = f.addOnSpace),
                  (o = !f.addFromAutocompleteOnly && c[s]),
                  (i = (s === e.backspace || s === e.delete) && h.selected),
                  (a =
                    s === e.backspace &&
                    0 === t.newTag.text().length &&
                    f.enableEditingLastTag),
                  (r =
                    (s === e.backspace || s === e.left || s === e.right) &&
                    0 === t.newTag.text().length &&
                    !f.enableEditingLastTag),
                  o
                    ? h.addText(t.newTag.text())
                    : a
                    ? (h.selectPrior(),
                      h.removeSelected().then(function (e) {
                        e && t.newTag.text(e[f.displayProperty]);
                      }))
                    : i
                    ? h.removeSelected()
                    : r &&
                      (s === e.left || s === e.backspace
                        ? h.selectPrior()
                        : s === e.right && h.selectNext()),
                  (o || r || i || a) && n.preventDefault());
              })
              .on("input-paste", function (e) {
                if (f.addOnPaste) {
                  var t = e.getTextData().split(f.pasteSplitPattern);
                  t.length > 1 &&
                    (t.forEach(function (e) {
                      h.addText(e);
                    }),
                    e.preventDefault());
                }
              });
        },
      };
    },
  ]),
    o.directive("tiTagItem", [
      "tiUtil",
      function (e) {
        return {
          restrict: "E",
          require: "^tagsInput",
          template: '<ng-include src="$$template"></ng-include>',
          scope: {
            $scope: "=scope",
            data: "=",
          },
          link: function (t, n, o, i) {
            var r = i.registerTagItem(),
              a = r.getOptions();
            (t.$$template = a.template),
              (t.$$removeTagSymbol = a.removeTagSymbol),
              (t.$getDisplayText = function () {
                return e.safeToString(t.data[a.displayProperty]);
              }),
              (t.$removeTag = function () {
                r.removeTag(t.$index);
              }),
              t.$watch("$parent.$index", function (e) {
                t.$index = e;
              });
          },
        };
      },
    ]),
    o.directive("autoComplete", [
      "$document",
      "$timeout",
      "$sce",
      "$q",
      "tagsInputConfig",
      "tiUtil",
      function (t, n, o, i, r, a) {
        function s(e, t, n) {
          var o,
            r,
            s,
            l = {};
          return (
            (s = function () {
              return t.tagsInput.keyProperty || t.tagsInput.displayProperty;
            }),
            (o = function (e, n) {
              return e.filter(function (e) {
                return !a.findInObjectArray(n, e, s(), function (e, n) {
                  return (
                    t.tagsInput.replaceSpacesWithDashes &&
                      ((e = a.replaceSpacesWithDashes(e)),
                      (n = a.replaceSpacesWithDashes(n))),
                    a.defaultComparer(e, n)
                  );
                });
              });
            }),
            (l.reset = function () {
              (r = null),
                (l.items = []),
                (l.visible = !1),
                (l.index = -1),
                (l.selected = null),
                (l.query = null);
            }),
            (l.show = function () {
              t.selectFirstMatch ? l.select(0) : (l.selected = null),
                (l.visible = !0);
            }),
            (l.load = a.debounce(function (n, c) {
              l.query = n;
              var u = i.when(
                e({
                  $query: n,
                })
              );
              (r = u),
                u.then(function (e) {
                  u === r &&
                    ((e = a.makeObjectArray(e.data || e, s())),
                    (e = o(e, c)),
                    (l.items = e.slice(0, t.maxResultsToShow)),
                    l.items.length > 0 ? l.show() : l.reset());
                });
            }, t.debounceDelay)),
            (l.selectNext = function () {
              l.select(++l.index);
            }),
            (l.selectPrior = function () {
              l.select(--l.index);
            }),
            (l.select = function (e) {
              e < 0 ? (e = l.items.length - 1) : e >= l.items.length && (e = 0),
                (l.index = e),
                (l.selected = l.items[e]),
                n.trigger("suggestion-selected", e);
            }),
            l.reset(),
            l
          );
        }
        function l(e, t) {
          var n = e.find("li").eq(t),
            o = n.parent(),
            i = n.prop("offsetTop"),
            r = n.prop("offsetHeight"),
            a = o.prop("clientHeight"),
            s = o.prop("scrollTop");
          i < s
            ? o.prop("scrollTop", i)
            : i + r > a + s && o.prop("scrollTop", i + r - a);
        }
        return {
          restrict: "E",
          require: "^tagsInput",
          scope: {
            source: "&",
            matchClass: "&",
          },
          templateUrl: "ngTagsInput/auto-complete.html",
          controller: [
            "$scope",
            "$element",
            "$attrs",
            function (e, t, n) {
              (e.events = a.simplePubSub()),
                r.load("autoComplete", e, n, {
                  template: [String, "ngTagsInput/auto-complete-match.html"],
                  debounceDelay: [Number, 100],
                  minLength: [Number, 3],
                  highlightMatchedText: [Boolean, !0],
                  maxResultsToShow: [Number, 10],
                  loadOnDownArrow: [Boolean, !1],
                  loadOnEmpty: [Boolean, !1],
                  loadOnFocus: [Boolean, !1],
                  selectFirstMatch: [Boolean, !0],
                  displayProperty: [String, ""],
                }),
                (e.suggestionList = new s(e.source, e.options, e.events)),
                (this.registerAutocompleteMatch = function () {
                  return {
                    getOptions: function () {
                      return e.options;
                    },
                    getQuery: function () {
                      return e.suggestionList.query;
                    },
                  };
                });
            },
          ],
          link: function (t, n, o, i) {
            var r,
              s = [e.enter, e.tab, e.escape, e.up, e.down],
              c = t.suggestionList,
              u = i.registerAutocomplete(),
              d = t.options,
              h = t.events;
            (d.tagsInput = u.getOptions()),
              (r = function (e) {
                return (e && e.length >= d.minLength) || (!e && d.loadOnEmpty);
              }),
              (t.templateScope = u.getTemplateScope()),
              (t.addSuggestionByIndex = function (e) {
                c.select(e), t.addSuggestion();
              }),
              (t.addSuggestion = function () {
                var e = !1;
                return (
                  c.selected &&
                    (u.addTag(angular.copy(c.selected)), c.reset(), (e = !0)),
                  e
                );
              }),
              (t.track = function (e) {
                return e[
                  d.tagsInput.keyProperty || d.tagsInput.displayProperty
                ];
              }),
              (t.getSuggestionClass = function (e, n) {
                var o = e === c.selected;
                return [
                  t.matchClass({
                    $match: e,
                    $index: n,
                    $selected: o,
                  }),
                  {
                    selected: o,
                  },
                ];
              }),
              u
                .on(
                  "tag-added tag-removed invalid-tag input-blur",
                  function () {
                    c.reset();
                  }
                )
                .on("input-change", function (e) {
                  r(e) ? c.load(e, u.getTags()) : c.reset();
                })
                .on("input-focus", function () {
                  var e = u.getCurrentTagText();
                  d.loadOnFocus && r(e) && c.load(e, u.getTags());
                })
                .on("input-keydown", function (n) {
                  var o = n.keyCode,
                    i = !1;
                  if (!a.isModifierOn(n) && -1 !== s.indexOf(o))
                    return (
                      c.visible
                        ? o === e.down
                          ? (c.selectNext(), (i = !0))
                          : o === e.up
                          ? (c.selectPrior(), (i = !0))
                          : o === e.escape
                          ? (c.reset(), (i = !0))
                          : (o !== e.enter && o !== e.tab) ||
                            (i = t.addSuggestion())
                        : o === e.down &&
                          t.options.loadOnDownArrow &&
                          (c.load(u.getCurrentTagText(), u.getTags()),
                          (i = !0)),
                      i
                        ? (n.preventDefault(), n.stopImmediatePropagation(), !1)
                        : void 0
                    );
                }),
              h.on("suggestion-selected", function (e) {
                l(n, e);
              });
          },
        };
      },
    ]),
    o.directive("tiAutocompleteMatch", [
      "$sce",
      "tiUtil",
      function (e, t) {
        return {
          restrict: "E",
          require: "^autoComplete",
          template: '<ng-include src="$$template"></ng-include>',
          scope: {
            $scope: "=scope",
            data: "=",
          },
          link: function (n, o, i, r) {
            var a = r.registerAutocompleteMatch(),
              s = a.getOptions();
            (n.$$template = s.template),
              (n.$index = n.$parent.$index),
              (n.$highlight = function (n) {
                return (
                  s.highlightMatchedText &&
                    (n = t.safeHighlight(n, a.getQuery())),
                  e.trustAsHtml(n)
                );
              }),
              (n.$getDisplayText = function () {
                return t.safeToString(
                  n.data[s.displayProperty || s.tagsInput.displayProperty]
                );
              });
          },
        };
      },
    ]),
    o.directive("tiTranscludeAppend", function () {
      return function (e, t, n, o, i) {
        i(function (e) {
          t.append(e);
        });
      };
    }),
    o.directive("tiAutosize", [
      "tagsInputConfig",
      function (e) {
        return {
          restrict: "A",
          require: "ngModel",
          link: function (t, n, o, i) {
            var r,
              a,
              s = e.getTextAutosizeThreshold();
            (r = angular.element('<span class="input"></span>'))
              .css("display", "none")
              .css("visibility", "hidden")
              .css("width", "auto")
              .css("white-space", "pre"),
              n.parent().append(r),
              (a = function (e) {
                var t,
                  i = e;
                return (
                  angular.isString(i) && 0 === i.length && (i = o.placeholder),
                  i &&
                    (r.text(i),
                    r.css("display", ""),
                    (t = r.prop("offsetWidth")),
                    r.css("display", "none")),
                  n.css("width", t ? t + s + "px" : ""),
                  e
                );
              }),
              i.$parsers.unshift(a),
              i.$formatters.unshift(a),
              o.$observe("placeholder", function (e) {
                i.$modelValue || a(e);
              });
          },
        };
      },
    ]),
    o.directive("tiBindAttrs", function () {
      return function (e, t, n) {
        e.$watch(
          n.tiBindAttrs,
          function (e) {
            angular.forEach(e, function (e, t) {
              n.$set(t, e);
            });
          },
          !0
        );
      };
    }),
    o.provider("tagsInputConfig", function () {
      var e = {},
        t = {},
        n = 3;
      (this.setDefaults = function (t, n) {
        return (e[t] = n), this;
      }),
        (this.setActiveInterpolation = function (e, n) {
          return (t[e] = n), this;
        }),
        (this.setTextAutosizeThreshold = function (e) {
          return (n = e), this;
        }),
        (this.$get = [
          "$interpolate",
          function (o) {
            var i = {};
            return (
              (i[String] = function (e) {
                return e;
              }),
              (i[Number] = function (e) {
                return parseInt(e, 10);
              }),
              (i[Boolean] = function (e) {
                return "true" === e.toLowerCase();
              }),
              (i[RegExp] = function (e) {
                return new RegExp(e);
              }),
              {
                load: function (n, r, a, s) {
                  var l = function () {
                    return !0;
                  };
                  (r.options = {}),
                    angular.forEach(s, function (s, c) {
                      var u, d, h, p, f, m;
                      (u = s[0]),
                        (d = s[1]),
                        (h = s[2] || l),
                        (p = i[u]),
                        (f = function () {
                          var t = e[n] && e[n][c];
                          return angular.isDefined(t) ? t : d;
                        }),
                        (m = function (e) {
                          r.options[c] = e && h(e) ? p(e) : f();
                        }),
                        t[n] && t[n][c]
                          ? a.$observe(c, function (e) {
                              m(e),
                                r.events.trigger("option-change", {
                                  name: c,
                                  newValue: e,
                                });
                            })
                          : m(a[c] && o(a[c])(r.$parent));
                    });
                },
                getTextAutosizeThreshold: function () {
                  return n;
                },
              }
            );
          },
        ]);
    }),
    o.factory("tiUtil", [
      "$timeout",
      "$q",
      function (e, t) {
        var n = {
          debounce: function (t, n) {
            var o;
            return function () {
              var i = arguments;
              e.cancel(o),
                (o = e(function () {
                  t.apply(null, i);
                }, n));
            };
          },
          makeObjectArray: function (e, t) {
            if (!angular.isArray(e) || 0 === e.length || angular.isObject(e[0]))
              return e;
            var n = [];
            return (
              e.forEach(function (e) {
                var o = {};
                (o[t] = e), n.push(o);
              }),
              n
            );
          },
          findInObjectArray: function (e, t, o, i) {
            var r = null;
            return (
              (i = i || n.defaultComparer),
              e.some(function (e) {
                if (i(e[o], t[o])) return (r = e), !0;
              }),
              r
            );
          },
          defaultComparer: function (e, t) {
            return (
              n.safeToString(e).toLowerCase() ===
              n.safeToString(t).toLowerCase()
            );
          },
          safeHighlight: function (e, t) {
            function o(e) {
              return e.replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1");
            }
            if (((e = n.encodeHTML(e)), !(t = n.encodeHTML(t)))) return e;
            var i = new RegExp("&[^;]+;|" + o(t), "gi");
            return e.replace(i, function (e) {
              return e.toLowerCase() === t.toLowerCase()
                ? "<em>" + e + "</em>"
                : e;
            });
          },
          safeToString: function (e) {
            return angular.isUndefined(e) || null == e
              ? ""
              : e.toString().trim();
          },
          encodeHTML: function (e) {
            return n
              .safeToString(e)
              .replace(/&/g, "&amp;")
              .replace(/</g, "&lt;")
              .replace(/>/g, "&gt;");
          },
          handleUndefinedResult: function (e, t) {
            return function () {
              var n = e.apply(null, arguments);
              return angular.isUndefined(n) ? t : n;
            };
          },
          replaceSpacesWithDashes: function (e) {
            return n.safeToString(e).replace(/\s/g, "-");
          },
          isModifierOn: function (e) {
            return e.shiftKey || e.ctrlKey || e.altKey || e.metaKey;
          },
          promisifyValue: function (e) {
            return (
              (e = !!angular.isUndefined(e) || e), t[e ? "when" : "reject"]()
            );
          },
          simplePubSub: function () {
            var e = {};
            return {
              on: function (t, n, o) {
                return (
                  t.split(" ").forEach(function (t) {
                    e[t] || (e[t] = []),
                      (o ? [].unshift : [].push).call(e[t], n);
                  }),
                  this
                );
              },
              trigger: function (t, o) {
                return (
                  (e[t] || []).every(function (e) {
                    return n.handleUndefinedResult(e, !0)(o);
                  }),
                  this
                );
              },
            };
          },
        };
        return n;
      },
    ]),
    o.run([
      "$templateCache",
      function (e) {
        e.put(
          "ngTagsInput/tags-input.html",
          '<div class="host" tabindex="-1" ng-click="eventHandlers.host.click()" ti-transclude-append><div class="tags" ng-class="{focused: hasFocus}"><ul class="tag-list"><li class="tag-item" ng-repeat="tag in tagList.items track by track(tag)" ng-class="getTagClass(tag, $index)" ng-click="eventHandlers.tag.click(tag)"><ti-tag-item scope="templateScope" data="::tag"></ti-tag-item></li></ul><input class="input" autocomplete="off" ng-model="newTag.text" ng-model-options="{getterSetter: true}" ng-keydown="eventHandlers.input.keydown($event)" ng-focus="eventHandlers.input.focus($event)" ng-blur="eventHandlers.input.blur($event)" ng-paste="eventHandlers.input.paste($event)" ng-trim="false" ng-class="{\'invalid-tag\': newTag.invalid}" ng-disabled="disabled" ti-bind-attrs="{type: options.type, placeholder: options.placeholder, tabindex: options.tabindex, spellcheck: options.spellcheck}" ti-autosize></div></div>'
        ),
          e.put(
            "ngTagsInput/tag-item.html",
            '<span ng-bind="$getDisplayText()"></span> <a class="remove-button" ng-click="$removeTag()" ng-bind="::$$removeTagSymbol"></a>'
          ),
          e.put(
            "ngTagsInput/auto-complete.html",
            '<div class="autocomplete" ng-if="suggestionList.visible"><ul class="suggestion-list"><li class="suggestion-item" ng-repeat="item in suggestionList.items track by track(item)" ng-class="getSuggestionClass(item, $index)" ng-click="addSuggestionByIndex($index)" ng-mouseenter="suggestionList.select($index)"><ti-autocomplete-match scope="templateScope" data="::item"></ti-autocomplete-match></li></ul></div>'
          ),
          e.put(
            "ngTagsInput/auto-complete-match.html",
            '<span ng-bind-html="$highlight($getDisplayText())"></span>'
          );
      },
    ]);
})(),
  $(document).ready(function () {
    $(
      '<audio id="chatAudio"> <source src="https://s3-ap-southeast-1.amazonaws.com/myinterviewtrainer/notify.ogg" type="audio/ogg"> <source src="https://s3-ap-southeast-1.amazonaws.com/myinterviewtrainer/notify.mp3" type="audio/mpeg"> </audio>'
    ).appendTo("body");
    var e = (e = $("#chat_messages"));
    if ($(e).length > 0)
      return (
        (App.global_chat = App.cable.subscriptions.create(
          {
            channel: "ChatRoomsChannel",
            chat_room_id: e.data("chat-room-id"),
          },
          {
            connected: function () {},
            disconnected: function () {},
            received: function (t) {
              var n = $("#current_user_id");
              if (n.length > 0) {
                var o = t.chat_message.match(/(data-user-id="[0-9]*")/g);
                if ((o[0] && (o = o[0].match(/([0-9]+)/g)), n.val() != o)) {
                  t.chat_message = t.chat_message
                    .replace(/right/g, "left")
                    .replace(/#e2e2e2/g, "#ffffff");
                  var i = $("#others_chat_messages");
                  i.length > 0
                    ? i.text(parseInt(i.text()) + 1)
                    : $("#report_issue").append(
                        '<span id="others_chat_messages" class="badge badge-warning">1</span>'
                      ),
                    $("#chatAudio")[0].play();
                }
              }
              e.append(t.chat_message).fadeIn(),
                e.parent().scrollTop(e.parent()[0].scrollHeight);
            },
            send_chat_message: function (e, t, n, o) {
              return this.perform("send_chat_message", {
                chat_message: e,
                chat_room_id: t,
                source: n,
                user_computer_details: o,
              });
            },
          }
        )),
        $("#new_chat_message").submit(function (t) {
          var n;
          n = $(this).find("#chat_message_body");
          var o = {};
          return (
            (o.browser =
              get_OS() + "-" + get_browser().name + get_browser().version),
            (o.window = $(window).width() + "*" + $(window).height()),
            (o.document = $(document).width() + "*" + $(document).height()),
            (o.screen = screen.width + "*" + screen.height),
            $.trim(n.val()).length >= 2 &&
              $.trim(n.val()).length <= 512 &&
              (App.global_chat.send_chat_message(
                n.val(),
                e.data("chat-room-id"),
                window.location.href,
                o
              ),
              n.val("")),
            t.preventDefault(),
            !1
          );
        })
      );
  });
var DIAGRAM_CACHE_LIMIT = 4,
  diagramTypes = {},
  questionDiagramMap = {},
  deleteDiagramMap = {},
  diagramPaperclipPath = {},
  diagramEditorPrefixes = {
    image: "#design_",
    editButton: "#diagram-buttons-",
    tabPanel: "#diagram-tabs-panel-",
    tabContent: "#diagram-tabs-content-",
    addDiagram: "#add-new-diagram-",
    createDiagram: "#create-diagram-button-",
    renameDiagram: "#rename-diagram-button-",
    evaluationProcess: "#evaluation-process-",
  },
  getImageName = function (e) {
    var t = e.substr(e.lastIndexOf("_") + 1);
    return (e = [
      $("[aria-controls = " + e + "]")
        .find("span")
        .text(),
      t,
    ].join("_"));
  },
  getDiagramTabCount = function (e) {
    return $(diagramEditorPrefixes.tabPanel + e + " > ul > li").length;
  },
  updateDiagramMapOnRename = function (e, t) {
    var n = globalConfig.problem_id;
    if (Object.keys(questionDiagramMap).includes(String(n))) {
      var o = questionDiagramMap[n];
      o[e] && ((questionDiagramMap[n][t] = o[e]), delete o[e]);
    }
  },
  diffDiagramMaps = function (e, t) {
    var n = {};
    return (
      Object.keys(e).forEach(function (o) {
        Object.keys(e[o]).forEach(function (i) {
          e[o][i] !== t[o][i] &&
            (Object.keys(n).includes(o) || (n[o] = {}), (n[o][i] = t[o][i]));
        });
      }),
      n
    );
  },
  validateDiagramFilename = function (e) {
    return !!/^[0-9a-zA-Z]+[0-9a-zA-Z_]*[0-9a-zA-Z]+$/.test(e);
  },
  updateDiagramButtonCSS = function (e, t) {
    t && validateDiagramFilename(t)
      ? ($(e).attr("disabled", !1), $(e).addClass("btn-scaler-blue"))
      : ($(e).attr("disabled", !0), $(e).removeClass("btn-scaler-blue"));
  },
  updatePreviousStageTiles = function (e) {
    for (
      var t = diagramEditorPrefixes.evaluationProcess + globalConfig.index,
        n = 0;
      n < e.length;
      ++n
    ) {
      var o = $(t).find(e[n]).find(".status-circle.outer");
      o.find(".inner").remove(),
        o.find("i").remove(),
        o.append("<i class='fa fa-check-circle'/>");
    }
  },
  updateEvaluationStepTile = function (e, t = !0) {
    var n,
      o,
      i,
      r = diagramEditorPrefixes.evaluationProcess + globalConfig.index,
      a = ".right-arrow.outer",
      s = [];
    $(r).find(".active").removeClass("active"),
      $(r).find(".active-arrow").removeClass("active-arrow"),
      $(r).find(".active-circle").removeClass("active-circle"),
      "solved" === e
        ? ((n = ".third-tile"), s.push(".first-tile"), s.push(".second-tile"))
        : "attempted" === e
        ? ((n = ".second-tile"), s.push(".first-tile"))
        : "open" === e && (n = ".first-tile"),
      t && updatePreviousStageTiles(s),
      (i = (o = $(r).find(n)).find(".tile")).addClass("active"),
      i.find(".status-circle.inner").addClass("active-circle"),
      o.find(a).addClass("active-arrow");
  },
  getScope = function (e) {
    return (
      (e = e || "LiveIBTestController"),
      angular.element("[ng-controller=" + e + "]").scope()
    );
  },
  setTabActiveOnDelete = function () {
    $(
      diagramEditorPrefixes.tabPanel + globalConfig.index + " > ul > li:first"
    ).addClass("active"),
      $(
        diagramEditorPrefixes.tabContent + globalConfig.index + " > div:first"
      ).addClass("active");
  },
  updateDiagramEditor = function (e) {
    var t = $(
        diagramEditorPrefixes.tabPanel + globalConfig.index + " > ul > li"
      ).length,
      n = getScope(e);
    (n.showDiagramSubmit = t > 0), n.$apply();
  },
  addClassToTabSpan = function () {
    $(diagramEditorPrefixes.tabPanel + globalConfig.index)
      .find("span")
      .addClass("diagram-text-span");
  },
  createDiagramTab = function (e, t, n) {
    var o = new TabCreator(e, t, n),
      i = o.createTabPanel(),
      r = o.createTabContent();
    $(
      diagramEditorPrefixes.tabPanel + globalConfig.index + " > ul > li.active"
    ).removeClass("active"),
      $(
        diagramEditorPrefixes.tabContent + globalConfig.index + " > div.active"
      ).removeClass("active"),
      $(diagramEditorPrefixes.tabPanel + globalConfig.index + " ul").append(i),
      $(diagramEditorPrefixes.tabContent + globalConfig.index).append(r),
      addClassToTabSpan(),
      showHideDiagramButton(e, n);
  },
  updateDiagramSavePath = function (e, t, n) {
    Object.keys(diagramPaperclipPath).includes(String(e)) ||
      (diagramPaperclipPath[e] = {}),
      (diagramPaperclipPath[e][t] = n);
  },
  check_for_diagrams_cache_limit = function (e) {
    for (
      var t = Object.keys(questionDiagramMap), n = 0, o = 0;
      o < t.length;
      ++o
    ) {
      var i = Object.keys(questionDiagramMap[t[o]]);
      if (((n += i.length), i.includes(e))) return !0;
    }
    return n < DIAGRAM_CACHE_LIMIT;
  },
  createFileFromUrl = function (e, t) {
    for (
      var n = e.split(","),
        o = n[0].match(/:(.*?);/)[1],
        i = atob(n[1]),
        r = i.length,
        a = new Uint8Array(r);
      r--;

    )
      a[r] = i.charCodeAt(r);
    return new File([a], t, {
      type: o,
    });
  },
  blobToDataURL = function (e, t) {
    var n = new FileReader();
    (n.onload = function (e) {
      t(e.target.result);
    }),
      n.readAsDataURL(e);
  },
  createDiagramsList = function (e, t, n) {
    for (var o = [], i = Object.keys(e), r = 0; r < i.length; ++r) {
      var a = [],
        s = [i[r], "svg"].join("."),
        l = createFileFromUrl(e[i[r]], s),
        c = {
          filename: s,
          filetype: "image/svg+xml",
          problem_id: t,
          owner_name: "Attachment",
          owner_attribute: "attachment",
          owner_id: diagramPaperclipPath[t][i[r]] || n,
        };
      a.push(c), a.push(l), o.push(a);
    }
    return o;
  },
  resetDiagramTabs = function (e) {
    $(diagramEditorPrefixes.tabPanel + e + " > ul").html(""),
      $(diagramEditorPrefixes.tabContent + e).html("");
  },
  allowDiagramEditing = function (e) {
    var t = getScope(e),
      n = globalConfig.problem_id;
    return !t.attempted_hash[n] || t.solved_hash[n];
  },
  showHideDiagramButton = function (e, t, n) {
    var o = [e, t].join("_"),
      i = getScope(n),
      r = globalConfig.problem_id;
    i &&
      i.attempted_hash[r] &&
      !i.solved_hash[r] &&
      ($(diagramEditorPrefixes.editButton + o)
        .find(".dropup")
        .addClass("hide"),
      $("[ aria-controls = " + o + "]")
        .find("button")
        .addClass("hide"));
  },
  onTabEdit = function () {
    var e,
      t,
      n = $(this).parent(),
      o = n.find("span").text();
    Object.values(diagramTypes).forEach(function (n) {
      if (o.endsWith(n)) return (e = n), void (t = o.replace("_" + e, ""));
    });
    var i = document.getElementById("rename-diagram-" + globalConfig.index),
      r = n.attr("aria-controls"),
      a = r.substr(r.lastIndexOf("_") + 1);
    i.setAttribute("data-tab-name", r),
      i.setAttribute("data-image-name", [o, a].join("_")),
      i.setAttribute("data-diagram-type", e),
      $("#current_filename_input_" + globalConfig.index).val(t),
      $("#rename-diagram-" + globalConfig.index).modal("show");
  },
  onTabClose = function () {
    var e = $(this).parent(),
      t = e.attr("aria-controls"),
      n = globalConfig.problem_id,
      o = e.find("span").text();
    $.confirm({
      title: "Delete Diagram",
      content: `Are you sure you want to delete the diagram <b>${o}</b>? You won't be able to recover it later.`,
      buttons: {
        cancel: {
          btnClass: "btn-diagram",
          text: "Cancel",
          action: function () {},
        },
        confirm: {
          btnClass: "btn-diagram btn-scaler-blue",
          text: "Delete",
          action: function () {
            var o = getImageName(t);
            Object.keys(deleteDiagramMap).includes(String(n)) ||
              (deleteDiagramMap[n] = []),
              deleteDiagramMap[n].push(o),
              Object.keys(questionDiagramMap).includes(String(n)) &&
                Object.keys(questionDiagramMap[n]).includes(o) &&
                delete questionDiagramMap[n][o],
              e.closest("li").remove(),
              $(
                diagramEditorPrefixes.tabContent + globalConfig.index + " #" + t
              ).remove(),
              tabDeleteActions();
          },
        },
      },
    });
  },
  image_load_handler = function (e) {
    var t = e.target.getAttribute("id").replace("design_", ""),
      n = globalConfig.problem_id,
      o = getImageName(t);
    Object.keys(questionDiagramMap).includes(String(n)) ||
      (questionDiagramMap[n] = {}),
      check_for_diagrams_cache_limit(o) ||
        myinterviewtrainer.problem.submit_diagram(),
      (questionDiagramMap[n][o] = $(diagramEditorPrefixes.image + t).attr(
        "src"
      ));
  },
  exit_diagram_editor_handler = function (e) {
    var t = e.detail.image_name,
      n = e.detail.saved_exit;
    $(diagramEditorPrefixes.image + t).hasClass("ng-hide") &&
      n &&
      myinterviewtrainer.problem.submit_diagram(globalConfig.problem_id),
      $(diagramEditorPrefixes.image + t).css("display", ""),
      $(diagramEditorPrefixes.image + t).removeClass("ng-hide"),
      $(diagramEditorPrefixes.editButton + t + " .btn").removeClass("ng-hide"),
      scrollToDiagramTabPanel();
  },
  diagramFullscreenHandler = function (e) {
    if (globalConfig && globalConfig.index) {
      var t = $(
          diagramEditorPrefixes.tabContent +
            globalConfig.index +
            " .tab-pane.active"
        ).find("iframe"),
        n = "diagram-tab__iframe--fullscreen",
        o = "diagram-tab__iframe--window";
      t.length &&
        (e.altKey && 70 == e.keyCode
          ? (t.toggleClass(o), t.toggleClass(n))
          : 27 == e.keyCode && (t.removeClass(n), t.addClass(o)),
        ((e.altKey && 70 == e.keyCode) || 27 == e.keyCode) &&
          t.hasClass(o) &&
          scrollToDiagramTabPanel());
    }
  },
  scrollToDiagramTabPanel = function () {
    var e = $(diagramEditorPrefixes.tabPanel + globalConfig.index).attr("id");
    document.getElementById(e).scrollIntoView();
  };
$(document).ready(function () {
  $("body").keydown(diagramFullscreenHandler);
});
var STAGE_TITLES = {
  opened: "Create Pull Request (PR)",
  reviewed: "PR Review in Progress",
  approved: "PR Approved",
};
(MergeRequest.prototype.getTitle = function () {
  return getNested(STAGE_TITLES, this.stage) ? STAGE_TITLES[this.stage] : null;
}),
  (MergeRequest.prototype.getDescription = function (e, t) {
    return "opened" === e
      ? t
        ? null
        : "Please trigger the PR to get reviewed by the TA"
      : "approved" === e
      ? "approved" !== t
        ? "PR review is under progress"
        : "PR is approved, go to peers evaluation to review your peers assignment"
      : null;
  }),
  (MergeRequest.prototype.addDetails = function (e) {
    if (e && "reviewed" === this.stage)
      for (var t in e)
        "created_at" === t
          ? (e[t] = formatDateHelper(new Date(e[t]), "HH:mm dd/MM/yyyy", !1))
          : "reviewers" === t && (e[t] = e[t].join(", ")),
          (this.details[t] = e[t]);
  });
var STAGES = ["opened", "reviewed", "approved"],
  updateProgressBar = function (e) {
    $(".status-details__progress--stage").css("width", `${e}%`);
  },
  processApprovedRequest = function () {
    $(".status-details__icon-holder").addClass("status-details__icon--passed"),
      updateProgressBar(100);
  },
  processRequestedChangesRequest = function () {
    $(".status-icon-holder-1").addClass("status-details__icon--passed"),
      $(".status-icon-holder-2").addClass("status-details__icon--changes"),
      $(".status-icon-holder-3").addClass("status-details__icon--pending"),
      $(".status-details__progress").css("background-color", "#fc9100"),
      updateProgressBar(50);
  },
  processOpenedRequest = function () {
    $(".status-icon-holder-1").addClass("status-details__icon--passed"),
      $(".status-icon-holder-2").addClass("status-details__icon--pending"),
      updateProgressBar(50);
  },
  processReviewRequest = function () {
    $(".status-icon-holder-1").addClass("status-details__icon--passed"),
      $(".status-icon-holder-2").addClass("status-details__icon--review"),
      updateProgressBar(50);
  },
  showMergeRequestLoader = function (e) {
    $(`#merge-request-status-${e} #evaluation-loader-container`).css(
      "display",
      "flex"
    ),
      $(`#merge-request-status-${e} .status-details__container`).css(
        "display",
        "none"
      );
  },
  hideMergeRequestLoader = function (e) {
    $(`#merge-request-status-${e} #evaluation-loader-container`).css(
      "display",
      "none"
    ),
      $(`#merge-request-status-${e} .status-details__container`).css(
        "display",
        ""
      );
  },
  createMergeRequestStageDetails = function (e) {
    for (
      var t = getNested(e, "review_state"), n = [], o = 0;
      o < STAGES.length;
      ++o
    ) {
      var i = new MergeRequest(STAGES[o], t);
      i.addDetails(e), n.push(i);
    }
    return n;
  },
  updateMergeRequestProgress = function (e) {
    e
      ? "review_required" === e
        ? processOpenedRequest()
        : "review_requested" === e
        ? processReviewRequest()
        : "requested_changes" === e
        ? processRequestedChangesRequest()
        : "approved" === e && processApprovedRequest()
      : $(".status-icon-holder-1").addClass("status-details__icon--pending");
  };
(DiagramEditor.prototype.toDataUrl = function (e, t) {
  if ("data:image/svg+xml;" === e.substring(0, 19)) return void t(e);
  const n = new FileReader();
  (n.onloadend = function () {
    t(this.result);
  }),
    fetch(e)
      .then((e) => e.blob())
      .then((e) => n.readAsDataURL(e));
}),
  (DiagramEditor.editElement = function (e, t, n, o) {
    return new DiagramEditor(t, n, o).editElement(e);
  }),
  (DiagramEditor.prototype.config = null),
  (DiagramEditor.prototype.drawDomain = "https://embed.diagrams.net/"),
  (DiagramEditor.prototype.ui = "min"),
  (DiagramEditor.prototype.format = "xml"),
  (DiagramEditor.prototype.libraries = !0),
  (DiagramEditor.prototype.frameStyleClass = "diagram-tab__iframe--window"),
  (DiagramEditor.prototype.editElement = function (e) {
    var t = this.getElementData(e);
    return (
      this.toDataUrl(t, (t) => {
        var n = t;
        this.startElement = e;
        var o = this.format;
        "data:image/png;" === n.substring(0, 15)
          ? (o = "xmlpng")
          : ("data:image/svg+xml;" !== n.substring(0, 19) &&
              "svg" != e.nodeName.toLowerCase()) ||
            (o = "xmlsvg"),
          this.startEditing(n, o);
      }),
      this
    );
  }),
  (DiagramEditor.prototype.getElementData = function (e) {
    var t = e.nodeName.toLowerCase();
    return e.getAttribute("svg" == t ? "content" : "img" == t ? "src" : "data");
  }),
  (DiagramEditor.prototype.setElementData = function (e, t) {
    var n = e.nodeName.toLowerCase();
    return (
      "svg" == n
        ? (e.outerHTML = atob(t.substring(t.indexOf(",") + 1)))
        : e.setAttribute("img" == n ? "src" : "data", t),
      e
    );
  }),
  (DiagramEditor.prototype.startEditing = function (e, t, n) {
    if (null == this.frame) {
      window.addEventListener("message", this.handleMessageEvent),
        (this.format = null != t ? t : this.format),
        (this.title = null != n ? n : this.title),
        (this.data = e),
        (this.exitEditor = !1),
        (this.exportDiagram = null),
        (this.lastExportedDiagram = null);
      var o = this.startElement.getAttribute("id");
      (this.imageName = o.replace("design_", "")),
        (this.frame = this.createFrame(
          this.getFrameUrl(),
          this.getFrameStyleClass()
        )),
        $("#" + o)
          .parent("div")
          .append(this.frame),
        this.setWaiting(!0);
    }
  }),
  (DiagramEditor.prototype.setWaiting = function (e) {
    if (null != this.startElement) {
      var t = this.startElement,
        n = t.nodeName.toLowerCase();
      ("svg" != n && "object" != n) || (t = t.parentNode),
        null != t &&
          (e
            ? ((this.frame.style.pointerEvents = "none"),
              (this.previousCursor = t.style.cursor),
              (t.style.cursor = "wait"))
            : ((t.style.cursor = this.previousCursor),
              (this.frame.style.pointerEvents = "")));
    }
  }),
  (DiagramEditor.prototype.setActive = function (e) {
    e
      ? (this.previousOverflow = document.body.style.overflow)
      : (document.body.style.overflow = this.previousOverflow);
  }),
  (DiagramEditor.prototype.stopEditing = function () {
    if (null != this.frame) {
      window.removeEventListener("message", this.handleMessageEvent);
      var e = new CustomEvent("closedDiagramEditor", {
        detail: {
          image_name: this.imageName,
          saved_exit: this.saved_exit,
        },
      });
      window.parent.dispatchEvent(e),
        $("#drawIoIframe_" + this.imageName).remove(),
        this.setActive(!1),
        (this.frame = null);
    }
  }),
  (DiagramEditor.prototype.postMessage = function (e) {
    null != this.frame &&
      this.frame.contentWindow.postMessage(JSON.stringify(e), "*");
  }),
  (DiagramEditor.prototype.getData = function () {
    return this.data;
  }),
  (DiagramEditor.prototype.getTitle = function () {
    return this.title;
  }),
  (DiagramEditor.prototype.getFrameStyleClass = function () {
    return this.frameStyleClass;
  }),
  (DiagramEditor.prototype.getFrameUrl = function () {
    var e = this.drawDomain + "?embed=1&proto=json&spin=1";
    return (
      null != this.ui && (e += "&ui=" + this.ui),
      null != this.libraries && (e += "&libraries=1"),
      null != this.config && (e += "&configure=1"),
      e
    );
  }),
  (DiagramEditor.prototype.createFrame = function (e, t) {
    var n = document.createElement("iframe");
    return (
      n.setAttribute("frameborder", "0"),
      n.setAttribute("class", t),
      n.setAttribute("src", e),
      n.setAttribute("id", "drawIoIframe_" + this.imageName),
      n
    );
  }),
  (DiagramEditor.prototype.setStatus = function (e, t) {
    this.postMessage({
      action: "status",
      messageKey: e,
      modified: t,
    });
  }),
  (DiagramEditor.prototype.handleMessage = function (e) {
    "configure" == e.event
      ? this.configureEditor()
      : "init" == e.event
      ? this.initializeEditor()
      : "autosave" == e.event
      ? (this.save(e.xml, !0, this.startElement), this.export(this.format))
      : "export" == e.event
      ? ((this.lastExportedDiagram = this.exportDiagram),
        (this.exportDiagram = $($.parseXML(e.xml)).find("diagram").text()),
        this.lastExportedDiagram !== this.exportDiagram &&
          this.save(e.data, !1, this.startElement),
        this.exitEditor && this.stopEditing())
      : "save" == e.event
      ? e.exit
        ? (e.event = "exit")
        : this.setStatus("allChangesSaved", !1)
      : "load" === e.event && (this.initial_xml = e.xml),
      "exit" == e.event &&
        ((this.exitEditor = !0),
        "xml" == this.format || e.modified
          ? (this.save(e.xml, !1, this.startElement), this.stopEditing(e))
          : e.exit
          ? ((this.saved_exit = !0), this.export(this.format, e.xml))
          : this.export(this.format, this.initial_xml));
  }),
  (DiagramEditor.prototype.configureEditor = function () {
    this.postMessage({
      action: "configure",
      config: this.config,
    });
  }),
  (DiagramEditor.prototype.initializeEditor = function () {
    this.postMessage({
      action: "load",
      autosave: 1,
      noSaveBtn: "1",
      modified: "unsavedChanges",
      xml: this.getData(),
      title: this.getTitle(),
    }),
      this.setWaiting(!1),
      this.setActive(!0),
      $("#" + this.imageName + "_draw_container .loader-container").css(
        "display",
        "none"
      ),
      trackGaEvent("crowd_source_peer", "loaded_diagram_editor");
  }),
  (DiagramEditor.prototype.save = function (e, t, n) {
    null == n || t || (this.setElementData(n, e), this.done(e, t, n));
  }),
  (DiagramEditor.prototype.export = function (e, t) {
    this.postMessage({
      action: "export",
      format: e,
      xml: t,
      spinKey: "export",
    });
  }),
  (DiagramEditor.prototype.done = function () {}),
  (TabCreator.prototype.createTabListElement = function () {
    var e = document.createElement("li");
    return (
      e.setAttribute("role", "presentation"),
      e.setAttribute("class", "active"),
      e
    );
  }),
  (TabCreator.prototype.createTabAnchorElement = function () {
    var e = document.createElement("a"),
      t = [this.name, this.time].join("_"),
      n = this.createTabNameTextSpan(),
      o = this.createTabEditButton(),
      i = this.createTabDeleteButton();
    return (
      e.setAttribute("aria-controls", t),
      e.setAttribute("data-target", "#" + t),
      e.setAttribute("role", "tab"),
      e.setAttribute("data-toggle", "tab"),
      e.appendChild(n),
      e.appendChild(o),
      e.appendChild(i),
      e
    );
  }),
  (TabCreator.prototype.createIconElement = function (e) {
    var t = document.createElement("i");
    return t.setAttribute("class", e), t;
  }),
  (TabCreator.prototype.createTabNameTextSpan = function () {
    var e = document.createElement("span");
    return (e.innerHTML = this.name), e;
  }),
  (TabCreator.prototype.createTabDeleteButton = function () {
    var e = document.createElement("button"),
      t = this.createIconElement("icon-dustbin");
    return (
      e.setAttribute("class", "close closeTab"),
      e.setAttribute("type", "button"),
      e.appendChild(t),
      e.addEventListener("click", onTabClose, !1),
      e
    );
  }),
  (TabCreator.prototype.createTabEditButton = function () {
    var e = document.createElement("button"),
      t = this.createIconElement("icon-pencil");
    return (
      e.setAttribute("class", "edit editTab"),
      e.setAttribute("type", "button"),
      (e.style.paddingLeft = "1rem"),
      e.appendChild(t),
      e.addEventListener("click", onTabEdit, !1),
      e
    );
  }),
  (TabCreator.prototype.createTabContent = function () {
    var e = document.createElement("div"),
      t = [this.name, this.time].join("_");
    return (
      e.setAttribute("role", "tab-panel"),
      e.setAttribute("class", "tab-pane active"),
      e.setAttribute("id", t),
      (e.innerHTML = this.data),
      e
    );
  }),
  (TabCreator.prototype.createTabPanel = function () {
    var e = this.createTabListElement(),
      t = this.createTabAnchorElement();
    return e.appendChild(t), e;
  });
var starClass = {
    openStar: "icon-star-outline",
    star: "icon-star-2 content__rating-star--color",
  },
  starColor = "#db8d00";
const REVIEW_THRESHOLD_COUNT = 5;
var addRating = function (e, t) {
    for (; t.length; )
      $(t).hasClass("ics") &&
        $(t).addClass(starClass.star).removeClass(starClass.openStar),
        (t = $(t).prev());
    for (t = e.next(); t.length; )
      $(t).hasClass("ics") &&
        $(t).addClass(starClass.openStar).removeClass(starClass.star),
        (t = $(t).next());
  },
  updateTitleMessage = function (e, t, n) {
    var o = e;
    n || ((0 === e || t < REVIEW_THRESHOLD_COUNT) && (o = "NA"));
    var i = "Average Rating: " + o;
    $(".avg-rating").attr("title", i),
      $("#avg-rating-title")
        .text(i)
        .append(
          '&nbsp;<i class="icon-star-2 content__avg-rating-star" data-value=1></i>'
        );
  },
  updateReviewMessage = function (e, t) {
    if (e < REVIEW_THRESHOLD_COUNT && !t) $("#review-count").text("");
    else {
      var n = e + " review";
      (n += e > 1 ? "s" : ""), $("#review-count").text(`(${n})`);
    }
  },
  getFailedCustomInputObj = function (e, t, n, o) {
    return {
      is_truncated: o,
      range: {
        start_line: e,
        end_line: t,
      },
      problem_test_id: n,
    };
  },
  ENABLE_SUBMISSION_STATUS_PUSH = !0,
  alertCount = 0,
  MAX_ALERTS = 5,
  EXIT_WARNINGS = 0,
  CONNECTIVITY_MODAL = 0,
  DISCONNECTED = !1,
  globalConfig = null,
  currentSaveRequest = null,
  getStatusTimer = null,
  autoSave = null,
  autoSaveDiagram = null,
  currentCodeRequest = null,
  currSelLang = null,
  sessionPoll = null,
  MAX_STATUS_COUNT = 30,
  MAX_DIAGRAM_AUTO_SAVE_COUNT = 15,
  LINK_SPEED_THRESHOLD = 400,
  POLL_FREQUENCY = 15e3,
  SNAPSHOT_SCREENSHOT_FREQUENCY = 3e4,
  shownConnectivityToast = !1,
  currentSaveDiagramRequest = null,
  diagramAutoSaveCounter = 0;
let recordedEvents = [];
var rootUrl = "";
(window.unauthorized = !1), (window.ignore_event = !1);
const ANDROID_WEBVIEW_INTERFACE_NAME = "ScalerDroidJSBridge";
var languageMap = {
  4: "python",
  11: "c_cpp",
  35: "javascript",
  44: "c_cpp",
  511: "java",
  512: "ruby",
  42: "swift",
  43: "objectivec",
  27: "csharp",
  114: "go",
  510: "java",
  116: "python",
  55: "java",
  39: "scala",
  62: "text",
  117: "r",
  29: "php",
};
(toastr.options.newestOnTop = !1),
  (toastr.options.closeButton = !0),
  (toastr.options.escapeHtml = !1),
  (toastr.options.preventDuplicates = !0),
  (toastr.options.progressBar = !0),
  (toastr.options.positionClass = "toast-bottom-right");
var summerNoteOptions = {
    focus: !0,
    height: 200,
    toolbar: [
      ["edit", ["undo", "redo"]],
      ["headline", ["style"]],
      ["style", ["bold", "italic", "underline", "clear"]],
      ["font", ["strikethrough", "superscript", "subscript"]],
      ["fontface", ["fontname"]],
      ["textsize", ["fontsize"]],
      ["fontclr", ["color"]],
      ["alignment", ["ul", "ol", "paragraph", "height"]],
      ["table", ["table"]],
      ["insert", ["link", "picture", "hr"]],
      ["help", ["help"]],
    ],
    fontNames: [
      "Serif",
      "Sans",
      "Arial",
      "Arial Black",
      "Courier",
      "Courier New",
      "Comic Sans MS",
      "Helvetica",
      "Impact",
      "Lucida Grande",
      "Source Sans Pro",
      "Nunito",
      "ASAP",
      "Barlow",
      "d-din",
      "Din",
      "Heebo",
      "Lato",
      "montserrat",
      "OpenSans",
      "Oswald",
      "Oxygen",
      "quicksand",
      "Raleway",
      "RobotoMono",
      "Ubuntu",
      "Anton",
      "Archivo",
      "Avenir",
      "CreteRound",
      "D-DIN-Bold",
      "DinPro",
    ],
    fontNamesIgnoreCheck: [
      "Source Sans Pro",
      "Nunito",
      "ASAP",
      "Barlow",
      "d-din",
      "Din",
      "Heebo",
      "Lato",
      "montserrat",
      "OpenSans",
      "Oswald",
      "Oxygen",
      "quicksand",
      "Raleway",
      "RobotoMono",
      "Ubuntu",
      "Anton",
      "Archivo",
      "Avenir",
      "CreteRound",
      "D-DIN-Bold",
      "DinPro",
    ],
  },
  debounce = function (e, t) {
    var n;
    return function () {
      var o = this,
        i = arguments;
      clearTimeout(n),
        (n = setTimeout(function () {
          e.apply(o, i);
        }, t));
    };
  },
  throttle = function (e, t) {
    var n;
    return function () {
      var o = arguments,
        i = this;
      n ||
        (e.apply(i, o),
        (n = !0),
        setTimeout(function () {
          n = !1;
        }, t));
    };
  },
  tabDeleteActions = function () {
    setTabActiveOnDelete(), updateDiagramEditor("LiveIBTestController");
  },
  getSuperBatchIdFromURL = function (e) {
    var t = e.split("/"),
      n = null;
    return (
      -1 != t.indexOf("instructor-dashboard") &&
        (n = t[t.indexOf("instructor-dashboard") + 1]),
      n
    );
  };
window.addEventListener("load", () => {
  $("body").on("click", ".ga-event-track", function (e) {
    var t = e.target,
      n = $(t).data("eventaction");
    trackGaEvent("ib_test", n);
  });
}),
  window.addEventListener("error", function (e) {
    trackGaEvent("ib_test", "javascript_error", e.error.message);
  }),
  (window.onbeforeunload = function () {
    myinterviewtrainer.problem.submit_diagram();
  }),
  (window.onunload = function () {
    cancelAllRequestsAndIntervals();
  }),
  $(document).ready(function () {
    (window.seek_help_pop_up_unsolved_hash = {}),
      (window.seek_help_pop_up_solved_hash = {}),
      $("body").delegate("#failed-test-button", "click", function () {
        $("#custom-input-modal-" + globalConfig.index).modal("show");
        var e = $(this).data("input");
        $("#custom_input_textarea_" + globalConfig.index).val(e);
      }),
      (window.seek_help_pop_up = function (e) {
        location.href.includes("/academy/") &&
          ((classroom_scope = angular
            .element(document.getElementById("academy-classroom"))
            .scope()),
          "solved" == e
            ? ((classroom_scope.seek_help_pop_up_status = "solved"),
              $("#raise-help-nudge_" + globalConfig.index).css(
                "display",
                "none"
              ),
              (window.seek_help_pop_up_solved_hash[globalConfig.problem_id] =
                !0))
            : "unsolved" == e &&
              ((classroom_scope.seek_help_pop_up_status = "unsolved"),
              $("#raise-help-nudge_" + globalConfig.index).css(
                "display",
                "flex"
              ),
              window.trackGaEvent("HelpRequest", "hr_raise_nudge", "show"),
              (window.seek_help_pop_up_unsolved_hash[globalConfig.problem_id] =
                !0)));
      });
  }),
  (function () {
    myinterviewtrainer.createNS("problem"),
      myinterviewtrainer.createNS("problem.submit");
    var e = function (e) {
      if (
        null ===
        (null == e
          ? document.getElementById("editor")
          : document.getElementById("editor_" + e))
      )
        return (myinterviewtrainer.problem.editor = null), null;
      ace.require("ace/ext/language_tools"),
        (myinterviewtrainer.problem.editor =
          null == e ? ace.edit("editor") : ace.edit("editor_" + e));
      var t = myinterviewtrainer.problem.editor;
      return (
        t.setOptions({
          showLineNumbers: !0,
          displayIndentGuides: !0,
          enableBasicAutocompletion: !0,
          fontSize: "14px",
          maxLines: 100,
          minLines: 20,
          showInvisibles: !1,
          showPrintMargin: !1,
          scrollPastEnd: !1,
          useSoftTabs: !0,
          tabSize: 4,
        }),
        (t.$blockScrolling = 1 / 0),
        t.setTheme("ace/theme/chrome"),
        t.getSession().setUseWorker(!1),
        null == e
          ? t
              .getSession()
              .setMode("ace/mode/" + languageMap[$("#select-language").val()])
          : t
              .getSession()
              .setMode(
                "ace/mode/" + languageMap[$("#select-language-" + e).val()]
              ),
        t.commands.addCommand({
          name: "SaveCode",
          bindKey: {
            win: "Ctrl-s",
            mac: "Command-s",
            linux: "Ctrl-s",
          },
          exec: function () {
            myinterviewtrainer.problem.save_code.apply($("#problem-save-btn"));
          },
        }),
        t
      );
    };
    (window.initAceEditor = e),
      (myinterviewtrainer.problem.submit.init = function (t) {
        if (((globalConfig = t), t.live)) n = e(t.index);
        else var n = e(null);
        null !== n &&
          (myinterviewtrainer.problem.change_language.init(t),
          t.live
            ? ($("#select-language-" + t.index)
                .val(t.programming_language_id)
                .trigger("change", "init_editor"),
              myinterviewtrainer.problem.init_auto_save())
            : ($("#select-language").val("44").trigger("change"),
              myinterviewtrainer.problem.init_auto_save()));
      }),
      (myinterviewtrainer.problem.save_code = function (e) {
        e = e;
        if (([null, void 0].includes(e) && (e = !1), DISCONNECTED))
          e || openConnectivityCheck();
        else {
          myinterviewtrainer.problem.disable_save(globalConfig),
            null !== currentSaveRequest && currentSaveRequest.abort();
          var t = null;
          myinterviewtrainer.problem.editor &&
            (t = myinterviewtrainer.problem.editor.getValue()),
            t
              ? (currentSaveRequest = $.ajax({
                  url: rootUrl + "save-code",
                  method: "POST",
                  data: {
                    problem_id: globalConfig.problem_id,
                    programming_language_id: $(
                      "#select-language-" + globalConfig.index
                    ).val(),
                    problem_code: myinterviewtrainer.problem.editor.getValue(),
                  },
                  success: function () {
                    myinterviewtrainer.problem.enable_save(globalConfig);
                  },
                  error: function (e) {
                    $("#ib_sub_loader").fadeOut("fast"),
                      myinterviewtrainer.problem.enable_save(globalConfig),
                      serverErrorHandling(e);
                  },
                }))
              : (toastr.warning("Please provide some code"),
                myinterviewtrainer.problem.enable_save(globalConfig));
        }
      }),
      (myinterviewtrainer.problem.init_auto_save = function () {
        null !== autoSave && clearTimeout(autoSave),
          null !== currentSaveRequest && currentSaveRequest.abort(),
          clearTimeout(getStatusTimer),
          null !== myinterviewtrainer.problem.editor &&
            myinterviewtrainer.problem.editor.on("change", function () {
              autoSave && clearTimeout(autoSave),
                (autoSave = setTimeout(function () {
                  myinterviewtrainer.problem.save_code.apply(
                    $("#problem_save_btn_" + globalConfig.index),
                    [!0]
                  );
                }, 15e3));
            });
      }),
      myinterviewtrainer.createNS("problem.change_language"),
      (myinterviewtrainer.problem.change_language.init = function (e) {
        (currSelLang = parseInt($("#select-language-" + e.index).val())),
          $("#select-keybindings-" + e.index).off("change"),
          $("#select-keybindings-" + e.index).on("change", function () {
            var e = $(this).val();
            "ace" === e
              ? myinterviewtrainer.problem.editor.setKeyboardHandler(null)
              : myinterviewtrainer.problem.editor.setKeyboardHandler(e);
          }),
          $("#select-language-" + e.index).off("change"),
          $("#select-language-" + e.index).on("change", function (t, n) {
            var o = document.querySelector("#liveTest"),
              i = angular.element(o).scope();
            if (DISCONNECTED)
              $(t.target).val(currSelLang),
                null != i &&
                  ((i.curr_selected_language = currSelLang),
                  (i.selected_language_hash[globalConfig.problem_id] =
                    currSelLang),
                  i.safeApply()),
                openConnectivityCheck();
            else {
              var r = this;
              null !== currentSaveRequest && currentSaveRequest.abort(),
                null != currentCodeRequest && currentCodeRequest.abort(),
                $(this).val() &&
                  (e.programming_language_id = parseInt($(this).val())),
                $(".code_editor_loader").show(),
                (currentCodeRequest = $.ajax({
                  url: rootUrl + "solution",
                  data: {
                    programming_language_id:
                      $(this).val() || e.programming_language_id,
                    problem_id: e.problem_id,
                  },
                  success: function (o) {
                    if (o.success) {
                      if (myinterviewtrainer.problem.editor) {
                        var a = function e() {
                          if (myinterviewtrainer.problem.editor.firepadReady) {
                            var t =
                              myinterviewtrainer.problem.editor.getValue();
                            n && "init_editor" === n
                              ? (t && "" !== t) ||
                                myinterviewtrainer.problem.editor.setValue(
                                  o.code || ""
                                )
                              : (myinterviewtrainer.problem.editor.setValue(
                                  o.code || ""
                                ),
                                myinterviewtrainer.problem.save_code(!0)),
                              $(".code_editor_loader").hide();
                          } else setTimeout(e, 100);
                        };
                        myinterviewtrainer.problem.editor.firepadReady
                          ? a()
                          : setTimeout(a, 100),
                          setGlobalConfig(e);
                      }
                      myinterviewtrainer.problem.editor
                        .getSession()
                        .setUseWorker(!1),
                        myinterviewtrainer.problem.editor
                          .getSession()
                          .setMode("ace/mode/" + languageMap[$(r).val()]),
                        (currSelLang = parseInt(
                          $("#select-language-" + e.index).val()
                        ));
                    } else $(t.target).val(currSelLang);
                    null != i &&
                      ((i.curr_selected_language = currSelLang),
                      (i.selected_language_hash[globalConfig.problem_id] =
                        currSelLang),
                      i.safeApply()),
                      $("#ib_sub_loader").fadeOut("fast");
                  },
                  error: function (e) {
                    DISCONNECTED && $(t.target).val(currSelLang),
                      null != i &&
                        ((i.curr_selected_language = currSelLang),
                        (i.selected_language_hash[globalConfig.problem_id] =
                          currSelLang),
                        i.safeApply()),
                      $("#ib_sub_loader").fadeOut("fast"),
                      serverErrorHandling(e);
                  },
                }));
            }
          });
      }),
      (myinterviewtrainer.problem.reset_editor = function () {
        DISCONNECTED
          ? openConnectivityCheck()
          : ($(".code_editor_loader").show(),
            $.confirm({
              icon: "fa fa-warning",
              title: "Warning",
              content:
                "You will irreversibly lose your saved solution. Are you sure you want to go back to the original template?",
              columnClass:
                "col-sm-12 col-md-offset-3 col-lg-offset-3 col-md-6 col-lg-6",
              buttons: {
                confirm: {
                  text: "RESET CODE TEMPLATE",
                  btnClass: "btn-red",
                  action: function () {
                    null !== currentSaveRequest && currentSaveRequest.abort();
                    var e = $("#select-language-" + globalConfig.index).val();
                    $.ajax({
                      url: rootUrl + "reset-code",
                      method: "get",
                      data: {
                        problem_id: globalConfig.problem_id,
                        programming_language_id: e,
                      },
                      success: function (t) {
                        t.success &&
                          (myinterviewtrainer.problem.editor
                            ? (myinterviewtrainer.problem.editor.setValue(
                                t.code
                              ),
                              $(".code_editor_loader").hide())
                            : recordErrors("Code editor Loading infinietly"),
                          myinterviewtrainer.problem.editor
                            .getSession()
                            .setUseWorker(!1),
                          myinterviewtrainer.problem.editor
                            .getSession()
                            .setMode("ace/mode/" + languageMap[e])),
                          $("#ib_sub_loader").fadeOut("fast");
                      },
                      error: function (e) {
                        $("#ib_sub_loader").fadeOut("fast"),
                          recordErrors("Reset code failed"),
                          serverErrorHandling(e);
                      },
                    });
                  },
                },
              },
              backgroundDismiss: !0,
              theme: "supervan",
              closeIcon: !0,
            }));
      }),
      (myinterviewtrainer.problem.submission_status_hash = {}),
      (myinterviewtrainer.problem.submit_code = function (e, t) {
        if (DISCONNECTED) openConnectivityCheck();
        else {
          var n = $("#select-language-" + globalConfig.index).val();
          if (n) {
            $("#submission_status_indicator").attr("style", "display : none;");
            var o = "",
              i = "";
            "submit" == e
              ? ((o =
                  "We will run your solution for all the test cases present. Do you want to submit your solution?"),
                (i = "SUBMIT SOLUTION"))
              : "test" == e
              ? ((o =
                  "We will test your solution with the trivial test case for this problem. Do you want to test your solution?"),
                (i = "TEST CODE"))
              : "custom" == e &&
                ((o =
                  "We will test your solution with the custom input provided. Do you want to test your solution?"),
                (i = "TEST WITH CUSTOM INPUT"));
            var r = globalConfig.custom_input;
            null == r &&
              (r = $("#custom_input_textarea_" + globalConfig.index).val()),
              "test" != e
                ? $.confirm({
                    icon: "fa fa-info-circle",
                    title: "Evaluate Solution",
                    content: o,
                    columnClass:
                      "col-sm-12 col-md-offset-3 col-lg-offset-3 col-md-6 col-lg-6",
                    buttons: {
                      confirm: {
                        text: i,
                        btnClass: "btn-blue",
                        action: function () {
                          null !== currentSaveRequest &&
                            currentSaveRequest.abort(),
                            null != currentCodeRequest &&
                              currentCodeRequest.abort(),
                            $(
                              "#custom-input-modal-" + globalConfig.index
                            ).modal("hide"),
                            trackGaEvent("ib_test", "solution_submit"),
                            (myinterviewtrainer.problem.submission_status_hash[
                              globalConfig.problem_id
                            ] = {
                              submitted: !0,
                              evaluated: !1,
                            }),
                            $.ajax({
                              url: rootUrl + "evaluate-code",
                              method: "post",
                              data: {
                                problem_id: globalConfig.problem_id,
                                programming_language_id: n,
                                submission_content:
                                  myinterviewtrainer.problem.editor.getValue(),
                                submission_type: e,
                                custom_input: r,
                                failed_input_range:
                                  globalConfig.failed_input_range,
                              },
                              success: function (e) {
                                var n = new Date();
                                myinterviewtrainer.problem
                                  .submission_status_hash ||
                                  (myinterviewtrainer.problem.submission_status_hash =
                                    {}),
                                  (myinterviewtrainer.problem.submission_status_hash[
                                    e.problem_id
                                  ] = {
                                    submitted: e.success,
                                    evaluated: !1,
                                  });
                                var o = document.querySelector("#liveTest"),
                                  i = angular.element(o).scope();
                                null != i &&
                                  i.attempted_hash &&
                                  ((i.attempted_hash[e.problem_id] = !0),
                                  i.setShowEndTest(),
                                  $("#attempted_problems").text(
                                    i.countValues(i.attempted_hash),
                                    !0
                                  )),
                                  $("#current_submission_id").val(
                                    e.submission_id
                                  );
                                var r =
                                    "WebSocket" in window ||
                                    "MozWebSocket" in window,
                                  a = /^((?!chrome|android).)*safari/i.test(
                                    navigator.userAgent
                                  );
                                ENABLE_SUBMISSION_STATUS_PUSH && r && !a
                                  ? setTimeout(function () {
                                      myinterviewtrainer.problem
                                        .submission_status_hash[e.problem_id]
                                        .evaluated ||
                                        myinterviewtrainer.problem.status.init(
                                          {
                                            url: rootUrl + "status",
                                            submit_time: n,
                                          },
                                          t
                                        );
                                    }, 5e3)
                                  : (a ||
                                      trackGaEvent("ib_test", "no_websocket"),
                                    trackGaEvent("ib_test", "polling"),
                                    myinterviewtrainer.problem.status.init(
                                      {
                                        url: rootUrl + "status",
                                        submit_time: n,
                                      },
                                      t
                                    )),
                                  $("#status-ht-" + globalConfig.index)
                                    .parent()
                                    .show(),
                                  $("#status-ht-" + globalConfig.index).show(),
                                  $("#status-ht-" + globalConfig.index).html(
                                    'Please wait while we are evaluating... <i class="fa fa-spinner fa-spin" style="float: right;"></i>'
                                  ),
                                  $("#status-ct-" + globalConfig.index).empty(),
                                  $(".main").animate(
                                    {
                                      scrollTop:
                                        $("#status-ct-" + globalConfig.index)[0]
                                          .offsetTop - 50,
                                    },
                                    1e3
                                  );
                              },
                              error: function (e) {
                                $("#ib_sub_loader").fadeOut("fast"),
                                  recordErrors("Submit code failed"),
                                  serverErrorHandling(e);
                              },
                            });
                        },
                      },
                    },
                    backgroundDismiss: !0,
                    theme: "supervan",
                    closeIcon: !0,
                  })
                : (null !== currentSaveRequest && currentSaveRequest.abort(),
                  null != currentCodeRequest && currentCodeRequest.abort(),
                  $.ajax({
                    url: rootUrl + "evaluate-code",
                    method: "post",
                    data: {
                      problem_id: t || globalConfig.problem_id,
                      programming_language_id: n,
                      submission_content:
                        myinterviewtrainer.problem.editor.getValue(),
                      submission_type: e,
                      custom_input: r,
                    },
                    success: function (e) {
                      var n = new Date(),
                        o = document.querySelector("#liveTest"),
                        i = angular.element(o).scope();
                      null != i &&
                        i.attempted_hash &&
                        ((i.attempted_hash[e.problem_id] = !0),
                        i.setShowEndTest(),
                        $("#attempted_problems").text(
                          i.countValues(i.attempted_hash),
                          !0
                        )),
                        $("#current_submission_id").val(e.submission_id),
                        myinterviewtrainer.problem.status.init(
                          {
                            url: rootUrl + "status",
                            submit_time: n,
                          },
                          t
                        ),
                        $("#status-ht-" + globalConfig.index)
                          .parent()
                          .show(),
                        $("#status-ht-" + globalConfig.index).show(),
                        $("#status-ht-" + globalConfig.index).html(
                          'Please wait while we are evaluating... <i class="fa fa-spinner fa-spin" style="float: right;"></i>'
                        ),
                        $("#status-ct-" + globalConfig.index).empty(),
                        $(".main").animate(
                          {
                            scrollTop:
                              $("#status-ct-" + globalConfig.index)[0]
                                .offsetTop - 50,
                          },
                          1e3
                        );
                    },
                    error: function (e) {
                      recordErrors("Submit code failed"),
                        serverErrorHandling(e);
                    },
                  }));
          } else
            alert("Invalid Programming Language provided. Try reloading...");
        }
      }),
      myinterviewtrainer.createNS("problem.status");
    var t = 30;
    (myinterviewtrainer.problem.status.process_status_response = function (e) {
      var t = null;
      if (
        e.problem_id == globalConfig.problem_id &&
        ((t = $("#status-ct-" + globalConfig.index)).parent().show(),
        t.html(e.html),
        0 === e.status)
      ) {
        if (
          (trackGaEvent("ib_test", "status_received", e.push_type || "poll"),
          (myinterviewtrainer.problem.submission_status_hash[e.problem_id] = {
            submitted: !0,
            evaluated: !0,
          }),
          256 == e.result && 0 == e.submission_type)
        ) {
          if (null != (n = document.querySelector("#liveTest")))
            (o = angular.element(n).scope()).solved_hash[e.problem_id] ||
              ((o.solved_hash[e.problem_id] = !0),
              window.seek_help_pop_up("solved"));
        } else if (256 == e.result && 1 == e.submission_type) {
          var n, o;
          if (null != (n = document.querySelector("#liveTest")))
            ((o = angular.element(n).scope()).attempted_hash[e.problem_id] =
              !0),
              o.setShowEndTest();
        } else
          256 != e.result &&
            0 == e.submission_type &&
            location.href.includes("/academy/") &&
            window.seek_help_pop_up("unsolved");
        myinterviewtrainer.problem.enable_submit(globalConfig),
          clearTimeout(getStatusTimer),
          $('[data-toggle="tooltip"]').tooltip(),
          $("#status-ht-" + globalConfig.index).hide();
      }
    }),
      (myinterviewtrainer.problem.status.init = function (e, t) {
        var n = 0;
        myinterviewtrainer.problem.disable_submit(globalConfig),
          $("#custom-input-modal-" + globalConfig.index).modal("hide"),
          clearTimeout(getStatusTimer);
        var o = function o() {
          ++n <= 8 &&
            ($.ajax({
              url: rootUrl + e.url,
              data: {
                submission_id: $("#current_submission_id").val(),
                problem_id: t || globalConfig.problem_id,
              },
              success:
                myinterviewtrainer.problem.status.process_status_response,
            }),
            (getStatusTimer = setTimeout(o, 5e3 * Math.pow(1.5, n))));
        };
        getStatusTimer = setTimeout(o, 5e3);
      }),
      (myinterviewtrainer.problem.disable_submit = function (e) {
        $("#submit_solution_" + e.index).attr("disabled", !0),
          $("#submit_solution_" + e.index).html("Please wait.."),
          $("#test_solution_" + e.index).attr("disabled", !0),
          $("#test_solution_" + e.index).text("Please wait.."),
          $("#test_custom_input_" + e.index).attr("disabled", !0),
          $("#test_custom_input_" + e.index).text("Please wait.."),
          setTimeout(function () {
            myinterviewtrainer.problem.enable_submit(e);
          }, 1e3 * t);
      }),
      (myinterviewtrainer.problem.enable_submit = function (e) {
        $("#submit_solution_" + e.index).attr("disabled", !1),
          $("#submit_solution_" + e.index).html(
            '<i class="fa fa-play-circle" style="color: #5cb85c;"></i>&nbsp;&nbsp;Submit'
          ),
          $("#test_solution_" + e.index).attr("disabled", !1),
          $("#test_solution_" + e.index).html(
            '<i class="fa fa-play-circle" style="color: #f0ad4e;"></i>&nbsp;&nbsp;Test'
          ),
          $("#test_custom_input_" + e.index).attr("disabled", !1),
          $("#test_custom_input_" + e.index).html(
            '<i class="fa fa-bug" style="color: #5cb85c;"></i>&nbsp;&nbsp;Test with Custom Input'
          );
      }),
      (myinterviewtrainer.problem.disable_save = function (e) {
        $("#problem_save_btn_" + e.index).attr("disabled", !0),
          $("#problem_save_btn_" + e.index).html("Saving..."),
          setTimeout(function () {
            myinterviewtrainer.problem.enable_save(e);
          }, 5e3);
      }),
      (myinterviewtrainer.problem.enable_save = function (e) {
        $("#problem_save_btn_" + e.index).attr("disabled", !1),
          $("#problem_save_btn_" + e.index).html(
            '<i class="fa fa-save" style="color: #5cb85c;"></i>&nbsp;&nbsp;Save'
          );
      }),
      (myinterviewtrainer.problem.init_auto_save_diagram = function (e) {
        null !== autoSaveDiagram && clearInterval(autoSaveDiagram),
          (autoSaveDiagram = setInterval(
            myinterviewtrainer.problem.submit_diagram,
            6e5
          ));
        var t = document.querySelector(diagramEditorPrefixes.image + e);
        t.removeEventListener("load", image_load_handler, !1),
          t.addEventListener("load", image_load_handler, !1),
          window.removeEventListener(
            "closedDiagramEditor",
            exit_diagram_editor_handler,
            !1
          ),
          window.addEventListener(
            "closedDiagramEditor",
            exit_diagram_editor_handler,
            !1
          );
      }),
      (myinterviewtrainer.problem.populateDrawingTool = function (e) {
        var t;
        t = e.startsWith("start_diagram")
          ? e.replace("start_diagram_", "")
          : e.replace("design_", "");
        var n = document.getElementById("design_" + t);
        allowDiagramEditing() &&
          ($(diagramEditorPrefixes.image + t).addClass("ng-hide"),
          $(diagramEditorPrefixes.editButton + t + " .btn").addClass("ng-hide"),
          $("#" + t + "_draw_container .loader-container").css(
            "display",
            "flex"
          ),
          DiagramEditor.editElement(n),
          myinterviewtrainer.problem.init_auto_save_diagram(t),
          trackGaEvent("crowd_source_peer", "start_drawing_tool"));
      }),
      (myinterviewtrainer.problem.submit_diagram = function (e, t = null) {
        var n = questionDiagramMap;
        if (
          (e &&
            ((n = {}),
            Object.keys(questionDiagramMap).includes(String(e)) &&
              (n[e] = questionDiagramMap[e])),
          0 !== Object.keys(n).length ||
            0 !== Object.keys(deleteDiagramMap).length)
        ) {
          if (!e) {
            if (diagramAutoSaveCounter >= MAX_DIAGRAM_AUTO_SAVE_COUNT)
              return void clearInterval(autoSaveDiagram);
            diagramAutoSaveCounter++;
          }
          deleteDiagram(rootUrl);
          for (
            var o = JSON.parse(JSON.stringify(n)), i = Object.keys(o), r = 0;
            r < i.length;
            ++r
          )
            for (
              var a = createDiagramsList(o[i[r]], i[r]), s = 0;
              s < a.length;
              ++s
            ) {
              var l = a[s][0],
                c = a[s][1];
              new S3Store().uploadAttachment(
                l,
                c,
                function (n, o, i) {
                  var r = o.filename.split(".")[0];
                  delete questionDiagramMap[o.problem_id][r],
                    $.ajax({
                      url: rootUrl + "save-diagram",
                      method: "POST",
                      data: {
                        attachment_id: o.owner_id,
                        filename: o.filename,
                        filesize: i.size,
                        filetype: i.type,
                        lastModified: i.lastModified,
                      },
                      success: function (n) {
                        n.success &&
                          e &&
                          (toastr.success(
                            "All diagrams saved successfully!",
                            "SUCCESS"
                          ),
                          t && t(e));
                      },
                    });
                },
                function (t) {
                  recordErrors(t),
                    e && toastr.error("Failed to save diagrams!", "ERROR");
                }
              );
            }
        } else e && t && t(e);
      });
  })();
var ibTestApp = angular.module("ibTestApp", [
  "ng-showdown",
  "ngAnimate",
  "angularFileUpload",
  "webcam",
  "summernote",
  "ngTagsInput",
]);
ibTestApp.controller("RegisterIBTestController", [
  "$scope",
  "testBackend",
  "$sce",
  "FileUploader",
  function (e) {
    angular.element(document).ready(function () {
      function t() {
        e.candidate_degree = null;
      }
      t();
    });
  },
]),
  ibTestApp.controller("LiveIBTestController", [
    "$scope",
    "testBackend",
    "$sce",
    "FileUploader",
    "$interval",
    function (e, t, n, o, r) {
      function a() {
        function a(e) {
          return (e || "").replace(/\s+/g, "").length > 65500;
        }
        function s(e) {
          var t = "";
          return (
            "custom_input" == e &&
              (t = $("#custom_input_textarea_" + globalConfig.index).val()),
            !a(t) ||
              (toastr.info(
                "Maximum input test data size is 65,500 characters!",
                "Info"
              ),
              !1)
          );
        }
        function l() {
          clearTimeout(p),
            (e.show = !0),
            (p = setTimeout(function () {
              e.show = !1;
            }, 5e3));
        }
        function c(e, t, n) {
          let o = document.getElementsByClassName(e),
            i = !1,
            r = [];
          for (let e = 0; e < o.length; e++) {
            let a = {
              id: o[e].value,
              selected: o[e].checked && t,
            };
            n.find((e) => String(e.id) === a.id).selected !== a.selected &&
              (i = !0),
              r.push(a);
          }
          return [r, i];
        }
        function u(n) {
          $("#ib_sub_loader").show();
          var o = {
            hint_id: n,
          };
          (e.current_rating = 0),
            t.getHintAccess(o, function (t) {
              if (t.success) {
                $("#ib_sub_loader").hide(),
                  (e.current_hint_title = t.hint.title),
                  (e.current_hint_descripton = t.hint.markdown_content),
                  (e.video_rating = t.rating),
                  (e.current_rating = t.rating),
                  (e.average_rating = t.average_rating),
                  (e.rating_count = t.rating_count),
                  (e.feedback_content = t.feedback_content),
                  (e.save_feedback = t.feedback_content),
                  (e.video_feedback_negative_options =
                    t.video_feedback_negative_options),
                  (e.video_feedback_positive_options =
                    t.video_feedback_positive_options),
                  (e.video_feedback_positive_threshold =
                    t.video_feedback_positive_threshold),
                  (e.provideNegativeFeedback = !1),
                  (e.providePositiveFeedback = !1),
                  (e.cancel = !1),
                  (e.initial = !0),
                  (e.show = !1),
                  (e.provideFeedback = !1),
                  (e.rating_change = !1),
                  (e.videoId = getNested(t.hint, "video_id")),
                  (e.test_problem = e.test_problems.find(
                    (t) => t.id === e.currentProblemId
                  )),
                  null == e.video_rating && (e.video_rating = 0),
                  e.video_rating &&
                    ((e.initial = !1),
                    (e.provideNegativeFeedback =
                      e.video_rating < e.video_feedback_positive_threshold),
                    (e.providePositiveFeedback = !e.provideNegativeFeedback));
                for (var n = e.video_rating, o = 1; o <= n; o++) {
                  var i = ".video-rating > i[data-value=" + o + "]";
                  $(i).addClass(starClass.star).removeClass(starClass.openStar);
                }
                for (o = n + 1; o <= 5; o++) {
                  i = ".video-rating > i[data-value=" + o + "]";
                  $(i).addClass(starClass.openStar).removeClass(starClass.star);
                }
                updateTitleMessage(
                  e.average_rating,
                  e.rating_count,
                  e.current_rating
                ),
                  updateReviewMessage(e.rating_count, e.current_rating),
                  requestAnimationFrame(function () {
                    MathJax.typesetPromise(["#showHintModal"]);
                  }),
                  $("#showHintModal").modal("show");
              } else toastr.warning("Error", t.error_message);
            });
        }
        var d,
          h,
          p,
          f = null,
          m = "snapshots/interviewbit_test_sessions",
          g = null,
          v = "screenshots/interviewbit_test_sessions",
          b = new S3Store("us-west-2", "ib-assessment-tests"),
          y = new S3Store("us-west-2", "ib-assessment-tests"),
          w =
            "https://dajh2p2mfq4ra.cloudfront.net/assets/icons/ib-logo-hire-8f3406787bc4241628bb7e5bea43d56a7ab275401134c297b6631c8b81cd3996.png",
          _ = 18603,
          C = null,
          k = null,
          S = null,
          x = [],
          E = {};
        (e.supported_languages = null),
          (e.LOW_BANDWIDTH = !0),
          (e.dsml_submission_state = 1),
          (e.filter_tags = {}),
          (e.all_tags = []),
          (e.member_emails = []),
          (e.section_timers = {}),
          (e.showDiagramSubmit = !1),
          (e.myinterviewtrainer = window.myinterviewtrainer),
          (e.evaluation_list = []),
          (e.evaluation_data_details = {}),
          (e.evaluation_stage = {}),
          (e.problem_judge_types = {}),
          (e.gchrSuggestions = []),
          (e.gchrBeginner = !1),
          (e.enrolledGchrJoin = []),
          (e.maxwellVisibleResults = []),
          (e.fromMobileApp = !!window[ANDROID_WEBVIEW_INTERFACE_NAME]),
          (e.useWebcam = !1),
          (e.show_end_test = !0),
          (e.setShowEndTest = function () {
            var t =
                "object" == typeof e.attempted_hash
                  ? Object.keys(e.attempted_hash)
                  : [],
              n = !0;
            for (var o in e.sections)
              if (e.sections[o].mandatory) {
                for (var i in e.sections[o].questions)
                  if (!t.includes(e.sections[o].questions[i] + "")) {
                    n = !1;
                    break;
                  }
                if (!n) break;
              }
            e.show_end_test = n;
          }),
          (e.maxwellSubmissionFilter = function (t) {
            return e.maxwellVisibleResults.includes(t.result);
          }),
          (e.setMaxwellVisibleResults = function (t) {
            e.maxwellVisibleResults = t;
          }),
          $("body").delegate("#failed-test-button", "click", function () {
            $("#custom-input-modal-" + globalConfig.index).modal("show");
            var t = $(this).data("input");
            $("#custom_input_textarea_" + globalConfig.index).val(t);
            var n = getFailedCustomInputObj(
              $(this).data("start-line"),
              $(this).data("end-line"),
              $(this).data("problem-test-id"),
              $(this).data("truncated")
            );
            e.$apply(function () {
              e.failedCustomInput = n;
            });
          }),
          (e.previewMaxwellSubmissionLog = function (t, n = !1) {
            (e.maxwellSubmissionLogs = t.errors || t.output),
              (e.maxwellSubmissionVideos = t.videos),
              (e.maxwellSubmissionResult = t.result),
              (e.maxwellSubmissionLogIsTrimmed = n),
              $("#maxwellSubmissionLogs").modal("show");
          }),
          (e.checkDownloadSpeed = function () {
            (C = new Image()),
              (d = new Date().getTime()),
              (C.src = w),
              (C.onload = function () {
                h = new Date().getTime();
                var t = e.downloadSpeedInKiloBits();
                console.log("Your link speed (in Kbps): ", t),
                  (e.LOW_BANDWIDTH = t < LINK_SPEED_THRESHOLD),
                  console.log("Low bandwidth Internet: ", e.LOW_BANDWIDTH),
                  e.LOW_BANDWIDTH && recordRestrictedEvent("low_bandwidth", t);
              });
          }),
          (e.copyCloneCommand = function () {
            var e = document.getElementById("gitCloneCommand");
            e.select(),
              e.setSelectionRange(0, 99999),
              document.execCommand("copy");
          }),
          (e.downloadSpeedInKiloBits = function () {
            return ((8 * _) / ((h - d) / 1e3) / 1024).toFixed(2);
          }),
          (e.safeApply = function (e) {
            var t = this.$root.$$phase;
            "$apply" == t || "$digest" == t
              ? e && "function" == typeof e && e()
              : this.$apply(e);
          }),
          (e.problemInitializers = function (t) {
            (e.filter_tags[t] = []),
              e.ideas &&
                ((e.original_idea_indices = {}),
                angular.forEach(e.ideas[t].idea_associations, function (t, n) {
                  (e.original_idea_indices[t.idea_association_id] = n),
                    angular.forEach(t.tags, function (t) {
                      e.all_tags.includes(t.name) || e.all_tags.push(t.name);
                    });
                }),
                angular.forEach(e.ideas[t].wishlist_ideas, function (t) {
                  angular.forEach(t.tags, function (t) {
                    e.all_tags.includes(t.name) || e.all_tags.push(t.name);
                  });
                }));
          }),
          (e.getViewedSubmissions = function () {
            t.viewedSubmissions(function (t) {
              t.success &&
                (e = angular.extend(e, {
                  viewedLeaderboardSubmissions: t.viewed_submissions,
                }));
            });
          }),
          (sortProblemsBasedOnSection = function (e, t) {
            var n = [],
              o = [],
              i = {},
              r = e.length;
            for (let o = 0; o < r; o++) {
              var a = e[o].id;
              for (var s in ((i[a] = e[o]), t))
                t[s].questions.includes(Number(a)) && n.push([a, s]);
            }
            n.sort(function (e, t) {
              return e[1] - t[1];
            });
            var l = n.length;
            for (let e = 0; e < l; e++) o.push(i[n[e][0]]);
            return o;
          }),
          (e.getLiveTestProblems = function () {
            t.getLiveTestProblems(function (n) {
              n.success
                ? ((sections = n.current_test.questions_blue_print
                    ? n.current_test.questions_blue_print.sections
                    : null),
                  (e = angular.extend(e, n, n.current_test, {
                    test_problems: sortProblemsBasedOnSection(
                      n.test_problems,
                      sections
                    ),
                    ibt_problems: n.ibt_problems,
                  })),
                  (diagramTypes = n.diagram_types),
                  angular.forEach(e.test_problems, function (t, n) {
                    var o = e.test_problems[n];
                    (e.test_problems[n].use_editor =
                      e.diagram_editor_hash[o.id]),
                      (e.test_problems[n].submit_diagram =
                        e.diagram_submission_hash[o.id]),
                      (e.problem_judge_types[o.id] = o.judge_type),
                      e.is_mentee || (e.test_problems[n].submit_diagram = !1),
                      Array.isArray(o.answer) &&
                        o.answer.forEach(function (e, t) {
                          if (/(@\$@.*){2}/.test(e)) {
                            let e = "#answer_" + o.id + "-" + (t + 1);
                            requestAnimationFrame(function () {
                              MathJax.typesetPromise([e]);
                            });
                          }
                        });
                  }),
                  [null, void 0].includes(e.sections) &&
                    (e.sections = n.current_test.questions_blue_print.sections),
                  angular.forEach(e.section_usage_hash, function (t, n) {
                    e.initializeSectionTimers(n);
                  }),
                  (window.POLL_FREQUENCY = n.POLL_FREQUENCY || 15e3),
                  (window.SNAPSHOT_SCREENSHOT_FREQUENCY =
                    n.SNAPSHOT_SCREENSHOT_FREQUENCY || 3e4),
                  $("#liveTest").show(),
                  requestAnimationFrame(function () {
                    MathJax.typesetPromise(["#problem_content"]);
                  }),
                  $("#ib_loader").fadeOut("slow", function () {
                    setTimeout(function () {
                      $("#index_page").click(), $(".tooltip-enable").tooltip();
                    }, 500),
                      e.show_problem_alert &&
                        toastr.info(
                          "Problems don't change on every refresh for test taking candidates. It is only for demonstration purposes.",
                          "Info",
                          {
                            timeOut: 0,
                            extendedTimeOut: 0,
                          }
                        );
                  }),
                  setTimeout(function () {
                    $("#initializer").fadeOut(),
                      setTimeout(function () {
                        window.dispatchEvent(
                          new CustomEvent("TEST_PROBLEMS_DATA_LOADED", {
                            detail: "",
                          })
                        );
                      }, 1e3);
                  }, 1e3),
                  e.do_polling &&
                    (sessionPoll = setInterval(function () {
                      t.durationPoll(
                        {
                          current_duration: e.test_duration,
                          current_extra_time: e.extra_time,
                        },
                        function (e) {
                          if (e.success)
                            if (
                              ((window.POLL_FREQUENCY =
                                e.POLL_FREQUENCY || 15e3),
                              (window.SNAPSHOT_SCREENSHOT_FREQUENCY =
                                e.SNAPSHOT_SCREENSHOT_FREQUENCY || 3e4),
                              closeConnectivityCheck(),
                              e.disqualified)
                            )
                              toastr.clear(),
                                toastr.info(
                                  "You have been disqualified. Please contact your test administrator for further queries. Redirecting...",
                                  "DISQUALIFIED!",
                                  {
                                    timeOut: 0,
                                  }
                                ),
                                setTimeout(function () {
                                  location.reload();
                                }, 5e3);
                            else if (e.reload) {
                              var t =
                                  e.status_message ||
                                  "Test Settings have been changed. Refreshing..",
                                n = 1e3 * randomInt(2, 32);
                              toastr.info(t, "Info", {
                                timeOut: n,
                              }),
                                setTimeout(function () {
                                  location.reload();
                                }, n);
                            } else
                              null != e.status_message &&
                                "" != e.status_message &&
                                toastr.info(e.status_message, "ANNOUNCEMENT", {
                                  timeOut: 0,
                                  extendedTimeOut: 0,
                                });
                        },
                        function (e) {
                          e.success || recordErrors("Polling Failed");
                        }
                      );
                    }, POLL_FREQUENCY)),
                  (e.useWebcam =
                    ("webcam_optional" === window.webcam && !e.fromMobileApp) ||
                    "webcam_required" === window.webcam),
                  e.useWebcam &&
                    (e.makeSnapshot(),
                    setInterval(function () {
                      var t = !1;
                      if (
                        (e.LOW_BANDWIDTH
                          ? Math.random() > 0.5 && (t = !0)
                          : (t = !0),
                        t)
                      )
                        try {
                          e.makeSnapshot(), e.takeScreenshot();
                        } catch (e) {
                          trackGaEvent("spy", "fail", navigator.appName);
                        }
                    }, SNAPSHOT_SCREENSHOT_FREQUENCY),
                    ["webcam_required"].includes(window.webcam) &&
                      setInterval(function () {
                        window.checkForWebcam();
                      }, 15e3)),
                  e.setShowEndTest())
                : toastr.error(
                    n.error_message || "Something went wrong!",
                    "ERROR"
                  );
              var o = getSuperBatchIdFromURL(location.href);
              o &&
                t.getProblemPSP(
                  {
                    superBatchId: o,
                  },
                  function (t) {
                    (e.batch_psp = t.batch_psp),
                      (e.overall_psp = t.overall_psp);
                  }
                );
            });
          }),
          (e.renderHtml = function (e) {
            return n.trustAsHtml(e);
          }),
          (e.trustSrc = function (e) {
            return n.trustAsResourceUrl(e);
          }),
          (e.setCurrentSection = function (t) {
            for (var n in ((e.current_section = ""), e.sections)) {
              e.sections[n].questions.includes(t) &&
                (e.current_section = parseInt(n));
            }
          }),
          (e.isExpectedOutputEnabled = function (t) {
            return getNested(
              e.current_test.submission_settings,
              t,
              "enable_seo"
            );
          }),
          (e.populateCodeEditorWrapper = function (n) {
            var o = 0,
              i = {};
            for (var r in e.test_problems) {
              var a = e.test_problems[r];
              a.id == n && ((o = r), (i = a));
            }
            const s = [
              {
                problem_id: n,
              },
            ];
            t
              .getGroupRequestSuggestions({
                doubts: JSON.stringify(s),
              })
              .then((t) => {
                (e.gchrBeginner = t.data.current_hr_usage.gchr_beginner),
                  (e.gchrSuggestions = t.data.help_requests.map((t) => {
                    let n = formatDateHelper(
                        new Date(t.start_time),
                        "ddd,d MMM"
                      ),
                      o = formatDateHelper(new Date(t.start_time), "h:mm TT");
                    return (
                      setTimeout(function () {
                        e.setUpObserversForGchrSuggestion();
                      }, 0),
                      {
                        ...t,
                        start_time: n + " " + o,
                      }
                    );
                  })),
                  (e.gchrSessionsEnrolled = t.data.group_sessions_enrolled.map(
                    (t) => {
                      let n = formatDateHelper(
                          new Date(t.start_time),
                          "ddd,d MMM"
                        ),
                        o = formatDateHelper(new Date(t.start_time), "h:mm TT");
                      const i = new Date(),
                        r = 5,
                        a = new Date(i.getTime() + 6e4 * r);
                      return (
                        new Date(t.start_time) > a
                          ? setTimeout(() => {
                              e.enrolledGchrJoin.push(t.id);
                            }, new Date(t.start_time) - a)
                          : e.enrolledGchrJoin.push(t.id),
                        {
                          ...t,
                          start_time: n + " " + o,
                        }
                      );
                    }
                  ));
              }),
              (e.is_on_all_question_tab = !1),
              e.populateCodeEditor(i, parseInt(o)),
              initializeCarousel(),
              location.href.includes("/academy/") &&
                ((classroom_scope = angular
                  .element(document.getElementById("academy-classroom"))
                  .scope()),
                classroom_scope &&
                  ((current_tab = classroom_scope.currentTab),
                  "completed" ==
                    classroom_scope.data.tabs[current_tab].status &&
                    (e.solved_hash[n]
                      ? window.seek_help_pop_up("solved")
                      : $("#help_options").css("display", "none"))));
          }),
          (e.openAllProblemsTab = function () {
            (e.is_on_all_question_tab = !0),
              window.__NOTEBOOKS__ &&
                window.__NOTEBOOKS__.clearAssociation("file");
          }),
          (e.setUpObserversForGchrSuggestion = function () {
            attachObserverByClass("scheduled-gchr-list__item-card", (e) => {
              const t = $(e.target).attr("data-help-request-id");
              window.storeEsEvent(
                "gchr-item-visible-hr-assignment-seen",
                "click",
                t
              );
            });
          }),
          window.addEventListener("MAXWELL_STATUS_UPDATE", function (t) {
            const n = t.detail;
            n.latest_submission &&
              ((e.maxwellLatestSubmission = n.latest_submission),
              ["correct_answer", "wrong_answer"].includes(
                e.maxwellLatestSubmission.result
              ) &&
                e.currentProblemId &&
                M(e.currentProblemId)),
              n.git_project_url && (e.maxwellRepoUrl = n.git_project_url),
              n.git_pull_url && (e.maxwellPullUrl = n.git_pull_url),
              n.git_credentials && (e.maxwellCredentials = n.git_credentials);
          }),
          (e.has_problem_stage = function (t, n) {
            return getNested(
              e.problems_config_hash,
              t,
              "stages",
              n,
              "config_value"
            );
          }),
          (e.has_crowd_evaluation_stages = function (t) {
            let n = e.has_problem_stage(t, "peer_evaluation"),
              o = e.has_problem_stage(t, "view_feedback");
            return n || o;
          });
        var T = function (t, n) {
            e.solved_hash[n]
              ? ((e.evaluation_stage[t] = "solved"), e.showFeedback())
              : e.attempted_hash[n]
              ? ((e.evaluation_stage[t] = "attempted"), e.getEvaluations())
              : (e.evaluation_stage[t] = "open"),
              updateEvaluationStepTile(e.evaluation_stage[t]);
          },
          A = function () {
            return e.editor_firebase_slug
              ? e.editor_firebase_slug
              : e.ibt_session_slug;
          };
        e.populateCodeEditor = function (n, o) {
          if (
            (e.setCurrentSection(n.id),
            (e.currentProblemId = n.id),
            (e.current_section_info =
              e.current_test.questions_blue_print.sections[
                e.section_problem_hash[n.id]
              ]),
            (e.answer = null),
            e.current_test.enable_section_locking &&
              e.section_timers[e.current_section].ended)
          )
            $.alert({
              icon: "fa fa-info-circle",
              title: "Section has Ended!",
              content:
                "<b>" +
                e.current_section_info.name +
                "</b> has ended. You cannot attempt any questions in this section.",
              columnClass:
                "col-sm-12 col-md-offset-2 col-lg-offset-2 col-md-8 col-lg-8",
              backgroundDismiss: !0,
              theme: "supervan",
              closeIcon: !0,
            }),
              setTimeout(function () {
                $("#index_page").click();
              }, 1e3);
          else if (
            e.current_test.enable_section_locking &&
            e.section_timers[e.current_section].locked
          )
            $.confirm({
              icon: "fa fa-warning",
              title:
                "Do you really want to unlock '" +
                e.current_section_info.name +
                "'?",
              content: "Once unlocked, your section timer will not stop!",
              columnClass: "col-sm-12 col-md-12 col-lg-12",
              buttons: {
                confirm: {
                  text: "Unlock Section",
                  btnClass: "btn-blue",
                  action: function () {
                    e.unlockSection(), $("#index_page").click();
                  },
                },
                cancel: {
                  text: "Cancel",
                  btnClass: "btn-red",
                  action: function () {
                    $("#index_page").click();
                  },
                },
              },
              backgroundDismiss: !0,
              theme: "supervan",
              closeIcon: !0,
            }),
              setTimeout(function () {
                $("#index_page").click();
              }, 1e3);
          else {
            (e.current_problem_no = o + 1),
              $("#ib_sub_loader").show(),
              $("#div_editor_" + (o + 1)).html(
                '<textarea id="editor_' + (o + 1) + '" rows="18"></textarea>'
              );
            var i =
              e.curr_selected_language ||
              Object.keys(e.all_problems_supported_languages[n.id])[0];
            null != e.selected_language_hash[n.id] &&
              -1 != e.selected_language_hash[n.id] &&
              -1 !=
                e.supported_languages.indexOf(e.selected_language_hash[n.id]) &&
              (i = e.selected_language_hash[n.id]);
            var r = $("#problem_" + (o + 1)).data("problemId");
            if (
              ((e.curr_selected_language = i),
              setGlobalConfig({
                problem_id: r,
                programming_language_id: i,
                live: !0,
                index: $("#problem_" + (o + 1)).data("problemIndex"),
              }),
              window.__NOTEBOOKS__ &&
                (window.__NOTEBOOKS__.updateAssociation({
                  type: "file",
                  associateType: "Problem",
                  associateId: r,
                  label: e.test_problems.filter(function (e) {
                    return e.id === r;
                  })[0].problem_statement,
                }),
                window.IBNotebook && window.IBNotebook.updateAssociatedNote()),
              e.opened_hash[n.id]
                ? $("#ib_sub_loader").fadeOut("fast")
                : t.markProblemOpened(
                    {
                      problem_id: n.id,
                    },
                    function () {
                      (e.opened_hash[n.id] = !0),
                        $("#ib_sub_loader").fadeOut("fast");
                    }
                  ),
              e.has_crowd_evaluation_stages(n.id))
            ) {
              o = globalConfig.index;
              if ("design" === n.judge_type) {
                var a = getDiagramTabCount(o);
                (e.showDiagramSubmit = a > 0), T(o, n.id), V(n.id, a);
              } else "maxwell" === n.judge_type && (T(o, n.id), I(n.id));
            }
            ["default"].includes(n.use_editor) &&
              ([
                "code",
                "code_no_template",
                "shell",
                "sql",
                "machine_learning",
                "data_science",
                "approximate",
                "test_coverage",
                "non_deterministic",
              ].includes(n.judge_type)
                ? (myinterviewtrainer.problem.submit.init({
                    problem_id: $("#problem_" + (o + 1)).data("problemId"),
                    programming_language_id: i,
                    live: !0,
                    index: $("#problem_" + (o + 1)).data("problemIndex"),
                  }),
                  myinterviewtrainer.problem.editor &&
                    !myinterviewtrainer.problem.editor.firepadInitiated &&
                    e.initFirePad({
                      ibt_session_slug: A(),
                      problem_id: $("#problem_" + (o + 1)).data("problemId"),
                    }))
                : ["maxwell"].includes(n.judge_type)
                ? (e.has_problem_stage(n.id, "code_evaluation") &&
                    t.getMaxwellLastStatus(
                      {
                        test_session_id: e.test_session_id,
                        problem_id: n.id,
                      },
                      function (t) {
                        e.maxwellLatestSubmission = t;
                      }
                    ),
                  e.setMaxwellVisibleResults(["Passed", "Failed", "Running"]),
                  (e.maxwellRepoUrl = ""),
                  M(n.id))
                : (null !== autoSave && clearTimeout(autoSave),
                  t.getSolution(
                    {
                      problem_id: n.id,
                      programming_language_id: -1,
                    },
                    function (t) {
                      if (t.success)
                        if (
                          ($("#ib_sub_loader").fadeOut("fast"),
                          (e.solution = t.code),
                          "objective" == t.problem.judge_type)
                        )
                          "text" == t.problem.answer_type
                            ? $(".obj-value-" + t.problem.id).val(e.solution)
                            : "multiple_choice" == t.problem.answer_type &&
                              $(".checked_" + t.problem.id).each(function (
                                e,
                                n
                              ) {
                                var o = $(n).val();
                                -1 != t.code.indexOf(o)
                                  ? $(n).prop("checked", !0)
                                  : $(n).prop("checked", !1);
                              });
                        else if (
                          ["ideathon", "project"].includes(t.problem.judge_type)
                        ) {
                          for (var n in ((e.milestones = Object.assign(
                            e.milestones || {},
                            t.milestones || {}
                          )),
                          (e.ideas = Object.assign(
                            e.ideas || {},
                            t.ideas || {}
                          )),
                          (e.project_links = Object.assign(
                            e.project_links || {},
                            t.project_links || {}
                          )),
                          (e.users = Object.assign(
                            e.users || {},
                            t.users || {}
                          )),
                          e.ideas))
                            (e.ideas[n].idea_associations = Object.values(
                              e.ideas[n].idea_associations
                            )),
                              (e.ideas[n].wishlist_ideas = Object.values(
                                e.ideas[n].wishlist_ideas
                              )),
                              e.ideas[n].project_problem &&
                                (e.ideas[n].project_problem.project_link =
                                  e.project_links[
                                    e.ideas[n].project_problem.id
                                  ]);
                          (e.today = new Date()),
                            Object.keys(e.milestones).forEach(function (t) {
                              for (var n in e.milestones[t])
                                e.milestones[t][n].due_date &&
                                  (e.milestones[t][n].due_date = new Date(
                                    e.milestones[t][n].due_date
                                  ));
                            }),
                            (e.presentations = Object.assign(
                              e.presentations || {},
                              t.presentations || {}
                            )),
                            e.sortIdeasByPriority(),
                            e.initializePhaseTimers(),
                            e.problemInitializers(t.problem.id);
                        }
                    }
                  ))),
              e.is_academy &&
                ["design", "maxwell"].includes(n.judge_type) &&
                e.fetchProblemScoreboard(n);
          }
        };
        var M = function (n) {
            t.getMaxwellSubmissions(
              {
                test_session_id: e.test_session_id,
                problem_id: n,
              },
              function (t) {
                (e.maxwellRepoUrl = t.git_project_url),
                  (e.maxwellSubmissions = t.submissions),
                  (e.maxwellCredentials = t.git_credentials),
                  (e.maxwellPlatformUrl = t.git_url);
              }
            );
          },
          O = function () {
            (e.maxwellPullUrl = null),
              (e.maxwellMergeRequest = {}),
              (e.merge_request_stages = []);
          },
          I = function (n) {
            var o = globalConfig.index;
            "open" === e.evaluation_stage[o] &&
              (O(),
              showMergeRequestLoader(o),
              t.getMaxwellMergeRequest(
                {
                  test_session_id: e.test_session_id,
                  problem_id: n,
                },
                function (t) {
                  if (t.success) {
                    updateMergeRequestProgress(
                      getNested(t, "merge_request", "review_state")
                    ),
                      (e.maxwellUsername = t.git_username),
                      (e.maxwellPullUrl = t.git_pull_url),
                      (e.maxwellMergeRequest = t.merge_request);
                    var n = Object.assign({}, t.merge_request);
                    e.merge_request_stages = createMergeRequestStageDetails(n);
                  } else
                    toastr.error("Failed to get merge request data response");
                  hideMergeRequestLoader(o);
                }
              ));
          };
        e.requestMergeRequestReview = function (n) {
          var o = globalConfig.index;
          showMergeRequestLoader(o),
            t.requestReview(
              {
                test_session_id: e.test_session_id,
                problem_id: n,
              },
              function (t) {
                if (t.success) {
                  (e.maxwellMergeRequest.review_state = t.review_state),
                    updateMergeRequestProgress(t.review_state);
                  var n = Object.assign({}, e.maxwellMergeRequest);
                  (e.merge_request_stages = createMergeRequestStageDetails(n)),
                    toastr.success(
                      "Request raised for pull request review successfully",
                      "SUCCESS"
                    );
                } else toastr.info(t.error_message, "INFO");
                hideMergeRequestLoader(o);
              }
            );
        };
        var R = function (t) {
            let n;
            e.leaderboardHeaders.push("rank"),
              "maxwell" === t.judge_type
                ? (n = e.has_problem_stage(t.id, "code_evaluation")
                    ? "The rank is based on score, number of attempts and time taken to solve the problem"
                    : "The rank is based on the score")
                : "design" === t.judge_type &&
                  (n =
                    "The rank is based on score and time taken to submit the design for the problem"),
              (e.leaderboardHeadersInfo.rank = n);
          },
          P = function (t) {
            let n;
            e.leaderboardHeaders.push("score"),
              (n = e.has_problem_stage(t.id, "code_evaluation")
                ? "This score is based on the number of test cases passed"
                : "This score is based on the feedback from TA/Mentor on the submission"),
              (e.leaderboardHeadersInfo.score = n);
          },
          L = function (t) {
            let n;
            e.leaderboardHeaders.push("submission_link"),
              (n = e.solved_hash[t.id]
                ? "Click on the links to view your peers submission"
                : "The links will be visible once you have solved the problem"),
              (e.leaderboardHeadersInfo.submission_link = n);
          },
          D = function (t, n = []) {
            (e.leaderboardHeadersInfo = {}),
              (e.leaderboardHeaders = []),
              R(t),
              e.leaderboardHeaders.push("name"),
              P(t),
              e.has_problem_stage(t.id, "code_evaluation") &&
                (e.leaderboardHeaders.push("test_cases"),
                (e.leaderboardHeadersInfo.test_cases =
                  "Number of test cases passed out of the total number of test cases"),
                e.leaderboardHeaders.push("attempts"),
                (e.leaderboardHeadersInfo.attempts =
                  "Number of attempts made to solve the problem"),
                e.leaderboardHeaders.push("last_submission_time"),
                (e.leaderboardHeadersInfo.last_submission_time =
                  "Time of first submission at which maximum score is achieved")),
              (e.leaderboardHeaders = e.leaderboardHeaders.concat(n));
            for (var o = 0; o < n.length; o += 1) {
              var i = n[o];
              e.leaderboardHeadersInfo[i] =
                "Average score provided by TA/Mentor on this evaluation metric";
            }
            L(t);
          },
          N = function () {
            (E = {}),
              angular.forEach(e.problemLeaderboard, function (t, n) {
                let o = e.problemLeaderboard[n].session_problem_id;
                E[o] = Number(n);
              });
          },
          H = function (t) {
            e.has_problem_stage(t, "code_evaluation") &&
              angular.forEach(e.problemLeaderboard, function (t, n) {
                let o = e.problemLeaderboard[n].last_submission_time;
                if (o) {
                  let t = formatDateHelper(new Date(o), "yyyy/MM/dd HH:mm:ss");
                  e.problemLeaderboard[n].last_submission_time = t;
                }
              });
          },
          B = function (e) {
            $(`#problem-leaderboard-${e} #evaluation-loader-container`).css(
              "display",
              "flex"
            );
          },
          F = function (e) {
            $(`#problem-leaderboard-${e} #evaluation-loader-container`).css(
              "display",
              "none"
            );
          },
          j = function (e) {
            let t = `problem-leaderboard-${e}`,
              n = document.getElementById(t);
            n && n.scrollIntoView();
          };
        (e.capitalizeString = function (e) {
          return humanize(e);
        }),
          (e.fetchProblemScoreboard = function (n, o = 1, i = !1) {
            if (e.is_academy && ["design", "maxwell"].includes(n.judge_type)) {
              (e.problemLeaderboard = null), (e.problemLeaderboardRanks = []);
              var r = globalConfig.index;
              B(r),
                t.getProblemScoreboard(
                  {
                    session_id: e.test_session_id,
                    problem_id: n.id,
                    page: o,
                  },
                  function (t) {
                    t.success &&
                      ((e.problemLeaderboard = t.leaderboard),
                      (e.problemLeaderboardRanks = Object.keys(t.leaderboard)),
                      (e.leaderboardEvaluationMetrics = t.crowd_judge_metrics),
                      D(n, t.crowd_judge_metrics),
                      H(n.id),
                      N(),
                      (e.totalLeaderboardPages = t.total_pages),
                      (e.currentLeaderboardPage = o),
                      setTimeout(() => {
                        var t = e.leaderboardHeaders.length;
                        $(".problem-leaderboard .leaderboard__table").css(
                          "width",
                          `${Math.max(100, 14 * t)}%`
                        );
                      }, 100)),
                      F(r);
                  }
                ),
                i && j(r);
            }
          }),
          (e.nextLeaderboardPage = function (t, n = !1) {
            var o;
            e.currentLeaderboardPage < e.totalLeaderboardPages &&
              (n
                ? ((o = e.totalLeaderboardPages),
                  window.storeEsEvent(
                    "problem_leaderboard_last",
                    "click",
                    t.id
                  ))
                : ((o = e.currentLeaderboardPage + 1),
                  window.storeEsEvent(
                    "problem_leaderboard_next",
                    "click",
                    t.id
                  )),
              e.fetchProblemScoreboard(t, o, !0));
          }),
          (e.prevLeaderboardPage = function (t, n = !1) {
            var o;
            e.currentLeaderboardPage > 1 &&
              (n
                ? ((o = 1),
                  window.storeEsEvent(
                    "problem_leaderboard_first",
                    "click",
                    t.id
                  ))
                : ((o = e.currentLeaderboardPage - 1),
                  window.storeEsEvent(
                    "problem_leaderboard_prev",
                    "click",
                    t.id
                  )),
              e.fetchProblemScoreboard(t, o, !0));
          }),
          (e.trackLeaderboardPageClick = function (e, t) {
            window.storeEsEvent("problem-leaderboard-page", "click", t),
              window.storeEsEvent("problem_leaderboard_page", "click", e.id);
          }),
          (e.paginationRange = function (t) {
            let n = [],
              o = t - 2 > 0 ? t - 2 : 1,
              i = Math.min(Math.max(t + 2, 5), e.totalLeaderboardPages);
            for (let e = o; e <= i; e += 1) n.push(e);
            return n;
          });
        var U = function (e) {
            e && window.open(e, "__blank");
          },
          q = function (n, o) {
            var i = globalConfig.index,
              r = e.problemLeaderboardRanks;
            (e.problemLeaderboardRanks = []),
              B(i),
              t.addSubmissionViewer(
                {
                  session_problem_id: n,
                },
                function (t) {
                  if ((F(i), (e.problemLeaderboardRanks = r), t.success)) {
                    e.viewedLeaderboardSubmissions.push(n);
                    var a = window.open();
                    a ? (a.location.href = o) : U(o);
                  } else
                    toastr.info(
                      "Failed to open the solution. Please contact scaler support team.",
                      "INFO"
                    );
                }
              );
          },
          z = function (e, t) {
            window.storeEsEvent("design_submission_view", "click", e),
              window.storeEsEvent("design_submission_rank_view", "click", E[e]),
              window.storeEsEvent(
                "design_submission_problem_view",
                "click",
                globalConfig.problem_id
              ),
              U(t);
          },
          K = function (t, n) {
            window.storeEsEvent("maxwell_submission_view", "click", t),
              window.storeEsEvent(
                "maxwell_submission_rank_view",
                "click",
                E[t]
              ),
              window.storeEsEvent(
                "maxwell_submission_problem_view",
                "click",
                globalConfig.problem_id
              ),
              e.viewedLeaderboardSubmissions.includes(t) ? U(n) : q(t, n);
          };
        e.openPeerSubmission = function (e, t) {
          var n = t.session_problem_id,
            o = t.submission_link;
          o &&
            ["design", "maxwell"].includes(e.judge_type) &&
            ("design" === e.judge_type
              ? z(n, o)
              : "maxwell" === e.judge_type && K(n, o));
        };
        var W = function () {
            (e.completed_evaluations = {}),
              (e.completed_evaluation_data = {}),
              (e.evaluation_list = {}),
              (e.evaluation_data_details = {}),
              (e.extra_evaluation_list = {}),
              (e.extra_evaluation_data_details = {}),
              (e.no_evaluations = 1);
          },
          V = function (n, o) {
            var i = globalConfig.index;
            0 === o &&
              "open" === e.evaluation_stage[i] &&
              t.getDiagrams(
                {
                  problem_id: n,
                  index: $("#problem_" + (i + 1)).data("problemIndex"),
                },
                function (t) {
                  Object.keys(t.content).forEach(function (o) {
                    e.showDiagramSubmit = !0;
                    var i = o.substr(0, o.lastIndexOf("_"));
                    createDiagramTab(i, t.content[o].html, t.content[o].time),
                      updateDiagramSavePath(n, o, t.content[o].attachment_id);
                  });
                }
              ),
              $("#ib_sub_loader").fadeOut("fast");
          },
          G = function (t, n) {
            var o = updateEvaluationDetails(
              t.completed_evaluations,
              t.completed_evaluation_data,
              n
            );
            (e.completed_evaluations = o.evaluation_list),
              (e.completed_evaluation_data = o.details);
          },
          Y = function (t, n) {
            var o = updateEvaluationDetails(
              t.started_evaluations,
              t.started_evaluation_data,
              n
            );
            (e.evaluation_list = o.evaluation_list),
              (e.evaluation_data_details = o.details);
          },
          Q = function (t, n, o) {
            var i = t.minimum_peer_count,
              r = e.completed_evaluations.length,
              a = e.evaluation_list.length,
              s = updateEvaluationDetails(
                t.open_evaluations,
                t.open_evaluation_data,
                n
              );
            if (o)
              (e.extra_evaluation_list = s.evaluation_list.slice(
                0,
                Math.max(0, i - a)
              )),
                (e.extra_evaluation_data_details = s.details);
            else {
              (e.evaluation_list = e.evaluation_list.concat(s.evaluation_list)),
                (e.evaluation_data_details = Object.assign(
                  e.evaluation_data_details,
                  s.details
                ));
              var l = globalConfig.problem_id;
              e.solved_hash[l] ||
                (e.evaluation_list = e.evaluation_list.slice(
                  0,
                  Math.max(0, i - r)
                ));
            }
            var c = e.completed_evaluations.length + e.evaluation_list.length;
            (e.no_evaluations = 0), i && c < i && (e.no_evaluations = i - c);
          },
          J = function (e, t, n) {
            G(e, t), Y(e, t), Q(e, t, n);
          },
          X = function (t, n, o = !1) {
            var i = e.problem_judge_types[n];
            "design" === e.problem_judge_types[n] && (e.maxDiagram = 5),
              o &&
                ("design" === e.problem_judge_types[n]
                  ? trackGaEvent("crowd_source_peer", "more_peer_evaluations")
                  : window.storeEsEvent("maxwell_more_peer_evaluations")),
              J(t, i, o);
          },
          Z = function () {
            var t = globalConfig.problem_id;
            if ("design" === e.problem_judge_types[t]) {
              trackGaEvent("crowd_source_peer", "edit_diagram_stage");
              var n = getDiagramTabCount(globalConfig.index);
              V(t, n);
            } else
              "maxwell" === e.problem_judge_types[t] &&
                (window.storeEsEvent("maxwell_stage_merge_request"), I(t));
          },
          ee = function () {
            var t = globalConfig.problem_id;
            "design" === e.problem_judge_types[t]
              ? trackGaEvent("crowd_source_peer", "peer_evaluation_stage")
              : "maxwell" === e.problem_judge_types[t] &&
                window.storeEsEvent("maxwell_stage_peer_evaluation"),
              e.getEvaluations();
          },
          te = function () {
            var t = globalConfig.problem_id;
            "design" === e.problem_judge_types[t]
              ? trackGaEvent("crowd_source_peer", "view_feedback_stage")
              : "maxwell" === e.problem_judge_types[t] &&
                window.storeEsEvent("maxwell_stage_view_feedback");
          };
        (e.updateTilesStage = function (t) {
          var n = globalConfig.index;
          (e.evaluation_stage[n] = t), updateEvaluationStepTile(t, !1);
        }),
          (e.updateEvaluationStage = function (t) {
            var n = globalConfig.problem_id;
            "open" === t
              ? ($("#ib_sub_loader").show(), e.updateTilesStage(t), Z())
              : "attempted" === t && e.attempted_hash[n]
              ? ($("#ib_sub_loader").show(), e.updateTilesStage(t), ee())
              : "solved" === t &&
                e.solved_hash[n] &&
                ($("#ib_sub_loader").show(), e.updateTilesStage(t), te()),
              $("#ib_sub_loader").fadeOut("fast");
          }),
          (e.getEvaluations = function (n = !1) {
            var o = globalConfig.problem_id;
            W(), $("#ib_sub_loader").show();
            var i = {
              group_type: "peer",
              test_session_id: e.test_session_id,
              problem_id: o,
              required: n,
            };
            t.getEvaluationList(
              i,
              function (e) {
                X(e, o, n),
                  n &&
                    e.evaluation_list &&
                    0 === e.evaluation_list.length &&
                    toastr.success(
                      "There are no more peer submissions to evaluate",
                      {
                        timeOut: 1e4,
                      }
                    );
              },
              function () {
                toastr.error("Something went wrong!", "ERROR");
              }
            ),
              $("#ib_sub_loader").fadeOut("fast");
          }),
          (e.showFeedback = function () {
            if (e.solved_hash[globalConfig.problem_id]) {
              $("#ib_sub_loader").show();
              var n = {
                group_type: "peer",
                test_session_id: e.test_session_id,
                problem_id: globalConfig.problem_id,
              };
              t.getEvaluationFeedback(
                n,
                function (t) {
                  $("#ib_sub_loader").fadeOut("fast"),
                    t.success &&
                      ((e.max_score = 10),
                      (e.evaluation_id = t.evaluation_id),
                      (e.peer_score = t.average_scores.peer),
                      (e.non_peer_score = t.average_scores.non_peer),
                      (e.cumulative_score = t.average_scores.cumulative),
                      (e.best_rated_metrics = t.metrics_rating));
                },
                function (e) {
                  $("#ib_sub_loader").fadeOut("fast"),
                    toastr.error(
                      e.error_message || "Something went wrong!",
                      "ERROR"
                    );
                }
              );
            }
          }),
          (e.trackStageButtonClick = function (t) {
            var n = globalConfig.problem_id;
            "design" === e.problem_judge_types[n]
              ? trackGaEvent("crowd_source_peer", t)
              : "maxwell" === e.problem_judge_types[n] &&
                window.storeEsEvent("maxwell_button-" + t);
          }),
          (e.moveModalContent = function (t) {
            if ("left" == t && S > 0) S -= 1;
            else if ("right" == t) {
              x[k].length - S > 1 && (S += 1);
            }
            e.selected_diagram = x[k][S];
          }),
          (e.openDiagramModal = function (t, n, o) {
            (x = o),
              (e.selected_diagram = x[n][t]),
              (k = n),
              (S = t),
              trackGaEvent("crowd_source_peer", "open_diagram_modal"),
              $("#show_diagram_" + globalConfig.index).modal("show");
          }),
          (e.changeCreateButtonStyle = function (e) {
            var t = [
                diagramEditorPrefixes.createDiagram,
                globalConfig.index,
              ].join(""),
              n = e.filename;
            updateDiagramButtonCSS(t, n);
          }),
          (e.changeRenameButtonStyle = function (e) {
            var t = [
                diagramEditorPrefixes.renameDiagram,
                globalConfig.index,
              ].join(""),
              n = e.new_filename;
            updateDiagramButtonCSS(t, n);
          });
        var ne = function (n) {
          t.submitDiagramForEvaluation(
            {
              problem_id: n,
              session_id: e.test_session_id,
            },
            function (t) {
              t.success
                ? ((e.attempted_hash[n] = !0),
                  resetDiagramTabs(globalConfig.index),
                  e.has_problem_stage(n, "peer_evaluation")
                    ? (updateEvaluationStepTile("attempted"),
                      (e.evaluation_stage[globalConfig.index] = "attempted"),
                      e.getEvaluations())
                    : ((e.solved_hash[n] = !0),
                      updateEvaluationStepTile("solved"),
                      (e.evaluation_stage[globalConfig.index] = "solved"),
                      e.showFeedback()),
                  toastr.success(
                    "Diagrams Submitted successfully for Evaluation",
                    "SUCCESS"
                  ))
                : toastr.error(t.error_message, "ERROR"),
                $("#ib_sub_loader").fadeOut("fast");
            },
            function () {
              $("#ib_sub_loader").fadeOut("fast"), toastr.error(error, "ERROR");
            }
          );
        };
        e.submit_diagram_for_evaluation = function (e) {
          trackGaEvent("crowd_source_peer", "submit_for_evaluation"),
            $.confirm({
              title: "Submit Diagrams for Evaluation",
              content:
                "You will not be able to change your submitted diagrams later. Do you want to continue?",
              buttons: {
                cancel: {
                  btnClass: "btn-diagram",
                  text: "Cancel",
                  action: function () {},
                },
                confirm: {
                  btnClass: "btn-diagram btn-scaler-blue",
                  text: "Continue",
                  action: function () {
                    $("#ib_sub_loader").show(),
                      myinterviewtrainer.problem.submit_diagram(e, ne);
                  },
                },
              },
            });
        };
        var oe = function () {
          var t = document.getElementById(
              "filename_input_" + globalConfig.index
            ).value,
            n = document.getElementById(
              "select-diagram-type-" + globalConfig.index
            ).value,
            o = e.diagram_types[n],
            i = null;
          return validateDiagramFilename(t) && (i = t + "_" + o), i;
        };
        (e.renameDiagramFile = function () {
          var e = document.getElementById(
              "new_filename_input_" + globalConfig.index
            ).value,
            t = document.getElementById("rename-diagram-" + globalConfig.index),
            n = t.getAttribute("data-diagram-type"),
            o = t.getAttribute("data-image-name"),
            i = t.getAttribute("data-tab-name");
          if (validateDiagramFilename(e)) {
            var r = o.lastIndexOf("_"),
              a = [e, n, o.substr(r + 1)].join("_"),
              s = [e, n].join("_");
            $("#rename-diagram-" + globalConfig.index).modal("hide"),
              $("#ib_sub_loader").show();
            var l = $(`#${i}_draw_container`).children("img").attr("src");
            fetch(l)
              .then(async (e) => {
                e.ok
                  ? ((e = await e.blob()),
                    blobToDataURL(e, function (e) {
                      var t = globalConfig.problem_id,
                        n = diagramPaperclipPath[t][i],
                        r = {};
                      r[a] = e;
                      var l = createDiagramsList(r, t, n);
                      trackGaEvent("crowd-source-peer", "rename_diagram_file"),
                        new S3Store().uploadAttachment(
                          l[0][0],
                          l[0][1],
                          function () {
                            $.ajax({
                              url: rootUrl + "rename-diagram",
                              method: "POST",
                              data: {
                                attachment_id: n,
                                current_name: [o, "svg"].join("."),
                                new_name: [a, "svg"].join("."),
                              },
                              success: function (e) {
                                updateDiagramMapOnRename(o, a),
                                  (diagramPaperclipPath[t][a] = n),
                                  $("[aria-controls = " + i + "]")
                                    .find("span")
                                    .text(s),
                                  $(`#${i}_draw_container`)
                                    .children("img")
                                    .attr("src", e.attachment_url),
                                  $("#ib_sub_loader").fadeOut("fast"),
                                  e.success &&
                                    toastr.success(
                                      "Diagram renamed successfully!",
                                      "SUCCESS"
                                    );
                              },
                              error: function () {
                                $("#ib_sub_loader").fadeOut("fast");
                              },
                            });
                          },
                          function () {
                            $("#ib_sub_loader").fadeOut("fast"),
                              toastr.error(
                                "Unable to rename Diagram!",
                                "ERROR"
                              );
                          }
                        );
                    }))
                  : ($("#ib_sub_loader").fadeOut("fast"),
                    recordErrors(error),
                    toastr.error(
                      "Cannot fetch the diagram to rename",
                      "ERROR"
                    ));
              })
              .catch((e) => {
                $("#ib_sub_loader").fadeOut("fast"), recordErrors(e);
              });
          }
        }),
          (e.addNewDiagramFile = function () {
            var n = oe();
            if (n) {
              $(diagramEditorPrefixes.addDiagram + globalConfig.index).modal(
                "hide"
              ),
                $("#ib_sub_loader").show(),
                trackGaEvent("crowd_source_peer", "create_new_diagram");
              var o = globalConfig.problem_id;
              t.getDiagramTab(
                {
                  problem_id: o,
                  session_id: e.test_session_id,
                  tab_name: n,
                },
                function (t) {
                  (e.showDiagramSubmit = !0),
                    createDiagramTab(n, t.html, t.time),
                    $("#ib_sub_loader").fadeOut("fast");
                  var i = [n, t.time].join("_"),
                    r = ["design", i].join("_");
                  updateDiagramSavePath(o, i, t.attachment_id),
                    myinterviewtrainer.problem.populateDrawingTool(r);
                },
                function () {
                  toastr.error("Cannot create diagram tab", "ERROR");
                }
              );
            }
          }),
          (e.activateProblemTab = function (t) {
            (e.problemTabIndex = "problem_index_" + t),
              (e.problemTabParent = angular.element(
                document.getElementById(e.problemTabIndex)
              )),
              e.problemTabParent.addClass("active");
          }),
          (e.saveObjectiveAnswer = function (t, n, o) {
            o = o;
            var i = null,
              r = e.practice_mode || e.is_academy;
            e.current_test.realtime_objective && e.attempted_hash[o] && !r
              ? toastr.warning(
                  "You have already answered this question",
                  "ALREADY SUBMITTED"
                )
              : e.current_test.realtime_objective && !r
              ? $.confirm({
                  icon: "fa fa-warning",
                  title:
                    "Do you really want to submit your answer for this question?",
                  content: "You cannot edit your answer once you submit",
                  columnClass: "col-sm-12 col-md-12 col-lg-12",
                  buttons: {
                    confirm: {
                      text: "SUBMIT ANSWER",
                      btnClass: "btn-blue",
                      action: function () {
                        e.saveObjectiveAnswerHelper(t, n, o, i);
                      },
                    },
                    cancel: {
                      text: "Cancel",
                      btnClass: "btn-red",
                    },
                  },
                  backgroundDismiss: !0,
                  theme: "supervan",
                  closeIcon: !0,
                })
              : e.saveObjectiveAnswerHelper(t, n, o, i);
          }),
          (e.saveObjectiveAnswerHelper = function (e, n, o, i) {
            if (
              ($(".submit-objective").prop("disabled", "true"),
              $(".submit-objective").val("Submitting..."),
              "text" === e.answer_type)
            )
              i = $("#objective_content_" + (n + 1)).val();
            else {
              var r = [];
              $("#objective_" + (n + 1) + " :checked").each(function () {
                r.push($(this).val());
              }),
                (i = r);
            }
            null != i && i.length > 0
              ? t.saveObjectiveAnswer(
                  {
                    problem_id: o,
                    programming_language_id: -1,
                    answer_type: e.answer_type,
                    content: i,
                  },
                  function (t) {
                    le(t, n, e.answer_type);
                  },
                  function () {
                    recordErrors("Failed to record users response"),
                      toastr.error("Failed to record your response.");
                  }
                )
              : toastr.warning("Please provide some answer", "WARNING!");
          });
        var ie = function (e) {
            return "correct_answer" === e;
          },
          re = function (e) {
            (success_message = "Your answer has been evaluated."),
              ie(e)
                ? toastr.success(success_message, "CORRECT ANSWER")
                : toastr.warning(success_message, "WRONG ANSWER");
          },
          ae = function (t, n) {
            e.solved_hash[t.problem_id] = e.solved_hash[t.problem_id] || ie(n);
          },
          se = function (t, n, o = !1) {
            (e.solved_hash[t.problem_id] || !0 === o) && (e.answer = n);
          },
          le = function (t, n, o) {
            e.is_academy || e.practice_mode
              ? re(t.submission_status)
              : ((success_message = "Your answer has been recorded."),
                e.current_test.realtime_objective ||
                  (success_message +=
                    " It will be evaluated after the test has ended."),
                toastr.success(success_message, "SUCCESS")),
              $(".submit-objective").prop("disabled", !1),
              $(".submit-objective").val("Submit"),
              $(
                ".test_problem_" + t.submission.problem_id + " a span"
              ).addClass("solved"),
              (e.attempted_hash[t.submission.problem_id] = !0),
              e.setShowEndTest(),
              e.is_academy || e.practice_mode
                ? ae(t.submission, t.submission_status)
                : (e.solved_hash[t.submission.problem_id] = !1);
            var i =
              e.multiple_answer_hash[t.submission.problem_id] || "text" === o;
            e.is_academy || (e.practice_mode && e.hint_access_allowed)
              ? se(t.submission, t.aa, i)
              : setTimeout(function () {
                  null != e.test_problems[n + 1] &&
                    $(
                      ".test_problem_" + e.test_problems[n + 1].id + " > a"
                    ).click();
                }, 500);
          };
        (e.openSubmissionFileModal = function (t) {
          $("#submissionFileModal_" + t).modal("show"),
            e.changeDSMLSubmissionState(1, t);
        }),
          (e.changeDSMLSubmissionState = function (t, n) {
            switch (
              (t
                ? (e.dsml_submission_state = t)
                : toastr.warning("Invalid Submission State", "WARNING!"),
              t)
            ) {
              case 1:
                $("#ds-upload-code-" + n).addClass("in active"),
                  $("#ds-upload-project-files-" + n).removeClass("in active"),
                  $("#ds-upload-submission-file-" + n).removeClass("in active");
                break;
              case 2:
                $("#ds-upload-code-" + n).removeClass("in active"),
                  $("#ds-upload-project-files-" + n).addClass("in active"),
                  $("#ds-upload-submission-file-" + n).removeClass("in active");
                break;
              case 3:
                $("#ds-upload-code-" + n).removeClass("in active"),
                  $("#ds-upload-project-files-" + n).removeClass("in active"),
                  $("#ds-upload-submission-file-" + n).addClass("in active");
                break;
              default:
                $("#ds-upload-code-" + n).addClass("in active"),
                  $("#ds-upload-project-files-" + n).removeClass("in active"),
                  $("#ds-upload-submission-file-" + n).removeClass("in active");
            }
          }),
          (e.resetDSMLSubmissionState = function () {
            $.confirm({
              icon: "fa fa-warning",
              title: "Warning",
              content:
                "This will restart your submission flow. Do you really want to restart this submission?",
              columnClass:
                "col-sm-12 col-md-offset-3 col-lg-offset-3 col-md-6 col-lg-6",
              buttons: {
                confirm: {
                  text: "RESTART SUBMISSION",
                  btnClass: "btn-orange",
                  action: function () {
                    (e.current_code_file_content = ""),
                      myinterviewtrainer.problem.editor.setValue(
                        e.current_code_file_content
                      ),
                      myinterviewtrainer.problem.save_code(!0),
                      e.changeDSMLSubmissionState(1, globalConfig.problem_id);
                  },
                },
              },
              backgroundDismiss: !0,
              theme: "supervan",
              closeIcon: !0,
            });
          }),
          (e.initializePhaseTimers = function () {
            (phase_timers = $(".phase-timer")),
              phase_timers.each(function () {
                var e = $(this),
                  t = 60 * parseInt(e.data("time-left-minutes")),
                  n = moment()
                    .add(e.data("time-left-minutes"), "minutes")
                    .toDate();
                $(e)
                  .countdown(n)
                  .on("update.countdown", function (e) {
                    var o = "%H Hr : %M min : %S sec ",
                      i = (new Date(n).getTime() - parseInt(e.timeStamp)) / 1e3;
                    parseFloat(t);
                    i >= 86400 && (o = "%D day %H hr : %M min : %S sec"),
                      i >= 172800 && (o = "%D days %H hr : %M min : %S sec"),
                      $(this).html(e.strftime(o));
                  })
                  .on("finish.countdown", function (e) {
                    "ideathon-phase" == $(e.target).data("type") &&
                      endIdeathonPhase($(e.target).data("name"));
                  });
              });
          }),
          (e.tagsAutocomplete = function (t) {
            t = t.toLowerCase();
            var n = [];
            return (
              angular.forEach(e.all_tags, function (e) {
                e.toLowerCase().includes(t) && n.push(e);
              }),
              n
            );
          }),
          (e.viewDetailedIdea = function (t, n) {
            (e.selected_idea = n),
              $("#view_detailed_idea_modal_" + t).modal("show");
          }),
          (e.viewTeamFormationGuidelines = function (e) {
            $("#team_formation_guidelines_" + e).modal("show");
          }),
          (e.showAcceptRequestModal = function (t, n) {
            (e.decoded_member_key = decodeMemberKey(
              n.from_id + "-" + n.from_type
            )),
              (e.selected_request = n),
              (e.selected_member = e.participant_info[e.decoded_member_key.id]),
              (e.selected_idea = e.getMatchingWishlistIdea(t, n.for_id)),
              $("#accept_request_modal" + t).modal("show");
          }),
          (e.showDenyRequestModal = function (t, n) {
            (e.decoded_member_key = decodeMemberKey(
              n.from_id + "-" + n.from_type
            )),
              (e.selected_request = n),
              (e.selected_member = e.participant_info[e.decoded_member_key.id]),
              (e.selected_idea = e.getMatchingWishlistIdea(t, n.for_id)),
              $("#deny_request_modal" + t).modal("show");
          }),
          (e.showCounterRequestModal = function (t, n) {
            (e.decoded_member_key = decodeMemberKey(
              n.from_id + "-" + n.from_type
            )),
              (e.selected_request = n),
              (e.selected_member = e.participant_info[e.decoded_member_key.id]),
              (e.selected_idea = e.getMatchingWishlistIdea(t, n.for_id)),
              $("#counter_request_modal" + t).modal("show");
          }),
          (decodeMemberKey = function (e) {
            return {
              id: e.split("-")[0],
              type: e.split("-")[1],
            };
          }),
          (e.getMatchingWishlistIdea = function (t, n) {
            if (t)
              for (i in ((wishlist_ideas = e.ideas[t].wishlist_ideas),
              wishlist_ideas))
                if (wishlist_ideas[i].idea_association_id == n)
                  return wishlist_ideas[i];
          }),
          (e.showRequestIdeaModal = function (t, n) {
            (e.decoded_member_key = decodeMemberKey(n)),
              (e.selected_member = e.participant_info[e.decoded_member_key.id]),
              $("#select_request_idea_modal" + t).modal("show");
          }),
          (e.setIdeaAssociation = function (t) {
            e.selected_idea_ass_id = t;
          }),
          (e.showRequestTeamJoinModal = function (t, n) {
            (e.decoded_member_key = decodeMemberKey(n)),
              (e.selected_idea = e.getMatchingWishlistIdea(
                t,
                e.team_invite_suggestions[t][n].ideas[0]
              )),
              $("#request_team_join_modal" + t).modal("show");
          }),
          (e.upvoteIdea = function (e) {
            t.giveVote(
              {
                target_type: "IdeaAssociation",
                target_id: e.idea_association_id,
                source_type: "InterviewbitTestSession",
                vote_type: "upvote",
              },
              function (e) {
                e.success ||
                  toastr.error(
                    e.error_message || "Something went wrong!",
                    "ERROR"
                  );
              }
            );
          }),
          (e.downvoteIdea = function (e) {
            t.giveVote(
              {
                target_type: "IdeaAssociation",
                target_id: e.idea_association_id,
                source_type: "InterviewbitTestSession",
                vote_type: "downvote",
              },
              function (e) {
                e.success ||
                  toastr.error(
                    e.error_message || "Something went wrong!",
                    "ERROR"
                  );
              }
            );
          }),
          (e.indexIdeas = function (t) {
            (e.original_idea_indices = {}),
              angular.forEach(e.ideas[t].idea_associations, function (t, n) {
                e.original_idea_indices[t.idea_association_id] = n;
              });
          }),
          (e.moveIdeaToWishlist = function (t, n) {
            if (
              e.ideas[t].wishlist_ideas.length <
              e.ideathons_hash[t].max_ideas_per_user
            ) {
              var o = e.original_idea_indices[n],
                i = e.ideas[t].idea_associations.splice(o, 1)[0];
              (i.wishlist = !0),
                (i.already_selected = (i.already_selected || 0) + 1),
                e.ideas[t].wishlist_ideas.splice(
                  e.ideas[t].wishlist_ideas.length,
                  0,
                  i
                ),
                e.updateIdeaPriorities(t),
                toastr.success(
                  "<b>" +
                    i.title.toString() +
                    "</b> has been added to your preferred Ideas!",
                  "SUCCESS"
                );
            } else
              toastr.warning(
                "You can only select " +
                  e.ideathons_hash[t].max_ideas_per_user +
                  " ideas.",
                "WARNING"
              );
            e.indexIdeas(t);
          }),
          (e.moveIdeaToAll = function (t, n) {
            var o = e.ideas[t].wishlist_ideas.splice(n, 1)[0];
            (o.wishlist = !0),
              (o.already_selected = Math.max((o.already_selected || 0) - 1, 0)),
              e.ideas[t].idea_associations.splice(0, 0, o),
              e.updateIdeaPriorities(t),
              e.indexIdeas(t);
          }),
          (e.moveIdeaInWishlist = function (t, n, o) {
            var i = e.ideas[t].wishlist_ideas.splice(n, 1)[0];
            e.ideas[t].wishlist_ideas.splice(o, 0, i),
              e.updateIdeaPriorities(t);
          }),
          (e.sortIdeasByPriority = function () {
            for (var t in e.ideas)
              e.ideas[t].wishlist_ideas.sort((e, t) =>
                e.priority > t.priority ? 1 : -1
              );
          }),
          (e.getIdeaPriorities = function (t) {
            if ([null, void 0].includes(t)) return [];
            var n = {};
            return (
              e.ideas[t].wishlist_ideas.forEach(function (e, t) {
                n[t] = e.idea_association_id;
              }),
              n
            );
          }),
          (e.updateIdeaPriorities = function (n) {
            var o = e.getIdeaPriorities(n);
            t.updatePriorities(
              {
                targets: Object.values(sortObjectByKey(o)),
                target_type: "IdeaAssociation",
                source_type: "InterviewbitTestSessionProblem",
                problem_id: n,
              },
              function (e) {
                e.success ||
                  toastr.error(
                    e.error_message || "Something went wrong!",
                    "ERROR"
                  );
              }
            );
          }),
          (e.addMilestone = function (t) {
            var n = {
              title: "Task",
              description: "Please type your Task description here",
              edit: !0,
            };
            e.milestones[t].push(n), e.updateMilestone(t, n, "create");
          }),
          (e.toggleMilestoneEditMode = function (e) {
            e && (e.edit = !e.edit);
          }),
          (e.updateMilestone = function (n, o, i) {
            n &&
              o &&
              i &&
              t.updateMilestone(
                {
                  milestone: o,
                  action_type: i,
                  problem_id: n,
                },
                function (t) {
                  if (t.success) {
                    if (t.milestones)
                      for (var r in ((e.milestones[n] = t.milestones),
                      e.milestones[n]))
                        e.milestones[n][r].due_date &&
                          (e.milestones[n][r].due_date = new Date(
                            e.milestones[n][r].due_date
                          ));
                    "create" == i &&
                      (e.milestones[n][e.milestones[n].length - 1].edit = !0),
                      "incomplete" == i &&
                        toastr.info(
                          o.title.toString() + " marked Incomplete!",
                          "INFO"
                        );
                  } else
                    toastr.error(
                      t.error_message || "Something went wrong!",
                      "ERROR"
                    );
                }
              );
          }),
          (e.updateMilestoneAction = function (t, n, o) {
            "delete" == o
              ? $.confirm({
                  icon: "fa fa-warning",
                  title: "Do you really want to delete this task ?",
                  content: "Once deleted, you cannot get it back",
                  columnClass: "col-sm-12 col-md-12 col-lg-12",
                  buttons: {
                    confirm: {
                      text: "Delete Task",
                      btnClass: "btn-red",
                      action: function () {
                        e.updateMilestone(t, n, o);
                      },
                    },
                    cancel: {
                      text: "Cancel",
                      btnClass: "btn-default",
                    },
                  },
                  backgroundDismiss: !0,
                  theme: "supervan",
                  closeIcon: !0,
                })
              : e.updateMilestone(t, n, o);
          }),
          (e.openCommentsModal = function (t, n, o) {
            (e.selected_milestone = o),
              $("#view_milesotne_comments_" + t).modal("show");
          }),
          (e.assignMilestoneDueDate = function (t, n) {
            (n.due_date = new Date()), e.updateMilestoneAction(t, n, "update");
          }),
          (e.openIdeathonSubmissionModal = function (t, n, o) {
            e.ideas[t].project_problem &&
            e.isProjectLinkValid(e.project_links[e.ideas[t].project_problem.id])
              ? ((e.selected_milestone = o),
                (e.milestone_attachment_params = {
                  problem_id: n,
                  milestone_achievement_id: o.milestone_achievement_id,
                  attachment_type: o.attachment_type,
                }),
                $("#milestone_achievement_attachment_" + t).modal("show"))
              : toastr.warning(
                  "Provide a valid Github Repository Link",
                  "WARNING"
                );
          });
        var ce = null;
        document.querySelector('meta[name="csrf-token"]') &&
          (ce = document
            .querySelector('meta[name="csrf-token"]')
            .getAttribute("content")),
          (e.updateMilestoneAchievementAttachment = new o({
            headers: {
              "X-CSRF-TOKEN": ce,
            },
            alias: "attachment",
            url: rootUrl + "save-milestone-attachment",
            queueLimit: 1,
            removeAfterUpload: !0,
            autoUpload: !0,
          })),
          (e.updateMilestoneAchievementAttachment.onBeforeUploadItem =
            function (t) {
              t.formData = [
                Object.assign(e.milestone_attachment_params, {
                  attachment_type: e.selected_milestone.attachment_type,
                }),
              ];
            }),
          (e.updateMilestoneAchievementAttachment.onSuccessItem = function (
            t,
            n
          ) {
            n.success
              ? ((e.selected_milestone.state = "completed"),
                toastr.success(
                  e.selected_milestone.title.toString() + " marked Complete!",
                  "SUCCESS"
                ))
              : toastr.error(
                  n.error_message ||
                    "Something went wrong! Please contact hello@interviewbit.com for further assistance."
                ),
              $(".modal").modal("hide");
          }),
          (e.updateMilestoneAchievementAttachment.onErrorItem = function () {
            recordErrors("Failed to upload Task Attachment!"),
              toastr.error(
                "Error occured while Uploading Attachment. Please refresh your page and try again."
              ),
              $(".modal").modal("hide");
          }),
          (e.uploadProjectPresentation = new o({
            headers: {
              "X-CSRF-TOKEN": ce,
            },
            alias: "attachment",
            url: rootUrl + "save-project-presentation",
            queueLimit: 1,
            removeAfterUpload: !0,
            autoUpload: !0,
          })),
          (e.uploadProjectPresentation.onBeforeUploadItem = function (t) {
            t.formData = [
              {
                problem_id: e.ideas[globalConfig.problem_id].project_problem.id,
              },
            ];
          }),
          (e.uploadProjectPresentation.onSuccessItem = function (t, n) {
            n.success
              ? ((e.presentations = Object.assign(
                  e.presentations || {},
                  n.presentations || {}
                )),
                toastr.success(
                  "Project Presentation uploaded successfully!",
                  "SUCCESS"
                ))
              : toastr.error(
                  n.error_message ||
                    "Something went wrong! Please contact hello@interviewbit.com for further assistance."
                );
          }),
          (e.uploadProjectPresentation.onErrorItem = function () {
            recordErrors("Failed to upload Project Presentation!"),
              toastr.error(
                "Error occured while Uploading Presentation. Please refresh your page and try again."
              );
          }),
          (e.commentOnMilestoneAchievement = function (n, o, i, r, a) {
            n &&
              o &&
              i &&
              t.commentOnMilestoneAchievement(
                {
                  milestone_achievement_id: o.milestone_achievement_id,
                  problem_id: n,
                  action_type: "add",
                  parent_id: a,
                  comment_text: r,
                },
                function (t) {
                  t.success
                    ? ((e.comment_text = ""),
                      t.comments &&
                        t.comments.length > 0 &&
                        (o.comments = t.comments))
                    : toastr.error(
                        t.error_message || "Something went wrong!",
                        "ERROR"
                      );
                }
              );
          }),
          (e.isProjectLinkValid = function (e) {
            return !(
              !e ||
              !e.match(
                /https:\/\/(www.)?github.com\/([a-zA-Z0-9\-\.]+)\/([a-zA-Z0-9\-\.]+)/g
              )
            );
          }),
          (e.updateProjectProblem = function (n, o) {
            if (
              ($("#ib_sub_loader").show(),
              !e.project_links[n.id].match(
                /https:\/\/(www.)?github.com\/([a-zA-Z0-9\-\.]+)\/([a-zA-Z0-9\-\.]+)/g
              ))
            )
              return (
                toastr.warning("Please provide a valid Github Repository Link"),
                $("#ib_sub_loader").hide(),
                null
              );
            var i = {};
            "description_statement" == o
              ? (i = {
                  problem_id: n.id,
                  problem_statement: n.problem_statement,
                  markdown_content: n.markdown_content,
                  project_link: e.project_links[n.id],
                  action_type: o,
                })
              : "project_link" == o &&
                (i = {
                  problem_id: n.id,
                  project_link: e.project_links[n.id],
                  action_type: o,
                }),
              t.updateProjectProblem(i, function (t) {
                $("#ib_sub_loader").hide(),
                  t.success
                    ? ((n.project_link =
                        e.project_links[n.id] || n.project_link),
                      "project_link" == o
                        ? toastr.success(
                            "Repository link updated successfully!",
                            "SUCCESS"
                          )
                        : toastr.success(
                            "Project Details updated successfully!",
                            "SUCCESS"
                          ))
                    : toastr.error(
                        t.error_message || "Something went wrong!",
                        "ERROR"
                      );
              });
          }),
          (e.getPreviousSubmissions = function () {
            t.getPreviousSubmissions({}, function (e) {
              e.success ||
                toastr.error(
                  e.error_message || "Something went wrong!",
                  "ERROR"
                );
            });
          }),
          (e.openSEOModal = function (t) {
            $("#seoModal").modal("show"),
              (e.currentInputDescriptor = e.input_descriptor_hash[t]);
          }),
          (e.seeExpectedOutput = function () {
            $("#ib_sub_loader").show(),
              $("#seoModal").modal("hide"),
              t.seeExpectedOutput(
                {
                  problem_id: globalConfig.problem_id,
                  input: $("#seo_input").val(),
                },
                function (e) {
                  if (($("#seoModal").modal("hide"), e.success))
                    var n = setInterval(function () {
                      $("#ib_sub_loader").show(),
                        t.getExpectedOutput(
                          {
                            ask_interviewer_id: e.ai_id,
                          },
                          function (e) {
                            if (
                              ($("#seoModal").modal("hide"),
                              e.success && 0 != e.status)
                            ) {
                              11 == e.status
                                ? "Compilation Error"
                                : 12 == e.status
                                ? "Runtime Error"
                                : 13 == e.status
                                ? "Time Limit Exceeded"
                                : 17 == e.status
                                ? "Memory Limit Exceeded"
                                : 20 == e.status
                                ? "Internal Error"
                                : "Done",
                                $("#ib_sub_loader").hide(),
                                $.alert({
                                  icon: "fa fa-info-circle",
                                  title: "See Expected Output",
                                  content:
                                    "<b style=' color: #ffebcd;'>Your Input:</b><br />" +
                                    e.input +
                                    "<br /><br /><b style=' color: #ffebcd;'>Expected Output:</b><br />" +
                                    e.output,
                                  columnClass:
                                    "col-sm-12 col-md-offset-2 col-lg-offset-2 col-md-8 col-lg-8",
                                  backgroundDismiss: !0,
                                  theme: "supervan",
                                  closeIcon: !0,
                                }),
                                clearInterval(n);
                            }
                          },
                          function (e) {
                            $("#ib_sub_loader").hide(),
                              $("#seoModal").modal("hide"),
                              e.success ||
                                (recordErrors("See Expected Output failed"),
                                toastr.error(
                                  e.message ||
                                    "Something went wrong! Please contact support team for further assistance",
                                  "ERROR"
                                ));
                          }
                        );
                    }, 2e3);
                  else $("#seoModal").modal("hide");
                },
                function (e) {
                  $("#ib_sub_loader").hide(),
                    $("#seoModal").modal("hide"),
                    e.success ||
                      (recordErrors("See Expected Output failed"),
                      toastr.error(
                        e.message ||
                          "Something went wrong! Please contact support team for further assistance",
                        "ERROR"
                      ));
                }
              );
          }),
          (e.unlockSection = function () {
            $("#ib_sub_loader").show(),
              t.unlockSection(
                {
                  section_key: e.current_section,
                },
                function (t) {
                  $("#ib_sub_loader").hide(),
                    t.success
                      ? ((e.section_usage_hash = t.section_usage_hash),
                        toastr.success(
                          "Section unlocked Successfully!",
                          "SUCCESS"
                        ),
                        e.initializeSectionTimers(e.current_section))
                      : toastr.error(
                          t.error_message ||
                            "Something went wrong. Please contact hello@interviewbit.com for further assistance",
                          "ERROR"
                        );
                }
              );
          }),
          (e.initializeSectionTimers = function (t) {
            (e.section_timers[t] = {}),
              (e.section_timers[t].time_remaining_seconds =
                60 * parseFloat(e.section_usage_hash[t].minutes_left)),
              (e.section_timers[t].locked = e.section_usage_hash[t].locked),
              (e.section_timers[t].ended = e.section_usage_hash[t].ended),
              !0 !== e.section_timers[t].timer_on &&
                0 == e.section_timers[t].locked &&
                e.startSectionTimers(t);
          }),
          (e.startSectionTimers = function (t) {
            (e.section_timers[t].timer_on = !0),
              (e.section_timers[t].countdown_timer = r(function () {
                e.section_timers[t].time_remaining_seconds--,
                  e.section_timers[t].time_remaining_seconds <= 1 &&
                    e.stopSectionTimers(t);
              }, 1e3));
          }),
          (e.stopSectionTimers = function (t) {
            0 == e.section_timers[t].ended &&
              (r.cancel(e.section_timers[t].countdown_timer),
              (e.section_timers[t].countdown_timer = null),
              (e.section_timers[t].ended = !0),
              endSection(t));
          }),
          (e.flagQuestion = function (n) {
            $("#flag_question_" + globalConfig.index).toggleClass(
              "fa-bookmark"
            ),
              $("#flag_question_" + globalConfig.index).toggleClass(
                "fa-bookmark-o"
              ),
              $("#flag_question_" + globalConfig.index).toggleClass("flag"),
              (e.flag_hash[n.id] = !e.flag_hash[n.id]),
              $(
                ".test_problem_" + globalConfig.problem_id + " a span"
              ).toggleClass("flagb"),
              t.flagQuestion({
                problem_id: n.id,
              });
          }),
          (e.inActiveMenu = function () {
            $("#menu > .active").removeClass("active"),
              (e.current_problem_no = "");
          }),
          (e.finishTest = function (n = "") {
            e.show_end_test
              ? $.confirm({
                  icon: "fa fa-warning",
                  title: "Warning",
                  content:
                    "This can not be reverted back. Do you really want to end this test?",
                  columnClass:
                    "col-sm-12 col-md-offset-3 col-lg-offset-3 col-md-6 col-lg-6",
                  buttons: {
                    confirm: {
                      text: "END TEST",
                      btnClass: "btn-red",
                      action: function () {
                        t.finishTest(
                          {
                            type: "finish",
                          },
                          n
                        );
                      },
                    },
                  },
                  backgroundDismiss: !0,
                  theme: "supervan",
                  closeIcon: !0,
                })
              : toastr.error(
                  "Finish all question(s) from mandatory section(s) to end the Test."
                );
          }),
          (e.isTruncatedInput = function () {
            return getNested(e.failedCustomInput, "is_truncated");
          }),
          (e.clearfailedCustomInput = function () {
            e.isTruncatedInput() &&
              $("#custom_input_textarea_" + globalConfig.index).val(""),
              (e.failedCustomInput = {});
          }),
          (e.testCustomInput = function (t) {
            (globalConfig.custom_input = $(
              "#custom_input_textarea_" + globalConfig.index
            ).val()),
              (globalConfig.failed_input_range = e.isTruncatedInput()
                ? e.failedCustomInput
                : {}),
              (e.isTruncatedInput() || s("custom_input")) &&
                myinterviewtrainer.problem.submit_code("custom", t);
          }),
          (e.hintAlreadyAccessed = function (t, n) {
            return -1 != e.accessed_hints_hash[t].indexOf(n);
          }),
          $(".video-rating .ics").click(function (t) {
            var n = $(this);
            addRating(n, n),
              (e.provideNegativeFeedback =
                $(t.currentTarget).data().value <
                e.video_feedback_positive_threshold),
              (e.providePositiveFeedback = !e.provideNegativeFeedback),
              (e.current_rating = $(t.currentTarget).data().value);
          }),
          (e.saveVideoFeedback = function () {
            let n = !1,
              [o, i] = c(
                "video-negative-feedback-input",
                e.provideNegativeFeedback,
                e.video_feedback_negative_options
              ),
              [r, a] = c(
                "video-positive-feedback-input",
                e.providePositiveFeedback,
                e.video_feedback_positive_options
              );
            (n = i || a), e.feedback_content !== e.save_feedback && (n = !0);
            let s = e.current_rating != e.video_rating,
              u = o.filter((e) => e.selected).length;
            s ||
            n ||
            (e.provideNegativeFeedback &&
              (!e.provideNegativeFeedback || 0 == u))
              ? 0 != u || e.providePositiveFeedback
                ? t.saveVideoFeedback(
                    {
                      feedback_content: e.save_feedback,
                      video_feedback_negative: o,
                      video_feedback_positive: r,
                      problem_id: globalConfig.problem_id,
                      rating: e.current_rating,
                    },
                    function (t) {
                      t.success &&
                        ((e.average_rating = t.average_rating),
                        (e.rating_count = t.rating_count),
                        (e.rating_change = !0),
                        (e.video_rating = e.current_rating),
                        (e.feedback_content = e.save_feedback),
                        (e.provideFeedback = e.initial),
                        (e.feedback_provided = !0),
                        (e.cancel = !1),
                        (e.show_first = e.initial),
                        updateTitleMessage(
                          e.average_rating,
                          e.rating_count,
                          e.current_rating
                        ),
                        updateReviewMessage(e.rating_count, e.current_rating),
                        e.initial || l(),
                        (e.initial = !1),
                        $("#feedback_option").addClass(
                          "content__feedback-option--margin"
                        ),
                        $("#showHintModal").modal("hide"),
                        toastr.success(
                          "Thanks for providing your feedback!",
                          "SUCCESS"
                        ));
                    },
                    function (e) {
                      e.success ||
                        toastr.warning(
                          e.error_message || "Something went wrong!"
                        );
                    }
                  )
                : toastr.info("Atleast one of the tags to be selected", "INFO")
              : $("#showHintModal").modal("hide");
          }),
          (e.editVideoFeedback = function () {
            (e.provideFeedback = !e.provideFeedback),
              (e.feedback_provided = !1),
              (e.cancel = !1),
              e.rating_change || (e.show = !1),
              window.storeEsEvent(
                "problem-hint_video_edit_feedback",
                "click",
                globalConfig.problem_id
              ),
              window.storeEsEvent(
                "video-hint_video_edit_feedback",
                "click",
                e.videoId
              );
          }),
          (e.toggleCheckbox = function (t, n) {
            var o = document.getElementById(t);
            o.click();
            var i = globalConfig.problem_id,
              r = Number(o.value);
            window.storeEsEvent(`hint_video_tag_${n}`, "click", r),
              window.storeEsEvent(`problem-hint_video_tag_${n}`, "click", i),
              window.storeEsEvent(
                `video-hint_video_tag_${n}`,
                "click",
                e.videoId
              );
          }),
          (e.getHintAccess = function (t, n, o) {
            e.hintAlreadyAccessed(o, t) || e.solved_hash[o]
              ? u(t)
              : $.confirm({
                  icon: "fa fa-warning",
                  title: "Sure about accessing Hint?",
                  content:
                    "Accessing this hint would deduct <b>" +
                    n +
                    "</b> percent of question's max score. Are you sure you want to see this hint?",
                  columnClass:
                    "col-sm-12 col-md-offset-3 col-lg-offset-3 col-md-6 col-lg-6",
                  buttons: {
                    confirm: {
                      text: "ACCESS HINT",
                      action: function () {
                        u(t), e.accessed_hints_hash[o].push(t);
                      },
                    },
                    cancel: {
                      text: "Cancel",
                      btnClass: "btn-red",
                    },
                  },
                  backgroundDismiss: !0,
                  theme: "supervan",
                  closeIcon: !0,
                });
          }),
          (e.poll = function () {
            t.durationPoll(
              {},
              function (e) {
                e.success && closeConnectivityCheck();
              },
              function (e) {
                e.success ||
                  (recordErrors("Polling failed"),
                  toastr.error("Something went wrong", "Error"));
              }
            );
          }),
          (e.getLiveScoreboard = function () {
            $("#scoreboard_loader").show(),
              t.liveScoreboard({}, function (t) {
                t.success &&
                  ($("#scoreboard_loader").hide(),
                  (e.scoreboard = t.scoreboard));
              });
          });
        ce = null;
        document.querySelector('meta[name="csrf-token"]') &&
          (ce = document
            .querySelector('meta[name="csrf-token"]')
            .getAttribute("content")),
          (e.uploadProjectFile = new o({
            headers: {
              "X-CSRF-TOKEN": ce,
            },
            alias: "project_files",
            url: rootUrl + "save-project-file",
            queueLimit: 1,
            removeAfterUpload: !0,
            autoUpload: !0,
          })),
          e.uploadProjectFile.filters.push({
            name: "fileFormatFilter",
            fn: function (e) {
              var t = e.name;
              return (
                !!/(\.zip|\.rar|\.7z|\.pdf|\.doc|\.docx|\.txt|\.ppt|\.pptx|\.rtf|\.csv)$/i.exec(
                  t
                ) ||
                (toastr.error("The uploaded file format is not supported."), !1)
              );
            },
          }),
          (e.uploadProjectFile.onBeforeUploadItem = function (e) {
            e.formData = [
              {
                problem_id: globalConfig.problem_id,
              },
            ];
          }),
          (e.uploadProjectFile.onSuccessItem = function (t, n) {
            var o = e.test_problems[e.current_problem_no - 1].id;
            (e.project_files_hash[o] = t.file.name),
              $(".test_problem_" + o + " a span").addClass("solved"),
              e.attempted_hash[o] ||
                ((e.attempted_hash[o] = !0),
                e.setShowEndTest(),
                e.is_academy
                  ? (e.solved_hash[o] = !0)
                  : (e.solved_hash[o] = !1)),
              n.success &&
                (2 == e.dsml_submission_state &&
                  e.changeDSMLSubmissionState(3, globalConfig.problem_id),
                toastr.success("Succesfully Uploaded Files", "SUCCESS"));
          }),
          (e.uploadProjectFile.onErrorItem = function () {
            recordErrors("Project/Assignment file upload failed"),
              toastr.error(
                "Error occured while Uploading Files. Please refresh your page and try again."
              );
          }),
          (e.uploadSubmissionFile = new o({
            headers: {
              "X-CSRF-TOKEN": ce,
            },
            alias: "submission_file",
            url: rootUrl + "save-submission-file",
            queueLimit: 1,
            removeAfterUpload: !0,
            autoUpload: !0,
          })),
          (e.uploadSubmissionFile.onBeforeUploadItem = function (t) {
            t.formData = [
              {
                problem_id: globalConfig.problem_id,
                programming_language_id: globalConfig.programming_language_id,
                submission_type: "submit",
                submission_content: e.current_code_file_content,
              },
            ];
          }),
          (e.uploadSubmissionFile.onSuccessItem = function (t, n) {
            var o = e.test_problems[e.current_problem_no - 1].id;
            e.attempted_hash[o] ||
              ((e.attempted_hash[o] = !0), e.setShowEndTest()),
              n.success
                ? ((e.submission_limits = n.submission_limits),
                  toastr.success("Succesfully Uploaded Files", "SUCCESS"))
                : toastr.error(
                    n.error_message ||
                      "Something went wrong! Please contact hello@interviewbit.com for further assistance."
                  );
          }),
          (e.uploadSubmissionFile.onErrorItem = function () {
            recordErrors("Submission file upload failed"),
              toastr.error(
                "Error occured while Uploading Files. Please refresh your page and try again."
              );
          }),
          (e.uploadCodeFile = new o({
            headers: {
              "X-CSRF-TOKEN": ce,
            },
            alias: "submission_code_file",
            url: rootUrl + "save-code-file",
            queueLimit: 1,
            removeAfterUpload: !0,
            autoUpload: !0,
          })),
          (e.uploadCodeFile.onBeforeUploadItem = function (e) {
            e.formData = [
              {
                problem_id: globalConfig.problem_id,
                programming_language_id: globalConfig.programming_language_id,
              },
            ];
          }),
          (e.uploadCodeFile.onSuccessItem = function (t, n) {
            var o = e.test_problems[e.current_problem_no - 1].id;
            e.attempted_hash[o] ||
              ((e.attempted_hash[o] = !0), e.setShowEndTest()),
              n.success &&
                ((e.current_code_file_content = n.submission_content),
                myinterviewtrainer.problem.editor.setValue(
                  e.current_code_file_content || ""
                ),
                myinterviewtrainer.problem.save_code(!0),
                e.changeDSMLSubmissionState(2, globalConfig.problem_id),
                toastr.success("Succesfully Uploaded Files", "SUCCESS"));
          }),
          (e.uploadCodeFile.onErrorItem = function () {
            recordErrors("Code upload failed"),
              toastr.error(
                "Error occured while Uploading Files. Please refresh your page and try again."
              );
          }),
          (e.showPreviousSubmissionCode = function (t, n) {
            (e.current_previous_submission_code = null),
              e.previous_submissions[t] &&
                e.previous_submissions[t][n] &&
                (e.current_previous_submission_code =
                  e.previous_submissions[t][n].submission_content),
              $("#previous_submission_code_" + t).modal("show");
          });
        var ue = null;
        (e.patOpts = {
          x: 0,
          y: 0,
          w: 25,
          h: 25,
        }),
          (e.videoChannel = {}),
          (e.webcamError = !1),
          (e.onWebcamError = function (t) {
            e.$apply(function () {
              e.webcamError = t;
            });
          }),
          (e.onWebcamSuccess = function () {
            (ue = document.querySelector("video.webcam-live")),
              e.$apply(function () {
                (e.patOpts.w = ue.width), (e.patOpts.h = ue.height);
              });
          }),
          (e.onStream = function () {}),
          (e.makeSnapshot = function () {
            var t = document.querySelector("#snapshot");
            if (t && ue) {
              (t.width = ue.width), (t.height = ue.height);
              var n = t.getContext("2d"),
                o = de(e.patOpts.x, e.patOpts.y, e.patOpts.w, e.patOpts.h);
              n.putImageData(o, 0, 0),
                o,
                b
                  .resizeBase64Image(t.toDataURL("image/png"), 160, 120)
                  .then(function (t) {
                    if (t[0]) {
                      var n = e.dataURItoBlob(t[0].src),
                        o = [
                          m,
                          e.test_session_id,
                          "image_" + Date.now() + ".png",
                        ].join("/");
                      (f = {
                        Key: o,
                        ContentType: "image/png",
                        Body: n,
                      }),
                        b.addPhoto("snapshot", f);
                    }
                  });
            }
          }),
          (e.dataURItoBlob = function (e) {
            for (
              var t = atob(e.split(",")[1]), n = [], o = 0;
              o < t.length;
              o++
            )
              n.push(t.charCodeAt(o));
            return new Blob([new Uint8Array(n)], {
              type: "image/png",
            });
          });
        var de = function (e, t, n, o) {
          var i = document.createElement("canvas");
          (i.width = ue.width), (i.height = ue.height);
          var r = i.getContext("2d");
          return (
            r.drawImage(ue, 0, 0, ue.width, ue.height),
            r.getImageData(e, t, n, o)
          );
        };
        (e.takeScreenshot = function () {
          html2canvas(window.parent.document.body).then(function (t) {
            y.resizeBase64Image(t.toDataURL("image/png"), 480, 270).then(
              function (t) {
                if (t[0]) {
                  var n = e.dataURItoBlob(t[0].src),
                    o = [
                      v,
                      e.test_session_id,
                      "image_" + Date.now() + ".png",
                    ].join("/");
                  (g = {
                    Key: o,
                    ContentType: "image/png",
                    Body: n,
                  }),
                    y.addPhoto("screenshot", g);
                }
              }
            );
          });
        }),
          (e.toggleChatRoom = function () {
            var e = $("#issuesModal");
            if ("none" == e.css("display")) {
              e.fadeIn();
              var t = $("#chat_messages");
              t.length > 0 && t.parent().scrollTop(t.parent()[0].scrollHeight);
            } else e.fadeOut();
          }),
          (e.closeChatRoom = function () {
            $("#issuesModal").fadeOut();
          }),
          (e.toggleElement = function (e) {
            var t = $("#" + e);
            t.is(":visible")
              ? (t.slideUp(),
                e.includes("solution_prefix") &&
                  t.prev().text("+ Show Solution Prefix"),
                e.includes("solution_suffix") &&
                  t.prev().text("+ Show Solution Suffix"))
              : (t.slideDown(),
                e.includes("solution_prefix") &&
                  t.prev().text("- Hide Solution Prefix"),
                e.includes("solution_suffix") &&
                  t.prev().text("- Hide Solution Suffix"));
          }),
          (e.parseTime = function (e) {
            if (e) return new Date(e).toLocaleString();
          }),
          (e.getObjectLength = function (e) {
            return (e && Object.keys(e).length) || 0;
          }),
          (e.parseDateTime = function (e) {
            if (e) {
              var t = new Date(e);
              return moment(t).format("LLL");
            }
          }),
          (e.parseInt = function (e) {
            return parseInt(e);
          }),
          (e.objectLength = function (e) {
            return e ? Object.keys(e).length : 0;
          }),
          (e.countValues = function (e, t) {
            var n = 0;
            for (var o in e) e[o] == t && (n += 1);
            return n;
          }),
          (e.copyToClipboard = function (e) {
            var t = $("<input>");
            $("body").append(t),
              t.val(e).select(),
              document.execCommand("copy"),
              t.remove(),
              toastr.info("Code copied to Clipboard", "Copied!");
          }),
          (e.markMembersAsPreferred = function (n, o) {
            e.member_emails && 0 != e.member_emails.length
              ? t.markMembersAsPreferred(
                  {
                    emails: e.member_emails,
                    team_id: o,
                  },
                  function (t) {
                    t.success
                      ? ((e.teams_info[n].team_members = t.team_members),
                        toastr.success(t.error_message))
                      : toastr.error(t.error_message),
                      (e.member_emails = []);
                  },
                  function (e) {
                    e.success ||
                      (recordErrors("Mark members as preferred failed"),
                      toastr.error(
                        "Error",
                        "Something went wrong! Please contact support team for further assistance."
                      ));
                  }
                )
              : toastr.error("Kindly input a few emails before submitting");
          }),
          (e.sendRequestForTeamFormation = function (n, o, i, r) {
            t.sendRequestForTeamFormation(
              {
                problem_id: n,
                idea_ass_id: o,
                member_id: i,
                member_type: r,
              },
              function (t) {
                t.success
                  ? (toastr.success(t.message),
                    t.request &&
                      (e.requests_sent_hash[n][t.request.id] = t.request),
                    $("#select_request_idea_modal" + n).modal("hide"),
                    $("#request_team_join_modal" + n).modal("hide"))
                  : toastr.error(t.message);
              }
            );
          }),
          (e.actionOfRequest = function (n, o, i = null, r = null) {
            t.actionOfRequest(
              {
                request_action_type: n,
                request_id: o,
                problem_id: i,
                idea_ass_id: r,
              },
              function (t) {
                t.success
                  ? (toastr.success(t.message),
                    "accept" == n
                      ? setTimeout(function () {
                          location.reload();
                        }, 3e3)
                      : "reject" == n
                      ? delete e.requests_received_hash[i][o]
                      : "cancel" == n
                      ? delete e.requests_sent_hash[i][o]
                      : "counter" == n &&
                        (delete e.requests_received_hash[i][o],
                        t.request &&
                          (e.requests_sent_hash[i][t.request.id] = t.request)),
                    $("#deny_request_modal" + i).modal("hide"),
                    $("#counter_request_modal" + i).modal("hide"),
                    $("#accept_request_modal" + i).modal("hide"))
                  : toastr.error(t.message);
              }
            );
          }),
          (e.openFullScoreboard = function (e) {
            window.ignore_event = !0;
            var t = $(e).attr("href");
            e.stopPropagation(), t && window.open(t, "_blank");
          });
      }
      angular.element(document).ready(function () {
        a(),
          $("#ib_loader").show(),
          e.getLiveTestProblems(),
          e.getViewedSubmissions(),
          e.checkDownloadSpeed();
      }),
        (e.summerNoteOptions = summerNoteOptions),
        (e.initalizeFirebase = function () {
          firebase.apps.length || firebase.initializeApp(e.firebase);
        }),
        (e.signInFirebaseUser = function () {
          return firebaseCustomTokenAuth(e.firebase_auth_token);
        }),
        (e.initFirePad = function (t) {
          (myinterviewtrainer.problem.editor.skipFirebase = !1),
            e.current_test.enable_code_playback && !e.is_academy && e.firebase
              ? (e.initalizeFirebase(),
                e
                  .signInFirebaseUser()
                  .then(function () {
                    const e = firebase
                      .database()
                      .ref()
                      .child("assessment_playbacks")
                      .child(t.ibt_session_slug)
                      .child(t.problem_id);
                    Firepad.fromACE(e, myinterviewtrainer.problem.editor).on(
                      "ready",
                      function () {
                        myinterviewtrainer.problem.editor.firepadReady = !0;
                      }
                    ),
                      (myinterviewtrainer.problem.editor.firepadInitiated = !0);
                  })
                  .catch(function (e) {
                    console.log(e),
                      (myinterviewtrainer.problem.editor.skipFirebase = !0),
                      (myinterviewtrainer.problem.editor.firepadReady = !0),
                      (myinterviewtrainer.problem.editor.firepadInitiated = !0),
                      recordErrors(e);
                  }))
              : (myinterviewtrainer.problem.editor.skipFirebase = !0),
            myinterviewtrainer.problem.editor.skipFirebase &&
              ((myinterviewtrainer.problem.editor.firepadReady = !0),
              (myinterviewtrainer.problem.editor.firepadInitiated = !0));
        });
    },
  ]),
  ibTestApp.factory("testBackend", [
    "$http",
    function (e) {
      return (
        (e.defaults.headers.common["X-Requested-With"] =
          "AngularXMLHttpRequest"),
        {
          getLiveTestProblems: function (t) {
            var n = 1e3 * randomInt(1, 6);
            setTimeout(function () {
              e({
                method: "GET",
                url: rootUrl + "live-problems",
              }).then(
                function (e) {
                  t(e.data);
                },
                function (e) {
                  serverErrorHandling(e);
                }
              );
            }, n);
          },
          getProblemPSP: function (t, n) {
            e({
              method: "GET",
              url:
                rootUrl + `${null == t.superBatchId ? "" : t.superBatchId}/psp`,
            }).then(
              function (e) {
                n(e.data);
              },
              function (e) {
                serverErrorHandling(e);
              }
            );
          },
          seeExpectedOutput: function (t, n, o) {
            e({
              method: "POST",
              url: rootUrl + "see-expected-output",
              data: t,
            }).then(
              function (e) {
                e.data.success ? n(e.data) : o(e.data);
              },
              function (e) {
                serverErrorHandling(e);
              }
            );
          },
          getExpectedOutput: function (t, n, o) {
            e({
              method: "GET",
              url:
                rootUrl +
                "get-expected-output?ask_interviewer_id=" +
                t.ask_interviewer_id,
            }).then(
              function (e) {
                e.data.success ? n(e.data) : o(e.data);
              },
              function (e) {
                serverErrorHandling(e);
              }
            );
          },
          saveObjectiveAnswer: function (t, n, o) {
            e({
              method: "POST",
              url: rootUrl + "save-objective-answer",
              data: t,
            }).then(
              function (e) {
                e.data.success ? n(e.data) : o(e.data);
              },
              function (e) {
                serverErrorHandling(e);
              }
            );
          },
          markProblemOpened: function (t, n) {
            e({
              method: "POST",
              url: rootUrl + "mark-problem-opened",
              data: t,
            }).then(
              function (e) {
                n(e.data);
              },
              function (e) {
                serverErrorHandling(e);
              }
            );
          },
          flagQuestion: function (t) {
            e({
              method: "POST",
              url: rootUrl + "flag-question",
              data: t,
            }).then(
              function (e) {
                e.data.success;
              },
              function (e) {
                $("#flag_question_" + globalConfig.index).toggleClass(
                  "fa-bookmark"
                ),
                  $("#flag_question_" + globalConfig.index).toggleClass(
                    "fa-bookmark-o"
                  ),
                  $("#flag_question_" + globalConfig.index).toggleClass("flag"),
                  $(
                    ".test_problem_" + globalConfig.problem_id + " a span"
                  ).toggleClass("flagb"),
                  serverErrorHandling(e);
              }
            );
          },
          unlockSection: function (t, n) {
            e({
              method: "POST",
              url: rootUrl + "unlock-section",
              data: t,
            }).then(
              function (e) {
                n(e.data);
              },
              function (e) {
                serverErrorHandling(e);
              }
            );
          },
          updatePriorities: function (t, n) {
            e({
              method: "POST",
              url: rootUrl + "update-priorities",
              data: t,
            }).then(
              function (e) {
                n(e.data);
              },
              function (e) {
                serverErrorHandling(e);
              }
            );
          },
          giveVote: function (t, n) {
            e({
              method: "POST",
              url: rootUrl + "give-vote",
              data: t,
            }).then(
              function (e) {
                n(e.data);
              },
              function (e) {
                serverErrorHandling(e);
              }
            );
          },
          updateMilestone: function (t, n) {
            e({
              method: "POST",
              url: rootUrl + "update-milestone",
              data: t,
            }).then(
              function (e) {
                n(e.data);
              },
              function (e) {
                serverErrorHandling(e);
              }
            );
          },
          commentOnMilestoneAchievement: function (t, n) {
            e({
              method: "POST",
              url: rootUrl + "comment",
              data: t,
            }).then(
              function (e) {
                n(e.data);
              },
              function (e) {
                serverErrorHandling(e);
              }
            );
          },
          updateProjectProblem: function (t, n) {
            e({
              method: "POST",
              url: rootUrl + "update-project-details",
              data: t,
            }).then(
              function (e) {
                n(e.data);
              },
              function (e) {
                serverErrorHandling(e);
              }
            );
          },
          finishTest: function (t, n) {
            e({
              method: "POST",
              url: rootUrl + "finish",
              data: t,
            }).then(
              function (e) {
                e.data.success &&
                  (n && window.trackGaEvent("assessment", "end_test", n),
                  endTestCB("closeWebview", "end"),
                  "" != e.data.redirect_url
                    ? (window.location.href = e.data.redirect_url)
                    : (window.location = "feedback"));
              },
              function (e) {
                serverErrorHandling(e);
              }
            );
          },
          getSolution: function (t, n) {
            e({
              method: "GET",
              url:
                rootUrl +
                "get-code?is_objective=true&problem_id=" +
                t.problem_id +
                "&programming_language_id=" +
                t.programming_language_id,
            }).then(
              function (e) {
                n(e.data);
              },
              function (e) {
                serverErrorHandling(e);
              }
            );
          },
          getHintAccess: function (t, n) {
            e({
              method: "GET",
              params: t,
              url: rootUrl + "access-hint",
            }).then(
              function (e) {
                n(e.data);
              },
              function (e) {
                serverErrorHandling(e);
              }
            );
          },
          durationPoll: function (t, n, o) {
            var i = "poll";
            null != t.current_duration &&
              null != t.current_extra_time &&
              (i =
                i +
                "?current_duration=" +
                t.current_duration +
                "&current_extra_time=" +
                t.current_extra_time),
              e({
                method: "GET",
                url: rootUrl + i,
              }).then(
                function (e) {
                  e.data.success ? ((DISCONNECTED = !1), n(e.data)) : o(e.data);
                },
                function (e) {
                  (DISCONNECTED = !0),
                    CONNECTIVITY_MODAL < 1 &&
                      null != e &&
                      -1 == e.status &&
                      (CONNECTIVITY_MODAL++, openConnectivityCheck());
                }
              );
          },
          liveScoreboard: function (t, n) {
            e({
              method: "GET",
              url: rootUrl + "scoreboard",
            }).then(
              function (e) {
                n(e.data);
              },
              function (e) {
                serverErrorHandling(e);
              }
            );
          },
          getPostPolicyDocument: function (t, n) {
            e({
              method: "GET",
              url: rootUrl + "ppd",
              params: t,
            }).then(
              function (e) {
                n(e.data);
              },
              function () {}
            );
          },
          notifyAdmin: function (t, n) {
            e({
              method: "POST",
              url: rootUrl + "notify-admin",
              data: t,
            }).then(
              function (e) {
                n(e.data);
              },
              function (e) {
                serverErrorHandling(e);
              }
            );
          },
          markMembersAsPreferred: function (t, n) {
            e({
              method: "POST",
              url: rootUrl + "invite-members-to-team",
              data: t,
            }).then(
              function (e) {
                n(e.data);
              },
              function (e) {
                serverErrorHandling(e);
              }
            );
          },
          sendRequestForTeamFormation: function (t, n) {
            e({
              method: "POST",
              url: rootUrl + "send-request-for-team-formation",
              data: t,
            }).then(
              function (e) {
                n(e.data);
              },
              function (e) {
                serverErrorHandling(e);
              }
            );
          },
          actionOfRequest: function (t, n) {
            e({
              method: "POST",
              url: rootUrl + "action-of-request",
              data: t,
            }).then(
              function (e) {
                n(e.data);
              },
              function (e) {
                serverErrorHandling(e);
              }
            );
          },
          getDiagrams: function (t, n) {
            e({
              method: "GET",
              url: rootUrl + "get-diagram",
              params: t,
            }).then(
              function (e) {
                n(e.data);
              },
              function (e) {
                serverErrorHandling(e);
              }
            );
          },
          getDiagramTab: function (t, n) {
            e({
              method: "GET",
              url: rootUrl + "create-diagram-tab",
              params: t,
            }).then(
              function (e) {
                n(e.data);
              },
              function (e) {
                serverErrorHandling(e);
              }
            );
          },
          renameDiagram: function (t, n) {
            e({
              method: "POST",
              url: rootUrl + "rename-diagram",
              data: t,
            }).then(
              function (e) {
                n(e.data);
              },
              function (e) {
                serverErrorHandling(e);
              }
            );
          },
          saveVideoFeedback: function (t, n) {
            e({
              method: "POST",
              url: rootUrl + "video-feedback",
              data: t,
            }).then(
              function (e) {
                n(e.data);
              },
              function (e) {
                serverErrorHandling(e);
              }
            );
          },
          getEvaluationList: function (t, n) {
            e({
              method: "GET",
              params: t,
              url: rootUrl + "evaluation-list",
            }).then(
              function (e) {
                n(e.data);
              },
              function (e) {
                serverErrorHandling(e);
              }
            );
          },
          getEvaluationFeedback: function (t, n) {
            e({
              method: "GET",
              params: t,
              url: rootUrl + "evaluation-feedback",
            }).then(
              function (e) {
                n(e.data);
              },
              function (e) {
                serverErrorHandling(e);
              }
            );
          },
          submitDiagramForEvaluation: function (t, n) {
            e({
              method: "POST",
              url: rootUrl + "submit-design-evaluation",
              data: t,
            }).then(
              function (e) {
                n(e.data);
              },
              function (e) {
                serverErrorHandling(e);
              }
            );
          },
          getGroupRequestSuggestions: function (t) {
            return e({
              method: "GET",
              url: "/academy/group-help-sessions-recommendation",
              params: t,
            });
          },
          getMaxwellSubmissions: function (t, n) {
            e({
              method: "GET",
              url:
                rootUrl +
                [
                  "maxwell",
                  t.test_session_id,
                  t.problem_id,
                  "submissions.json",
                ].join("/"),
            }).then(
              function (e) {
                (e.data.submissions = e.data.submissions.map(
                  (e) => (
                    "wrong_answer" === e.result
                      ? (e.result = "Failed")
                      : "running" === e.status
                      ? (e.result = "Running")
                      : "done" === e.status &&
                        "correct_answer" === e.result &&
                        (e.result = "Passed"),
                    e
                  )
                )),
                  n(e.data);
              },
              function (e) {
                console.log("Failed", e);
              }
            );
          },
          getMaxwellLastStatus: function (t, n) {
            e({
              method: "GET",
              url:
                rootUrl +
                [
                  "maxwell",
                  t.test_session_id,
                  t.problem_id,
                  "status.json",
                ].join("/"),
            }).then(
              function (e) {
                n(e.data.status || {});
              },
              function () {
                console.log("Failed");
              }
            );
          },
          getMaxwellMergeRequest: function (t, n) {
            e({
              method: "GET",
              url:
                rootUrl +
                [
                  "maxwell",
                  t.test_session_id,
                  t.problem_id,
                  "merge-request.json",
                ].join("/"),
            }).then(
              function (e) {
                n(e.data);
              },
              function (e) {
                serverErrorHandling(e);
              }
            );
          },
          requestReview: function (t, n) {
            e({
              method: "GET",
              url:
                rootUrl +
                [
                  "maxwell",
                  t.test_session_id,
                  t.problem_id,
                  "review-request.json",
                ].join("/"),
            }).then(
              function (e) {
                n(e.data);
              },
              function (e) {
                serverErrorHandling(e);
              }
            );
          },
          getProblemScoreboard: function (t, n) {
            e({
              method: "GET",
              params: t,
              url: rootUrl + "problem-scoreboard.json",
            }).then(
              function (e) {
                n(e.data);
              },
              function (e) {
                serverErrorHandling(e);
              }
            );
          },
          viewedSubmissions: function (t) {
            e({
              method: "GET",
              url: rootUrl + "viewed-scoreboard-submissions.json",
            }).then(
              function (e) {
                t(e.data);
              },
              function (e) {
                serverErrorHandling(e);
              }
            );
          },
          addSubmissionViewer: function (t, n) {
            e({
              method: "POST",
              params: t,
              url: rootUrl + "add-submission-viewer.json",
            }).then(
              function (e) {
                n(e.data);
              },
              function (e) {
                serverErrorHandling(e);
              }
            );
          },
        }
      );
    },
  ]),
  ibTestApp.filter("sanitize", function () {
    return function (e) {
      if (e)
        return (e = e.replace(/_/g, " "))
          ? e
              .split(" ")
              .map(function (e) {
                return e.charAt(0).toUpperCase() + e.substr(1).toLowerCase();
              })
              .join(" ")
          : "";
    };
  }),
  ibTestApp.filter("countdownTimer", function () {
    return function (e) {
      if (e) {
        var t = Math.floor(e),
          n = 0,
          o = 0,
          i = 0;
        return (
          t > 86400 && ((n = Math.floor(t / 86400)), (t %= 86400)),
          t > 3600 && ((o = Math.floor(t / 3600)), (t %= 3600)),
          t > 60 && ((i = Math.floor(t / 60)), (t %= 60)),
          n > 0
            ? n + "d : " + o + "h : " + i + "m : " + t + "s"
            : o + "h : " + i + "m : " + t + "s"
        );
      }
    };
  }),
  ibTestApp.filter("scoreFilter", function () {
    return function (e, t) {
      var n = [];
      if (e)
        for (var o = 0; o < e.length; o++) {
          e[o].score >= t && n.push(e[o]);
        }
      return n;
    };
  }),
  ibTestApp.filter("startFrom", function () {
    return function (e, t) {
      return e ? ((t = +t), e.slice(t)) : [];
    };
  }),
  ibTestApp.filter("trim", function () {
    return function (e) {
      return angular.isString(e) ? e.replace(/^\s+|\s+$/g, "") : e;
    };
  }),
  ibTestApp.filter("truncate", function () {
    return function (e, t, n, o) {
      if (!e) return "";
      if (!(n = parseInt(n, 10))) return e;
      if (e.length <= n) return e;
      if (((e = e.substr(0, n)), t)) {
        var i = e.lastIndexOf(" ");
        -1 !== i &&
          (("." !== e.charAt(i - 1) && "," !== e.charAt(i - 1)) || (i -= 1),
          (e = e.substr(0, i)));
      }
      return e + (o || " \u2026");
    };
  }),
  ibTestApp.filter("filterByTags", function () {
    return function (e, t) {
      if (!t || t.length < 1) return e;
      var n = [];
      return (
        (e || []).forEach(function (e) {
          t.some(function (t) {
            var n = [];
            return (
              angular.forEach(e.tags, function (e) {
                n.push(e.name);
              }),
              n.indexOf(t.text) > -1 ||
                e.title
                  .toString()
                  .toLowerCase()
                  .includes(t.text.toLowerCase()) ||
                e.description
                  .toString()
                  .toLowerCase()
                  .includes(t.text.toLowerCase())
            );
          }) && n.push(e);
        }),
        n
      );
    };
  }),
  ibTestApp.filter("toDateTime", function () {
    return function (e) {
      return convertFormat(e, "LT, DD / MM / YYYY");
    };
  });
